
USB_okuma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e72c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b4  0800e8cc  0800e8cc  0001e8cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f280  0800f280  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800f280  0800f280  0001f280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f288  0800f288  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f288  0800f288  0001f288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f28c  0800f28c  0001f28c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800f290  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002de0  20000090  0800f320  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002e70  0800f320  00022e70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024955  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004757  00000000  00000000  00044a15  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010f8  00000000  00000000  00049170  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f70  00000000  00000000  0004a268  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b2d3  00000000  00000000  0004b1d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014db0  00000000  00000000  000664ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b709  00000000  00000000  0007b25b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00106964  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000490c  00000000  00000000  001069e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e8b4 	.word	0x0800e8b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	0800e8b4 	.word	0x0800e8b4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b972 	b.w	8000d88 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9e08      	ldr	r6, [sp, #32]
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	4688      	mov	r8, r1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d14b      	bne.n	8000b62 <__udivmoddi4+0xa6>
 8000aca:	428a      	cmp	r2, r1
 8000acc:	4615      	mov	r5, r2
 8000ace:	d967      	bls.n	8000ba0 <__udivmoddi4+0xe4>
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0720 	rsb	r7, r2, #32
 8000ada:	fa01 f302 	lsl.w	r3, r1, r2
 8000ade:	fa20 f707 	lsr.w	r7, r0, r7
 8000ae2:	4095      	lsls	r5, r2
 8000ae4:	ea47 0803 	orr.w	r8, r7, r3
 8000ae8:	4094      	lsls	r4, r2
 8000aea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aee:	0c23      	lsrs	r3, r4, #16
 8000af0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000af4:	fa1f fc85 	uxth.w	ip, r5
 8000af8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000afc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b00:	fb07 f10c 	mul.w	r1, r7, ip
 8000b04:	4299      	cmp	r1, r3
 8000b06:	d909      	bls.n	8000b1c <__udivmoddi4+0x60>
 8000b08:	18eb      	adds	r3, r5, r3
 8000b0a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b0e:	f080 811b 	bcs.w	8000d48 <__udivmoddi4+0x28c>
 8000b12:	4299      	cmp	r1, r3
 8000b14:	f240 8118 	bls.w	8000d48 <__udivmoddi4+0x28c>
 8000b18:	3f02      	subs	r7, #2
 8000b1a:	442b      	add	r3, r5
 8000b1c:	1a5b      	subs	r3, r3, r1
 8000b1e:	b2a4      	uxth	r4, r4
 8000b20:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b24:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b2c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b30:	45a4      	cmp	ip, r4
 8000b32:	d909      	bls.n	8000b48 <__udivmoddi4+0x8c>
 8000b34:	192c      	adds	r4, r5, r4
 8000b36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b3a:	f080 8107 	bcs.w	8000d4c <__udivmoddi4+0x290>
 8000b3e:	45a4      	cmp	ip, r4
 8000b40:	f240 8104 	bls.w	8000d4c <__udivmoddi4+0x290>
 8000b44:	3802      	subs	r0, #2
 8000b46:	442c      	add	r4, r5
 8000b48:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b4c:	eba4 040c 	sub.w	r4, r4, ip
 8000b50:	2700      	movs	r7, #0
 8000b52:	b11e      	cbz	r6, 8000b5c <__udivmoddi4+0xa0>
 8000b54:	40d4      	lsrs	r4, r2
 8000b56:	2300      	movs	r3, #0
 8000b58:	e9c6 4300 	strd	r4, r3, [r6]
 8000b5c:	4639      	mov	r1, r7
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d909      	bls.n	8000b7a <__udivmoddi4+0xbe>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	f000 80eb 	beq.w	8000d42 <__udivmoddi4+0x286>
 8000b6c:	2700      	movs	r7, #0
 8000b6e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b72:	4638      	mov	r0, r7
 8000b74:	4639      	mov	r1, r7
 8000b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7a:	fab3 f783 	clz	r7, r3
 8000b7e:	2f00      	cmp	r7, #0
 8000b80:	d147      	bne.n	8000c12 <__udivmoddi4+0x156>
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xd0>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 80fa 	bhi.w	8000d80 <__udivmoddi4+0x2c4>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4698      	mov	r8, r3
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	d0e0      	beq.n	8000b5c <__udivmoddi4+0xa0>
 8000b9a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b9e:	e7dd      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000ba0:	b902      	cbnz	r2, 8000ba4 <__udivmoddi4+0xe8>
 8000ba2:	deff      	udf	#255	; 0xff
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	2a00      	cmp	r2, #0
 8000baa:	f040 808f 	bne.w	8000ccc <__udivmoddi4+0x210>
 8000bae:	1b49      	subs	r1, r1, r5
 8000bb0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bb4:	fa1f f885 	uxth.w	r8, r5
 8000bb8:	2701      	movs	r7, #1
 8000bba:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bbe:	0c23      	lsrs	r3, r4, #16
 8000bc0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bcc:	4299      	cmp	r1, r3
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x124>
 8000bd0:	18eb      	adds	r3, r5, r3
 8000bd2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x122>
 8000bd8:	4299      	cmp	r1, r3
 8000bda:	f200 80cd 	bhi.w	8000d78 <__udivmoddi4+0x2bc>
 8000bde:	4684      	mov	ip, r0
 8000be0:	1a59      	subs	r1, r3, r1
 8000be2:	b2a3      	uxth	r3, r4
 8000be4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000be8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bf0:	fb08 f800 	mul.w	r8, r8, r0
 8000bf4:	45a0      	cmp	r8, r4
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x14c>
 8000bf8:	192c      	adds	r4, r5, r4
 8000bfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x14a>
 8000c00:	45a0      	cmp	r8, r4
 8000c02:	f200 80b6 	bhi.w	8000d72 <__udivmoddi4+0x2b6>
 8000c06:	4618      	mov	r0, r3
 8000c08:	eba4 0408 	sub.w	r4, r4, r8
 8000c0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c10:	e79f      	b.n	8000b52 <__udivmoddi4+0x96>
 8000c12:	f1c7 0c20 	rsb	ip, r7, #32
 8000c16:	40bb      	lsls	r3, r7
 8000c18:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c1c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c20:	fa01 f407 	lsl.w	r4, r1, r7
 8000c24:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c28:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c2c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c30:	4325      	orrs	r5, r4
 8000c32:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c36:	0c2c      	lsrs	r4, r5, #16
 8000c38:	fb08 3319 	mls	r3, r8, r9, r3
 8000c3c:	fa1f fa8e 	uxth.w	sl, lr
 8000c40:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c44:	fb09 f40a 	mul.w	r4, r9, sl
 8000c48:	429c      	cmp	r4, r3
 8000c4a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c4e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c52:	d90b      	bls.n	8000c6c <__udivmoddi4+0x1b0>
 8000c54:	eb1e 0303 	adds.w	r3, lr, r3
 8000c58:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c5c:	f080 8087 	bcs.w	8000d6e <__udivmoddi4+0x2b2>
 8000c60:	429c      	cmp	r4, r3
 8000c62:	f240 8084 	bls.w	8000d6e <__udivmoddi4+0x2b2>
 8000c66:	f1a9 0902 	sub.w	r9, r9, #2
 8000c6a:	4473      	add	r3, lr
 8000c6c:	1b1b      	subs	r3, r3, r4
 8000c6e:	b2ad      	uxth	r5, r5
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c7c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c80:	45a2      	cmp	sl, r4
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x1da>
 8000c84:	eb1e 0404 	adds.w	r4, lr, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	d26b      	bcs.n	8000d66 <__udivmoddi4+0x2aa>
 8000c8e:	45a2      	cmp	sl, r4
 8000c90:	d969      	bls.n	8000d66 <__udivmoddi4+0x2aa>
 8000c92:	3802      	subs	r0, #2
 8000c94:	4474      	add	r4, lr
 8000c96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c9e:	eba4 040a 	sub.w	r4, r4, sl
 8000ca2:	454c      	cmp	r4, r9
 8000ca4:	46c2      	mov	sl, r8
 8000ca6:	464b      	mov	r3, r9
 8000ca8:	d354      	bcc.n	8000d54 <__udivmoddi4+0x298>
 8000caa:	d051      	beq.n	8000d50 <__udivmoddi4+0x294>
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d069      	beq.n	8000d84 <__udivmoddi4+0x2c8>
 8000cb0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cb4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cb8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cbc:	40fd      	lsrs	r5, r7
 8000cbe:	40fc      	lsrs	r4, r7
 8000cc0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cc4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e747      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000ccc:	f1c2 0320 	rsb	r3, r2, #32
 8000cd0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cd4:	4095      	lsls	r5, r2
 8000cd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cda:	fa21 f303 	lsr.w	r3, r1, r3
 8000cde:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce2:	4338      	orrs	r0, r7
 8000ce4:	0c01      	lsrs	r1, r0, #16
 8000ce6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cea:	fa1f f885 	uxth.w	r8, r5
 8000cee:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cf2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf6:	fb07 f308 	mul.w	r3, r7, r8
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	fa04 f402 	lsl.w	r4, r4, r2
 8000d00:	d907      	bls.n	8000d12 <__udivmoddi4+0x256>
 8000d02:	1869      	adds	r1, r5, r1
 8000d04:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d08:	d22f      	bcs.n	8000d6a <__udivmoddi4+0x2ae>
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d92d      	bls.n	8000d6a <__udivmoddi4+0x2ae>
 8000d0e:	3f02      	subs	r7, #2
 8000d10:	4429      	add	r1, r5
 8000d12:	1acb      	subs	r3, r1, r3
 8000d14:	b281      	uxth	r1, r0
 8000d16:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d1a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d22:	fb00 f308 	mul.w	r3, r0, r8
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d907      	bls.n	8000d3a <__udivmoddi4+0x27e>
 8000d2a:	1869      	adds	r1, r5, r1
 8000d2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d30:	d217      	bcs.n	8000d62 <__udivmoddi4+0x2a6>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d915      	bls.n	8000d62 <__udivmoddi4+0x2a6>
 8000d36:	3802      	subs	r0, #2
 8000d38:	4429      	add	r1, r5
 8000d3a:	1ac9      	subs	r1, r1, r3
 8000d3c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d40:	e73b      	b.n	8000bba <__udivmoddi4+0xfe>
 8000d42:	4637      	mov	r7, r6
 8000d44:	4630      	mov	r0, r6
 8000d46:	e709      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000d48:	4607      	mov	r7, r0
 8000d4a:	e6e7      	b.n	8000b1c <__udivmoddi4+0x60>
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	e6fb      	b.n	8000b48 <__udivmoddi4+0x8c>
 8000d50:	4541      	cmp	r1, r8
 8000d52:	d2ab      	bcs.n	8000cac <__udivmoddi4+0x1f0>
 8000d54:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d58:	eb69 020e 	sbc.w	r2, r9, lr
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	4613      	mov	r3, r2
 8000d60:	e7a4      	b.n	8000cac <__udivmoddi4+0x1f0>
 8000d62:	4660      	mov	r0, ip
 8000d64:	e7e9      	b.n	8000d3a <__udivmoddi4+0x27e>
 8000d66:	4618      	mov	r0, r3
 8000d68:	e795      	b.n	8000c96 <__udivmoddi4+0x1da>
 8000d6a:	4667      	mov	r7, ip
 8000d6c:	e7d1      	b.n	8000d12 <__udivmoddi4+0x256>
 8000d6e:	4681      	mov	r9, r0
 8000d70:	e77c      	b.n	8000c6c <__udivmoddi4+0x1b0>
 8000d72:	3802      	subs	r0, #2
 8000d74:	442c      	add	r4, r5
 8000d76:	e747      	b.n	8000c08 <__udivmoddi4+0x14c>
 8000d78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d7c:	442b      	add	r3, r5
 8000d7e:	e72f      	b.n	8000be0 <__udivmoddi4+0x124>
 8000d80:	4638      	mov	r0, r7
 8000d82:	e708      	b.n	8000b96 <__udivmoddi4+0xda>
 8000d84:	4637      	mov	r7, r6
 8000d86:	e6e9      	b.n	8000b5c <__udivmoddi4+0xa0>

08000d88 <__aeabi_idiv0>:
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff fa2d 	bl	80001f4 <strlen>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	4803      	ldr	r0, [pc, #12]	; (8000db4 <Send_Uart+0x28>)
 8000da6:	f003 fbb8 	bl	800451a <HAL_UART_Transmit>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200006d8 	.word	0x200006d8

08000db8 <Mount_USB>:



void Mount_USB (void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	490a      	ldr	r1, [pc, #40]	; (8000de8 <Mount_USB+0x30>)
 8000dc0:	480a      	ldr	r0, [pc, #40]	; (8000dec <Mount_USB+0x34>)
 8000dc2:	f00b fc8b 	bl	800c6dc <f_mount>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <Mount_USB+0x38>)
 8000dcc:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting USB ...\n\n");
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <Mount_USB+0x38>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d003      	beq.n	8000dde <Mount_USB+0x26>
 8000dd6:	4807      	ldr	r0, [pc, #28]	; (8000df4 <Mount_USB+0x3c>)
 8000dd8:	f7ff ffd8 	bl	8000d8c <Send_Uart>
	else Send_Uart("USB mounted successfully...\n");
}
 8000ddc:	e002      	b.n	8000de4 <Mount_USB+0x2c>
	else Send_Uart("USB mounted successfully...\n");
 8000dde:	4806      	ldr	r0, [pc, #24]	; (8000df8 <Mount_USB+0x40>)
 8000de0:	f7ff ffd4 	bl	8000d8c <Send_Uart>
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000730 	.word	0x20000730
 8000dec:	20001790 	.word	0x20001790
 8000df0:	20000574 	.word	0x20000574
 8000df4:	0800e8cc 	.word	0x0800e8cc
 8000df8:	0800e8ec 	.word	0x0800e8ec

08000dfc <Unmount_USB>:

void Unmount_USB (void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, USBHPath, 1);
 8000e00:	2201      	movs	r2, #1
 8000e02:	490a      	ldr	r1, [pc, #40]	; (8000e2c <Unmount_USB+0x30>)
 8000e04:	2000      	movs	r0, #0
 8000e06:	f00b fc69 	bl	800c6dc <f_mount>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <Unmount_USB+0x34>)
 8000e10:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("USB UNMOUNTED successfully...\n\n\n");
 8000e12:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <Unmount_USB+0x34>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d103      	bne.n	8000e22 <Unmount_USB+0x26>
 8000e1a:	4806      	ldr	r0, [pc, #24]	; (8000e34 <Unmount_USB+0x38>)
 8000e1c:	f7ff ffb6 	bl	8000d8c <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
}
 8000e20:	e002      	b.n	8000e28 <Unmount_USB+0x2c>
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <Unmount_USB+0x3c>)
 8000e24:	f7ff ffb2 	bl	8000d8c <Send_Uart>
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000730 	.word	0x20000730
 8000e30:	20000574 	.word	0x20000574
 8000e34:	0800e90c 	.word	0x0800e90c
 8000e38:	0800e930 	.word	0x0800e930

08000e3c <Scan_USB>:

/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_USB (char* pat)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b09a      	sub	sp, #104	; 0x68
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;
    char *path = malloc(20*sizeof (char));
 8000e44:	2014      	movs	r0, #20
 8000e46:	f00d f90d 	bl	800e064 <malloc>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	667b      	str	r3, [r7, #100]	; 0x64
    sprintf (path, "%s",pat);
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000e52:	f00d fa03 	bl	800e25c <strcpy>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8000e56:	f107 0308 	add.w	r3, r7, #8
 8000e5a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f00c fa1f 	bl	800d2a0 <f_opendir>
 8000e62:	4603      	mov	r3, r0
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b3f      	ldr	r3, [pc, #252]	; (8000f64 <Scan_USB+0x128>)
 8000e68:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000e6a:	4b3e      	ldr	r3, [pc, #248]	; (8000f64 <Scan_USB+0x128>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d16e      	bne.n	8000f50 <Scan_USB+0x114>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	493c      	ldr	r1, [pc, #240]	; (8000f68 <Scan_USB+0x12c>)
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f00c fadf 	bl	800d43c <f_readdir>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b38      	ldr	r3, [pc, #224]	; (8000f64 <Scan_USB+0x128>)
 8000e84:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || USBHfno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000e86:	4b37      	ldr	r3, [pc, #220]	; (8000f64 <Scan_USB+0x128>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d15b      	bne.n	8000f46 <Scan_USB+0x10a>
 8000e8e:	4b36      	ldr	r3, [pc, #216]	; (8000f68 <Scan_USB+0x12c>)
 8000e90:	7e9b      	ldrb	r3, [r3, #26]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d057      	beq.n	8000f46 <Scan_USB+0x10a>
            if (USBHfno.fattrib & AM_DIR)     /* It is a directory */
 8000e96:	4b34      	ldr	r3, [pc, #208]	; (8000f68 <Scan_USB+0x12c>)
 8000e98:	7b1b      	ldrb	r3, [r3, #12]
 8000e9a:	f003 0310 	and.w	r3, r3, #16
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d03a      	beq.n	8000f18 <Scan_USB+0xdc>
            {
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8000ea2:	4932      	ldr	r1, [pc, #200]	; (8000f6c <Scan_USB+0x130>)
 8000ea4:	4832      	ldr	r0, [pc, #200]	; (8000f70 <Scan_USB+0x134>)
 8000ea6:	f7ff f99b 	bl	80001e0 <strcmp>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d045      	beq.n	8000f3c <Scan_USB+0x100>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8000eb0:	492e      	ldr	r1, [pc, #184]	; (8000f6c <Scan_USB+0x130>)
 8000eb2:	4830      	ldr	r0, [pc, #192]	; (8000f74 <Scan_USB+0x138>)
 8000eb4:	f7ff f994 	bl	80001e0 <strcmp>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d040      	beq.n	8000f40 <Scan_USB+0x104>
            	char *buf = malloc(30*sizeof(char));
 8000ebe:	201e      	movs	r0, #30
 8000ec0:	f00d f8d0 	bl	800e064 <malloc>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
            	sprintf (buf, "Dir: %s\r\n", USBHfno.fname);
 8000ec8:	4a28      	ldr	r2, [pc, #160]	; (8000f6c <Scan_USB+0x130>)
 8000eca:	492b      	ldr	r1, [pc, #172]	; (8000f78 <Scan_USB+0x13c>)
 8000ecc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000ece:	f00d f9a5 	bl	800e21c <siprintf>
            	Send_Uart(buf);
 8000ed2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000ed4:	f7ff ff5a 	bl	8000d8c <Send_Uart>
            	free(buf);
 8000ed8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000eda:	f00d f8cb 	bl	800e074 <free>
                i = strlen(path);
 8000ede:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000ee0:	f7ff f988 	bl	80001f4 <strlen>
 8000ee4:	65b8      	str	r0, [r7, #88]	; 0x58
                sprintf(&path[i], "/%s", USBHfno.fname);
 8000ee6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000ee8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000eea:	4413      	add	r3, r2
 8000eec:	4a1f      	ldr	r2, [pc, #124]	; (8000f6c <Scan_USB+0x130>)
 8000eee:	4923      	ldr	r1, [pc, #140]	; (8000f7c <Scan_USB+0x140>)
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f00d f993 	bl	800e21c <siprintf>
                fresult = Scan_USB(path);                     /* Enter the directory */
 8000ef6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000ef8:	f7ff ffa0 	bl	8000e3c <Scan_USB>
 8000efc:	4603      	mov	r3, r0
 8000efe:	461a      	mov	r2, r3
 8000f00:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <Scan_USB+0x128>)
 8000f02:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 8000f04:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <Scan_USB+0x128>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d11b      	bne.n	8000f44 <Scan_USB+0x108>
                path[i] = 0;
 8000f0c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000f0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f10:	4413      	add	r3, r2
 8000f12:	2200      	movs	r2, #0
 8000f14:	701a      	strb	r2, [r3, #0]
 8000f16:	e7ac      	b.n	8000e72 <Scan_USB+0x36>
            }
            else
            {   /* It is a file. */
           	   char *buf = malloc(30*sizeof(char));
 8000f18:	201e      	movs	r0, #30
 8000f1a:	f00d f8a3 	bl	800e064 <malloc>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	663b      	str	r3, [r7, #96]	; 0x60
               sprintf(buf,"File: %s/%s\n", path, USBHfno.fname);
 8000f22:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <Scan_USB+0x130>)
 8000f24:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000f26:	4916      	ldr	r1, [pc, #88]	; (8000f80 <Scan_USB+0x144>)
 8000f28:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000f2a:	f00d f977 	bl	800e21c <siprintf>
               Send_Uart(buf);
 8000f2e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000f30:	f7ff ff2c 	bl	8000d8c <Send_Uart>
               free(buf);
 8000f34:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000f36:	f00d f89d 	bl	800e074 <free>
 8000f3a:	e79a      	b.n	8000e72 <Scan_USB+0x36>
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8000f3c:	bf00      	nop
 8000f3e:	e798      	b.n	8000e72 <Scan_USB+0x36>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8000f40:	bf00      	nop
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8000f42:	e796      	b.n	8000e72 <Scan_USB+0x36>
                if (fresult != FR_OK) break;
 8000f44:	bf00      	nop
            }
        }
        f_closedir(&dir);
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f00c fa50 	bl	800d3f0 <f_closedir>
    }
    free(path);
 8000f50:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000f52:	f00d f88f 	bl	800e074 <free>
    return fresult;
 8000f56:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <Scan_USB+0x128>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3768      	adds	r7, #104	; 0x68
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000574 	.word	0x20000574
 8000f68:	20000578 	.word	0x20000578
 8000f6c:	20000592 	.word	0x20000592
 8000f70:	0800e950 	.word	0x0800e950
 8000f74:	0800e95c 	.word	0x0800e95c
 8000f78:	0800e978 	.word	0x0800e978
 8000f7c:	0800e984 	.word	0x0800e984
 8000f80:	0800e988 	.word	0x0800e988

08000f84 <Read_File>:
	    return fresult;
	}
}

FRESULT Read_File (char *name)
{
 8000f84:	b590      	push	{r4, r7, lr}
 8000f86:	b08b      	sub	sp, #44	; 0x2c
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 8000f8c:	495e      	ldr	r1, [pc, #376]	; (8001108 <Read_File+0x184>)
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f00c fa91 	bl	800d4b6 <f_stat>
 8000f94:	4603      	mov	r3, r0
 8000f96:	461a      	mov	r2, r3
 8000f98:	4b5c      	ldr	r3, [pc, #368]	; (800110c <Read_File+0x188>)
 8000f9a:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000f9c:	4b5b      	ldr	r3, [pc, #364]	; (800110c <Read_File+0x188>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d012      	beq.n	8000fca <Read_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8000fa4:	2064      	movs	r0, #100	; 0x64
 8000fa6:	f00d f85d 	bl	800e064 <malloc>
 8000faa:	4603      	mov	r3, r0
 8000fac:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERRROR!!! *%s* does not exists\n\n", name);
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	4957      	ldr	r1, [pc, #348]	; (8001110 <Read_File+0x18c>)
 8000fb2:	68f8      	ldr	r0, [r7, #12]
 8000fb4:	f00d f932 	bl	800e21c <siprintf>
		Send_Uart (buf);
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	f7ff fee7 	bl	8000d8c <Send_Uart>
		free(buf);
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	f00d f858 	bl	800e074 <free>
	    return fresult;
 8000fc4:	4b51      	ldr	r3, [pc, #324]	; (800110c <Read_File+0x188>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	e09a      	b.n	8001100 <Read_File+0x17c>
	}

	else
	{
		/* Open file to read */
		fresult = f_open(&USBHFile, name, FA_READ);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	6879      	ldr	r1, [r7, #4]
 8000fce:	4851      	ldr	r0, [pc, #324]	; (8001114 <Read_File+0x190>)
 8000fd0:	f00b fbca 	bl	800c768 <f_open>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4b4c      	ldr	r3, [pc, #304]	; (800110c <Read_File+0x188>)
 8000fda:	701a      	strb	r2, [r3, #0]

		if (fresult != FR_OK)
 8000fdc:	4b4b      	ldr	r3, [pc, #300]	; (800110c <Read_File+0x188>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d015      	beq.n	8001010 <Read_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 8000fe4:	2064      	movs	r0, #100	; 0x64
 8000fe6:	f00d f83d 	bl	800e064 <malloc>
 8000fea:	4603      	mov	r3, r0
 8000fec:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000fee:	4b47      	ldr	r3, [pc, #284]	; (800110c <Read_File+0x188>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4948      	ldr	r1, [pc, #288]	; (8001118 <Read_File+0x194>)
 8000ff8:	6938      	ldr	r0, [r7, #16]
 8000ffa:	f00d f90f 	bl	800e21c <siprintf>
		    Send_Uart(buf);
 8000ffe:	6938      	ldr	r0, [r7, #16]
 8001000:	f7ff fec4 	bl	8000d8c <Send_Uart>
		    free(buf);
 8001004:	6938      	ldr	r0, [r7, #16]
 8001006:	f00d f835 	bl	800e074 <free>
		    return fresult;
 800100a:	4b40      	ldr	r3, [pc, #256]	; (800110c <Read_File+0x188>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	e077      	b.n	8001100 <Read_File+0x17c>
		}

		/* Read data from the file
		* see the function details for the arguments */

    	char *buf = malloc(100*sizeof(char));
 8001010:	2064      	movs	r0, #100	; 0x64
 8001012:	f00d f827 	bl	800e064 <malloc>
 8001016:	4603      	mov	r3, r0
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
    	sprintf (buf, "Opening file-->  *%s*  To READ data from it\n", name);
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	493f      	ldr	r1, [pc, #252]	; (800111c <Read_File+0x198>)
 800101e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001020:	f00d f8fc 	bl	800e21c <siprintf>
    	Send_Uart(buf);
 8001024:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001026:	f7ff feb1 	bl	8000d8c <Send_Uart>
        free(buf);
 800102a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800102c:	f00d f822 	bl	800e074 <free>

		char *buffer = malloc(sizeof(f_size(&USBHFile)));
 8001030:	2008      	movs	r0, #8
 8001032:	f00d f817 	bl	800e064 <malloc>
 8001036:	4603      	mov	r3, r0
 8001038:	623b      	str	r3, [r7, #32]
		fresult = f_read (&USBHFile, buffer, f_size(&USBHFile), &br);
 800103a:	4b36      	ldr	r3, [pc, #216]	; (8001114 <Read_File+0x190>)
 800103c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001040:	461a      	mov	r2, r3
 8001042:	4b37      	ldr	r3, [pc, #220]	; (8001120 <Read_File+0x19c>)
 8001044:	6a39      	ldr	r1, [r7, #32]
 8001046:	4833      	ldr	r0, [pc, #204]	; (8001114 <Read_File+0x190>)
 8001048:	f00b fe49 	bl	800ccde <f_read>
 800104c:	4603      	mov	r3, r0
 800104e:	461a      	mov	r2, r3
 8001050:	4b2e      	ldr	r3, [pc, #184]	; (800110c <Read_File+0x188>)
 8001052:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001054:	4b2d      	ldr	r3, [pc, #180]	; (800110c <Read_File+0x188>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d016      	beq.n	800108a <Read_File+0x106>
		{
			char *buf = malloc(100*sizeof(char));
 800105c:	2064      	movs	r0, #100	; 0x64
 800105e:	f00d f801 	bl	800e064 <malloc>
 8001062:	4603      	mov	r3, r0
 8001064:	617b      	str	r3, [r7, #20]
			free(buffer);
 8001066:	6a38      	ldr	r0, [r7, #32]
 8001068:	f00d f804 	bl	800e074 <free>
		 	sprintf (buf, "ERROR!!! No. %d in reading file *%s*\n\n", fresult, name);
 800106c:	4b27      	ldr	r3, [pc, #156]	; (800110c <Read_File+0x188>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	492b      	ldr	r1, [pc, #172]	; (8001124 <Read_File+0x1a0>)
 8001076:	6978      	ldr	r0, [r7, #20]
 8001078:	f00d f8d0 	bl	800e21c <siprintf>
		  	Send_Uart(buffer);
 800107c:	6a38      	ldr	r0, [r7, #32]
 800107e:	f7ff fe85 	bl	8000d8c <Send_Uart>
		  	free(buf);
 8001082:	6978      	ldr	r0, [r7, #20]
 8001084:	f00c fff6 	bl	800e074 <free>
 8001088:	e038      	b.n	80010fc <Read_File+0x178>
		}

		else
		{

			Send_Uart(buffer);
 800108a:	6a38      	ldr	r0, [r7, #32]
 800108c:	f7ff fe7e 	bl	8000d8c <Send_Uart>
			free(buffer);
 8001090:	6a38      	ldr	r0, [r7, #32]
 8001092:	f00c ffef 	bl	800e074 <free>
			data[0]= *buffer;
 8001096:	6a3b      	ldr	r3, [r7, #32]
 8001098:	781a      	ldrb	r2, [r3, #0]
 800109a:	4b23      	ldr	r3, [pc, #140]	; (8001128 <Read_File+0x1a4>)
 800109c:	701a      	strb	r2, [r3, #0]
			/* Close file */
			fresult = f_close(&USBHFile);
 800109e:	481d      	ldr	r0, [pc, #116]	; (8001114 <Read_File+0x190>)
 80010a0:	f00c f8d4 	bl	800d24c <f_close>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b18      	ldr	r3, [pc, #96]	; (800110c <Read_File+0x188>)
 80010aa:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK)
 80010ac:	4b17      	ldr	r3, [pc, #92]	; (800110c <Read_File+0x188>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d013      	beq.n	80010dc <Read_File+0x158>
			{
				char *buf = malloc(100*sizeof(char));
 80010b4:	2064      	movs	r0, #100	; 0x64
 80010b6:	f00c ffd5 	bl	800e064 <malloc>
 80010ba:	4603      	mov	r3, r0
 80010bc:	61bb      	str	r3, [r7, #24]
				sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 80010be:	4b13      	ldr	r3, [pc, #76]	; (800110c <Read_File+0x188>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4919      	ldr	r1, [pc, #100]	; (800112c <Read_File+0x1a8>)
 80010c8:	69b8      	ldr	r0, [r7, #24]
 80010ca:	f00d f8a7 	bl	800e21c <siprintf>
				Send_Uart(buf);
 80010ce:	69b8      	ldr	r0, [r7, #24]
 80010d0:	f7ff fe5c 	bl	8000d8c <Send_Uart>
				free(buf);
 80010d4:	69b8      	ldr	r0, [r7, #24]
 80010d6:	f00c ffcd 	bl	800e074 <free>
 80010da:	e00f      	b.n	80010fc <Read_File+0x178>
			}
			else
			{
				char *buf = malloc(100*sizeof(char));
 80010dc:	2064      	movs	r0, #100	; 0x64
 80010de:	f00c ffc1 	bl	800e064 <malloc>
 80010e2:	4603      	mov	r3, r0
 80010e4:	61fb      	str	r3, [r7, #28]
				sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	4911      	ldr	r1, [pc, #68]	; (8001130 <Read_File+0x1ac>)
 80010ea:	69f8      	ldr	r0, [r7, #28]
 80010ec:	f00d f896 	bl	800e21c <siprintf>
				Send_Uart(buf);
 80010f0:	69f8      	ldr	r0, [r7, #28]
 80010f2:	f7ff fe4b 	bl	8000d8c <Send_Uart>
				free(buf);
 80010f6:	69f8      	ldr	r0, [r7, #28]
 80010f8:	f00c ffbc 	bl	800e074 <free>
			}
		}
	    return fresult;
 80010fc:	4b03      	ldr	r3, [pc, #12]	; (800110c <Read_File+0x188>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
	}
}
 8001100:	4618      	mov	r0, r3
 8001102:	372c      	adds	r7, #44	; 0x2c
 8001104:	46bd      	mov	sp, r7
 8001106:	bd90      	pop	{r4, r7, pc}
 8001108:	20000578 	.word	0x20000578
 800110c:	20000574 	.word	0x20000574
 8001110:	0800eaac 	.word	0x0800eaac
 8001114:	20000738 	.word	0x20000738
 8001118:	0800e9bc 	.word	0x0800e9bc
 800111c:	0800ead0 	.word	0x0800ead0
 8001120:	20000564 	.word	0x20000564
 8001124:	0800eb00 	.word	0x0800eb00
 8001128:	200006c8 	.word	0x200006c8
 800112c:	0800eb28 	.word	0x0800eb28
 8001130:	0800eb50 	.word	0x0800eb50

08001134 <Check_USB_Details>:
    }
    return fresult;
}

void Check_USB_Details (void)
{
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 800113a:	4a30      	ldr	r2, [pc, #192]	; (80011fc <Check_USB_Details+0xc8>)
 800113c:	4930      	ldr	r1, [pc, #192]	; (8001200 <Check_USB_Details+0xcc>)
 800113e:	4831      	ldr	r0, [pc, #196]	; (8001204 <Check_USB_Details+0xd0>)
 8001140:	f00c f9f2 	bl	800d528 <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 8001144:	4b2d      	ldr	r3, [pc, #180]	; (80011fc <Check_USB_Details+0xc8>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	6a1b      	ldr	r3, [r3, #32]
 800114a:	3b02      	subs	r3, #2
 800114c:	4a2b      	ldr	r2, [pc, #172]	; (80011fc <Check_USB_Details+0xc8>)
 800114e:	6812      	ldr	r2, [r2, #0]
 8001150:	8952      	ldrh	r2, [r2, #10]
 8001152:	fb02 f303 	mul.w	r3, r2, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff f9ec 	bl	8000534 <__aeabi_ui2d>
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	4b29      	ldr	r3, [pc, #164]	; (8001208 <Check_USB_Details+0xd4>)
 8001162:	f7ff fa61 	bl	8000628 <__aeabi_dmul>
 8001166:	4603      	mov	r3, r0
 8001168:	460c      	mov	r4, r1
 800116a:	4618      	mov	r0, r3
 800116c:	4621      	mov	r1, r4
 800116e:	f7ff fc6d 	bl	8000a4c <__aeabi_d2uiz>
 8001172:	4602      	mov	r2, r0
 8001174:	4b25      	ldr	r3, [pc, #148]	; (800120c <Check_USB_Details+0xd8>)
 8001176:	601a      	str	r2, [r3, #0]
    char *buf = malloc(30*sizeof(char));
 8001178:	201e      	movs	r0, #30
 800117a:	f00c ff73 	bl	800e064 <malloc>
 800117e:	4603      	mov	r3, r0
 8001180:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB  Total Size: \t%lu\n",total);
 8001182:	4b22      	ldr	r3, [pc, #136]	; (800120c <Check_USB_Details+0xd8>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	4921      	ldr	r1, [pc, #132]	; (8001210 <Check_USB_Details+0xdc>)
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f00d f846 	bl	800e21c <siprintf>
    Send_Uart(buf);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff fdfb 	bl	8000d8c <Send_Uart>
    free(buf);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f00c ff6c 	bl	800e074 <free>
    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 800119c:	4b17      	ldr	r3, [pc, #92]	; (80011fc <Check_USB_Details+0xc8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	895b      	ldrh	r3, [r3, #10]
 80011a2:	461a      	mov	r2, r3
 80011a4:	4b16      	ldr	r3, [pc, #88]	; (8001200 <Check_USB_Details+0xcc>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	fb03 f302 	mul.w	r3, r3, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f9c1 	bl	8000534 <__aeabi_ui2d>
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <Check_USB_Details+0xd4>)
 80011b8:	f7ff fa36 	bl	8000628 <__aeabi_dmul>
 80011bc:	4603      	mov	r3, r0
 80011be:	460c      	mov	r4, r1
 80011c0:	4618      	mov	r0, r3
 80011c2:	4621      	mov	r1, r4
 80011c4:	f7ff fc42 	bl	8000a4c <__aeabi_d2uiz>
 80011c8:	4602      	mov	r2, r0
 80011ca:	4b12      	ldr	r3, [pc, #72]	; (8001214 <Check_USB_Details+0xe0>)
 80011cc:	601a      	str	r2, [r3, #0]
    buf = malloc(30*sizeof(char));
 80011ce:	201e      	movs	r0, #30
 80011d0:	f00c ff48 	bl	800e064 <malloc>
 80011d4:	4603      	mov	r3, r0
 80011d6:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB Free Space: \t%lu\n",free_space);
 80011d8:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <Check_USB_Details+0xe0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	490e      	ldr	r1, [pc, #56]	; (8001218 <Check_USB_Details+0xe4>)
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f00d f81b 	bl	800e21c <siprintf>
    Send_Uart(buf);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff fdd0 	bl	8000d8c <Send_Uart>
    free(buf);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f00c ff41 	bl	800e074 <free>
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd90      	pop	{r4, r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000568 	.word	0x20000568
 8001200:	20000560 	.word	0x20000560
 8001204:	0800ed44 	.word	0x0800ed44
 8001208:	3fe00000 	.word	0x3fe00000
 800120c:	20000698 	.word	0x20000698
 8001210:	0800ed48 	.word	0x0800ed48
 8001214:	2000056c 	.word	0x2000056c
 8001218:	0800ed60 	.word	0x0800ed60

0800121c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001222:	f000 fc81 	bl	8001b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001226:	f000 fa25 	bl	8001674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800122a:	f000 fab5 	bl	8001798 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 800122e:	f00c fba5 	bl	800d97c <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8001232:	f000 fa87 	bl	8001744 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8001236:	f004 fd1d 	bl	8005c74 <MX_FATFS_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800123a:	f00c fbc5 	bl	800d9c8 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    data_binary = data[0];
 800123e:	4b91      	ldr	r3, [pc, #580]	; (8001484 <main+0x268>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	461a      	mov	r2, r3
 8001244:	4b90      	ldr	r3, [pc, #576]	; (8001488 <main+0x26c>)
 8001246:	601a      	str	r2, [r3, #0]
    a = data_binary/128;
 8001248:	4b8f      	ldr	r3, [pc, #572]	; (8001488 <main+0x26c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	da00      	bge.n	8001252 <main+0x36>
 8001250:	337f      	adds	r3, #127	; 0x7f
 8001252:	11db      	asrs	r3, r3, #7
 8001254:	461a      	mov	r2, r3
 8001256:	4b8d      	ldr	r3, [pc, #564]	; (800148c <main+0x270>)
 8001258:	601a      	str	r2, [r3, #0]
    Output_binary(a);
 800125a:	4b8c      	ldr	r3, [pc, #560]	; (800148c <main+0x270>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f000 fb1e 	bl	80018a0 <Output_binary>
    input = HAL_GPIO_ReadPin(GPIOE, input_Pin);
 8001264:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001268:	4889      	ldr	r0, [pc, #548]	; (8001490 <main+0x274>)
 800126a:	f000 ff85 	bl	8002178 <HAL_GPIO_ReadPin>
 800126e:	4603      	mov	r3, r0
 8001270:	461a      	mov	r2, r3
 8001272:	4b88      	ldr	r3, [pc, #544]	; (8001494 <main+0x278>)
 8001274:	601a      	str	r2, [r3, #0]

    a1 = input*128;
 8001276:	4b87      	ldr	r3, [pc, #540]	; (8001494 <main+0x278>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	01db      	lsls	r3, r3, #7
 800127c:	4a86      	ldr	r2, [pc, #536]	; (8001498 <main+0x27c>)
 800127e:	6013      	str	r3, [r2, #0]
    for(int i = 0 ; i < 5000 ; i++){
 8001280:	2300      	movs	r3, #0
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
 8001284:	e002      	b.n	800128c <main+0x70>
 8001286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001288:	3301      	adds	r3, #1
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
 800128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001292:	4293      	cmp	r3, r2
 8001294:	ddf7      	ble.n	8001286 <main+0x6a>

    	}
    b = (data_binary-(a*128))/64 ;
 8001296:	4b7c      	ldr	r3, [pc, #496]	; (8001488 <main+0x26c>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	4b7c      	ldr	r3, [pc, #496]	; (800148c <main+0x270>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	01db      	lsls	r3, r3, #7
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	da00      	bge.n	80012a8 <main+0x8c>
 80012a6:	333f      	adds	r3, #63	; 0x3f
 80012a8:	119b      	asrs	r3, r3, #6
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b7b      	ldr	r3, [pc, #492]	; (800149c <main+0x280>)
 80012ae:	601a      	str	r2, [r3, #0]
    Output_binary(b);
 80012b0:	4b7a      	ldr	r3, [pc, #488]	; (800149c <main+0x280>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 faf3 	bl	80018a0 <Output_binary>
    input = HAL_GPIO_ReadPin(GPIOE, input_Pin);
 80012ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012be:	4874      	ldr	r0, [pc, #464]	; (8001490 <main+0x274>)
 80012c0:	f000 ff5a 	bl	8002178 <HAL_GPIO_ReadPin>
 80012c4:	4603      	mov	r3, r0
 80012c6:	461a      	mov	r2, r3
 80012c8:	4b72      	ldr	r3, [pc, #456]	; (8001494 <main+0x278>)
 80012ca:	601a      	str	r2, [r3, #0]
    b1 = input*64;
 80012cc:	4b71      	ldr	r3, [pc, #452]	; (8001494 <main+0x278>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	019b      	lsls	r3, r3, #6
 80012d2:	4a73      	ldr	r2, [pc, #460]	; (80014a0 <main+0x284>)
 80012d4:	6013      	str	r3, [r2, #0]
    for(int i = 0 ; i < 5000 ; i++){
 80012d6:	2300      	movs	r3, #0
 80012d8:	623b      	str	r3, [r7, #32]
 80012da:	e002      	b.n	80012e2 <main+0xc6>
 80012dc:	6a3b      	ldr	r3, [r7, #32]
 80012de:	3301      	adds	r3, #1
 80012e0:	623b      	str	r3, [r7, #32]
 80012e2:	6a3b      	ldr	r3, [r7, #32]
 80012e4:	f241 3287 	movw	r2, #4999	; 0x1387
 80012e8:	4293      	cmp	r3, r2
 80012ea:	ddf7      	ble.n	80012dc <main+0xc0>

    	}
    c = (data_binary-(a*128)-(b*64))/32;
 80012ec:	4b66      	ldr	r3, [pc, #408]	; (8001488 <main+0x26c>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b66      	ldr	r3, [pc, #408]	; (800148c <main+0x270>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	01db      	lsls	r3, r3, #7
 80012f6:	1ad2      	subs	r2, r2, r3
 80012f8:	4b68      	ldr	r3, [pc, #416]	; (800149c <main+0x280>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	019b      	lsls	r3, r3, #6
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b00      	cmp	r3, #0
 8001302:	da00      	bge.n	8001306 <main+0xea>
 8001304:	331f      	adds	r3, #31
 8001306:	115b      	asrs	r3, r3, #5
 8001308:	461a      	mov	r2, r3
 800130a:	4b66      	ldr	r3, [pc, #408]	; (80014a4 <main+0x288>)
 800130c:	601a      	str	r2, [r3, #0]
    Output_binary(c);
 800130e:	4b65      	ldr	r3, [pc, #404]	; (80014a4 <main+0x288>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f000 fac4 	bl	80018a0 <Output_binary>
    input = HAL_GPIO_ReadPin(GPIOE, input_Pin);
 8001318:	f44f 7100 	mov.w	r1, #512	; 0x200
 800131c:	485c      	ldr	r0, [pc, #368]	; (8001490 <main+0x274>)
 800131e:	f000 ff2b 	bl	8002178 <HAL_GPIO_ReadPin>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
 8001326:	4b5b      	ldr	r3, [pc, #364]	; (8001494 <main+0x278>)
 8001328:	601a      	str	r2, [r3, #0]
    c1 = input*32;
 800132a:	4b5a      	ldr	r3, [pc, #360]	; (8001494 <main+0x278>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	015b      	lsls	r3, r3, #5
 8001330:	4a5d      	ldr	r2, [pc, #372]	; (80014a8 <main+0x28c>)
 8001332:	6013      	str	r3, [r2, #0]
    for(int i = 0 ; i < 5000 ; i++){
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
 8001338:	e002      	b.n	8001340 <main+0x124>
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3301      	adds	r3, #1
 800133e:	61fb      	str	r3, [r7, #28]
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f241 3287 	movw	r2, #4999	; 0x1387
 8001346:	4293      	cmp	r3, r2
 8001348:	ddf7      	ble.n	800133a <main+0x11e>

    	}
    d = (data_binary-(a*128)-(b*64)-(c*32))/16;
 800134a:	4b4f      	ldr	r3, [pc, #316]	; (8001488 <main+0x26c>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4b4f      	ldr	r3, [pc, #316]	; (800148c <main+0x270>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	01db      	lsls	r3, r3, #7
 8001354:	1ad2      	subs	r2, r2, r3
 8001356:	4b51      	ldr	r3, [pc, #324]	; (800149c <main+0x280>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	019b      	lsls	r3, r3, #6
 800135c:	1ad2      	subs	r2, r2, r3
 800135e:	4b51      	ldr	r3, [pc, #324]	; (80014a4 <main+0x288>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	015b      	lsls	r3, r3, #5
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	da00      	bge.n	800136c <main+0x150>
 800136a:	330f      	adds	r3, #15
 800136c:	111b      	asrs	r3, r3, #4
 800136e:	461a      	mov	r2, r3
 8001370:	4b4e      	ldr	r3, [pc, #312]	; (80014ac <main+0x290>)
 8001372:	601a      	str	r2, [r3, #0]
    Output_binary(d);
 8001374:	4b4d      	ldr	r3, [pc, #308]	; (80014ac <main+0x290>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f000 fa91 	bl	80018a0 <Output_binary>
    input = HAL_GPIO_ReadPin(GPIOE, input_Pin);
 800137e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001382:	4843      	ldr	r0, [pc, #268]	; (8001490 <main+0x274>)
 8001384:	f000 fef8 	bl	8002178 <HAL_GPIO_ReadPin>
 8001388:	4603      	mov	r3, r0
 800138a:	461a      	mov	r2, r3
 800138c:	4b41      	ldr	r3, [pc, #260]	; (8001494 <main+0x278>)
 800138e:	601a      	str	r2, [r3, #0]
    d1 = input*16;
 8001390:	4b40      	ldr	r3, [pc, #256]	; (8001494 <main+0x278>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	4a46      	ldr	r2, [pc, #280]	; (80014b0 <main+0x294>)
 8001398:	6013      	str	r3, [r2, #0]
    for(int i = 0 ; i < 5000 ; i++){
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
 800139e:	e002      	b.n	80013a6 <main+0x18a>
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	3301      	adds	r3, #1
 80013a4:	61bb      	str	r3, [r7, #24]
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	f241 3287 	movw	r2, #4999	; 0x1387
 80013ac:	4293      	cmp	r3, r2
 80013ae:	ddf7      	ble.n	80013a0 <main+0x184>

    	}
    e = (data_binary-(a*128)-(b*64)-(c*32)-(d*16))/8;
 80013b0:	4b35      	ldr	r3, [pc, #212]	; (8001488 <main+0x26c>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b35      	ldr	r3, [pc, #212]	; (800148c <main+0x270>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	01db      	lsls	r3, r3, #7
 80013ba:	1ad2      	subs	r2, r2, r3
 80013bc:	4b37      	ldr	r3, [pc, #220]	; (800149c <main+0x280>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	019b      	lsls	r3, r3, #6
 80013c2:	1ad2      	subs	r2, r2, r3
 80013c4:	4b37      	ldr	r3, [pc, #220]	; (80014a4 <main+0x288>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	015b      	lsls	r3, r3, #5
 80013ca:	1ad2      	subs	r2, r2, r3
 80013cc:	4b37      	ldr	r3, [pc, #220]	; (80014ac <main+0x290>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	011b      	lsls	r3, r3, #4
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	da00      	bge.n	80013da <main+0x1be>
 80013d8:	3307      	adds	r3, #7
 80013da:	10db      	asrs	r3, r3, #3
 80013dc:	461a      	mov	r2, r3
 80013de:	4b35      	ldr	r3, [pc, #212]	; (80014b4 <main+0x298>)
 80013e0:	601a      	str	r2, [r3, #0]
    Output_binary(e);
 80013e2:	4b34      	ldr	r3, [pc, #208]	; (80014b4 <main+0x298>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 fa5a 	bl	80018a0 <Output_binary>
    input = HAL_GPIO_ReadPin(GPIOE, input_Pin);
 80013ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013f0:	4827      	ldr	r0, [pc, #156]	; (8001490 <main+0x274>)
 80013f2:	f000 fec1 	bl	8002178 <HAL_GPIO_ReadPin>
 80013f6:	4603      	mov	r3, r0
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b26      	ldr	r3, [pc, #152]	; (8001494 <main+0x278>)
 80013fc:	601a      	str	r2, [r3, #0]
    e1 = input*8;
 80013fe:	4b25      	ldr	r3, [pc, #148]	; (8001494 <main+0x278>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	4a2c      	ldr	r2, [pc, #176]	; (80014b8 <main+0x29c>)
 8001406:	6013      	str	r3, [r2, #0]
    for(int i = 0 ; i < 5000 ; i++){
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	e002      	b.n	8001414 <main+0x1f8>
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	3301      	adds	r3, #1
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	f241 3287 	movw	r2, #4999	; 0x1387
 800141a:	4293      	cmp	r3, r2
 800141c:	ddf7      	ble.n	800140e <main+0x1f2>

    	}
    f = (data_binary-(a*128)-(b*64)-(c*32)-(d*16)-(e*8))/4;
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <main+0x26c>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4b1a      	ldr	r3, [pc, #104]	; (800148c <main+0x270>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	01db      	lsls	r3, r3, #7
 8001428:	1ad2      	subs	r2, r2, r3
 800142a:	4b1c      	ldr	r3, [pc, #112]	; (800149c <main+0x280>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	019b      	lsls	r3, r3, #6
 8001430:	1ad2      	subs	r2, r2, r3
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <main+0x288>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	015b      	lsls	r3, r3, #5
 8001438:	1ad2      	subs	r2, r2, r3
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <main+0x290>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	011b      	lsls	r3, r3, #4
 8001440:	1ad2      	subs	r2, r2, r3
 8001442:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <main+0x298>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	da00      	bge.n	8001450 <main+0x234>
 800144e:	3303      	adds	r3, #3
 8001450:	109b      	asrs	r3, r3, #2
 8001452:	461a      	mov	r2, r3
 8001454:	4b19      	ldr	r3, [pc, #100]	; (80014bc <main+0x2a0>)
 8001456:	601a      	str	r2, [r3, #0]
    Output_binary(f);
 8001458:	4b18      	ldr	r3, [pc, #96]	; (80014bc <main+0x2a0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f000 fa1f 	bl	80018a0 <Output_binary>
    input = HAL_GPIO_ReadPin(GPIOE, input_Pin);
 8001462:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001466:	480a      	ldr	r0, [pc, #40]	; (8001490 <main+0x274>)
 8001468:	f000 fe86 	bl	8002178 <HAL_GPIO_ReadPin>
 800146c:	4603      	mov	r3, r0
 800146e:	461a      	mov	r2, r3
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <main+0x278>)
 8001472:	601a      	str	r2, [r3, #0]
    f1 = input*4;
 8001474:	4b07      	ldr	r3, [pc, #28]	; (8001494 <main+0x278>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4a11      	ldr	r2, [pc, #68]	; (80014c0 <main+0x2a4>)
 800147c:	6013      	str	r3, [r2, #0]
    for(int i = 0 ; i < 5000 ; i++){
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	e022      	b.n	80014ca <main+0x2ae>
 8001484:	200006c8 	.word	0x200006c8
 8001488:	200000ac 	.word	0x200000ac
 800148c:	2000071c 	.word	0x2000071c
 8001490:	40021000 	.word	0x40021000
 8001494:	200006b8 	.word	0x200006b8
 8001498:	200006bc 	.word	0x200006bc
 800149c:	2000069c 	.word	0x2000069c
 80014a0:	200006b4 	.word	0x200006b4
 80014a4:	200006c4 	.word	0x200006c4
 80014a8:	200006c0 	.word	0x200006c0
 80014ac:	200006cc 	.word	0x200006cc
 80014b0:	200006ac 	.word	0x200006ac
 80014b4:	20000720 	.word	0x20000720
 80014b8:	20000724 	.word	0x20000724
 80014bc:	200006a0 	.word	0x200006a0
 80014c0:	200006d4 	.word	0x200006d4
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	3301      	adds	r3, #1
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	f241 3287 	movw	r2, #4999	; 0x1387
 80014d0:	4293      	cmp	r3, r2
 80014d2:	ddf7      	ble.n	80014c4 <main+0x2a8>

    	}
    g = (data_binary-(a*128)-(b*64)-(c*32)-(d*16)-(e*8)-(f*4))/2;
 80014d4:	4b52      	ldr	r3, [pc, #328]	; (8001620 <main+0x404>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b52      	ldr	r3, [pc, #328]	; (8001624 <main+0x408>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	01db      	lsls	r3, r3, #7
 80014de:	1ad2      	subs	r2, r2, r3
 80014e0:	4b51      	ldr	r3, [pc, #324]	; (8001628 <main+0x40c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	019b      	lsls	r3, r3, #6
 80014e6:	1ad2      	subs	r2, r2, r3
 80014e8:	4b50      	ldr	r3, [pc, #320]	; (800162c <main+0x410>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	015b      	lsls	r3, r3, #5
 80014ee:	1ad2      	subs	r2, r2, r3
 80014f0:	4b4f      	ldr	r3, [pc, #316]	; (8001630 <main+0x414>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	011b      	lsls	r3, r3, #4
 80014f6:	1ad2      	subs	r2, r2, r3
 80014f8:	4b4e      	ldr	r3, [pc, #312]	; (8001634 <main+0x418>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	1ad2      	subs	r2, r2, r3
 8001500:	4b4d      	ldr	r3, [pc, #308]	; (8001638 <main+0x41c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	0fda      	lsrs	r2, r3, #31
 800150a:	4413      	add	r3, r2
 800150c:	105b      	asrs	r3, r3, #1
 800150e:	461a      	mov	r2, r3
 8001510:	4b4a      	ldr	r3, [pc, #296]	; (800163c <main+0x420>)
 8001512:	601a      	str	r2, [r3, #0]
    Output_binary(g);
 8001514:	4b49      	ldr	r3, [pc, #292]	; (800163c <main+0x420>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f000 f9c1 	bl	80018a0 <Output_binary>
    input = HAL_GPIO_ReadPin(GPIOE, input_Pin);
 800151e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001522:	4847      	ldr	r0, [pc, #284]	; (8001640 <main+0x424>)
 8001524:	f000 fe28 	bl	8002178 <HAL_GPIO_ReadPin>
 8001528:	4603      	mov	r3, r0
 800152a:	461a      	mov	r2, r3
 800152c:	4b45      	ldr	r3, [pc, #276]	; (8001644 <main+0x428>)
 800152e:	601a      	str	r2, [r3, #0]
    g1 = input*2;
 8001530:	4b44      	ldr	r3, [pc, #272]	; (8001644 <main+0x428>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4a44      	ldr	r2, [pc, #272]	; (8001648 <main+0x42c>)
 8001538:	6013      	str	r3, [r2, #0]
    for(int i = 0 ; i < 5000 ; i++){
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	e002      	b.n	8001546 <main+0x32a>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	3301      	adds	r3, #1
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f241 3287 	movw	r2, #4999	; 0x1387
 800154c:	4293      	cmp	r3, r2
 800154e:	ddf7      	ble.n	8001540 <main+0x324>

    	}
    h = data_binary-(a*128)-(b*64)-(c*32)-(d*16)-(e*8)-(f*4)-(g*2);
 8001550:	4b33      	ldr	r3, [pc, #204]	; (8001620 <main+0x404>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b33      	ldr	r3, [pc, #204]	; (8001624 <main+0x408>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	01db      	lsls	r3, r3, #7
 800155a:	1ad2      	subs	r2, r2, r3
 800155c:	4b32      	ldr	r3, [pc, #200]	; (8001628 <main+0x40c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	019b      	lsls	r3, r3, #6
 8001562:	1ad2      	subs	r2, r2, r3
 8001564:	4b31      	ldr	r3, [pc, #196]	; (800162c <main+0x410>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	015b      	lsls	r3, r3, #5
 800156a:	1ad2      	subs	r2, r2, r3
 800156c:	4b30      	ldr	r3, [pc, #192]	; (8001630 <main+0x414>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	011b      	lsls	r3, r3, #4
 8001572:	1ad2      	subs	r2, r2, r3
 8001574:	4b2f      	ldr	r3, [pc, #188]	; (8001634 <main+0x418>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	1ad2      	subs	r2, r2, r3
 800157c:	4b2e      	ldr	r3, [pc, #184]	; (8001638 <main+0x41c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	1ad2      	subs	r2, r2, r3
 8001584:	4b2d      	ldr	r3, [pc, #180]	; (800163c <main+0x420>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	4a2f      	ldr	r2, [pc, #188]	; (800164c <main+0x430>)
 800158e:	6013      	str	r3, [r2, #0]
    Output_binary(h);
 8001590:	4b2e      	ldr	r3, [pc, #184]	; (800164c <main+0x430>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f000 f983 	bl	80018a0 <Output_binary>
    input = HAL_GPIO_ReadPin(GPIOE, input_Pin);
 800159a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800159e:	4828      	ldr	r0, [pc, #160]	; (8001640 <main+0x424>)
 80015a0:	f000 fdea 	bl	8002178 <HAL_GPIO_ReadPin>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b26      	ldr	r3, [pc, #152]	; (8001644 <main+0x428>)
 80015aa:	601a      	str	r2, [r3, #0]
    h1 = input;
 80015ac:	4b25      	ldr	r3, [pc, #148]	; (8001644 <main+0x428>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a27      	ldr	r2, [pc, #156]	; (8001650 <main+0x434>)
 80015b2:	6013      	str	r3, [r2, #0]
    for(int i = 0 ; i < 5000 ; i++){
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	e002      	b.n	80015c0 <main+0x3a4>
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	3301      	adds	r3, #1
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	f241 3287 	movw	r2, #4999	; 0x1387
 80015c6:	4293      	cmp	r3, r2
 80015c8:	ddf7      	ble.n	80015ba <main+0x39e>

    	}
    data_binary_input = a1+b1+c1+d1+e1+f1+g1+h1;
 80015ca:	4b22      	ldr	r3, [pc, #136]	; (8001654 <main+0x438>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4b22      	ldr	r3, [pc, #136]	; (8001658 <main+0x43c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	441a      	add	r2, r3
 80015d4:	4b21      	ldr	r3, [pc, #132]	; (800165c <main+0x440>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	441a      	add	r2, r3
 80015da:	4b21      	ldr	r3, [pc, #132]	; (8001660 <main+0x444>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	441a      	add	r2, r3
 80015e0:	4b20      	ldr	r3, [pc, #128]	; (8001664 <main+0x448>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	441a      	add	r2, r3
 80015e6:	4b20      	ldr	r3, [pc, #128]	; (8001668 <main+0x44c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	441a      	add	r2, r3
 80015ec:	4b16      	ldr	r3, [pc, #88]	; (8001648 <main+0x42c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	441a      	add	r2, r3
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <main+0x434>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4413      	add	r3, r2
 80015f8:	4a1c      	ldr	r2, [pc, #112]	; (800166c <main+0x450>)
 80015fa:	6013      	str	r3, [r2, #0]
    data_input[0] = data_binary_input;
 80015fc:	4b1b      	ldr	r3, [pc, #108]	; (800166c <main+0x450>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <main+0x454>)
 8001604:	701a      	strb	r2, [r3, #0]
    for(int i = 0 ; i < 5000 ; i++){
 8001606:	2300      	movs	r3, #0
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	e002      	b.n	8001612 <main+0x3f6>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3301      	adds	r3, #1
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f241 3287 	movw	r2, #4999	; 0x1387
 8001618:	4293      	cmp	r3, r2
 800161a:	ddf7      	ble.n	800160c <main+0x3f0>
    MX_USB_HOST_Process();
 800161c:	e60d      	b.n	800123a <main+0x1e>
 800161e:	bf00      	nop
 8001620:	200000ac 	.word	0x200000ac
 8001624:	2000071c 	.word	0x2000071c
 8001628:	2000069c 	.word	0x2000069c
 800162c:	200006c4 	.word	0x200006c4
 8001630:	200006cc 	.word	0x200006cc
 8001634:	20000720 	.word	0x20000720
 8001638:	200006a0 	.word	0x200006a0
 800163c:	200006b0 	.word	0x200006b0
 8001640:	40021000 	.word	0x40021000
 8001644:	200006b8 	.word	0x200006b8
 8001648:	200006a8 	.word	0x200006a8
 800164c:	200006d0 	.word	0x200006d0
 8001650:	200006a4 	.word	0x200006a4
 8001654:	200006bc 	.word	0x200006bc
 8001658:	200006b4 	.word	0x200006b4
 800165c:	200006c0 	.word	0x200006c0
 8001660:	200006ac 	.word	0x200006ac
 8001664:	20000724 	.word	0x20000724
 8001668:	200006d4 	.word	0x200006d4
 800166c:	200000b0 	.word	0x200000b0
 8001670:	20000718 	.word	0x20000718

08001674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b094      	sub	sp, #80	; 0x50
 8001678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167a:	f107 0320 	add.w	r3, r7, #32
 800167e:	2230      	movs	r2, #48	; 0x30
 8001680:	2100      	movs	r1, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f00c fd09 	bl	800e09a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001688:	f107 030c 	add.w	r3, r7, #12
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001698:	2300      	movs	r3, #0
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	4b27      	ldr	r3, [pc, #156]	; (800173c <SystemClock_Config+0xc8>)
 800169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a0:	4a26      	ldr	r2, [pc, #152]	; (800173c <SystemClock_Config+0xc8>)
 80016a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a6:	6413      	str	r3, [r2, #64]	; 0x40
 80016a8:	4b24      	ldr	r3, [pc, #144]	; (800173c <SystemClock_Config+0xc8>)
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016b4:	2300      	movs	r3, #0
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	4b21      	ldr	r3, [pc, #132]	; (8001740 <SystemClock_Config+0xcc>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a20      	ldr	r2, [pc, #128]	; (8001740 <SystemClock_Config+0xcc>)
 80016be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <SystemClock_Config+0xcc>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016d0:	2301      	movs	r3, #1
 80016d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016da:	2302      	movs	r3, #2
 80016dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016e4:	2304      	movs	r3, #4
 80016e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80016e8:	23c0      	movs	r3, #192	; 0xc0
 80016ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80016ec:	2304      	movs	r3, #4
 80016ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80016f0:	2308      	movs	r3, #8
 80016f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f4:	f107 0320 	add.w	r3, r7, #32
 80016f8:	4618      	mov	r0, r3
 80016fa:	f002 fa5f 	bl	8003bbc <HAL_RCC_OscConfig>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001704:	f000 f8f4 	bl	80018f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001708:	230f      	movs	r3, #15
 800170a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800170c:	2302      	movs	r3, #2
 800170e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001714:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001718:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800171e:	f107 030c 	add.w	r3, r7, #12
 8001722:	2103      	movs	r1, #3
 8001724:	4618      	mov	r0, r3
 8001726:	f002 fcb9 	bl	800409c <HAL_RCC_ClockConfig>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001730:	f000 f8de 	bl	80018f0 <Error_Handler>
  }
}
 8001734:	bf00      	nop
 8001736:	3750      	adds	r7, #80	; 0x50
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40023800 	.word	0x40023800
 8001740:	40007000 	.word	0x40007000

08001744 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <MX_USART2_UART_Init+0x4c>)
 800174a:	4a12      	ldr	r2, [pc, #72]	; (8001794 <MX_USART2_UART_Init+0x50>)
 800174c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <MX_USART2_UART_Init+0x4c>)
 8001750:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001754:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001756:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <MX_USART2_UART_Init+0x4c>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <MX_USART2_UART_Init+0x4c>)
 800175e:	2200      	movs	r2, #0
 8001760:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <MX_USART2_UART_Init+0x4c>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <MX_USART2_UART_Init+0x4c>)
 800176a:	220c      	movs	r2, #12
 800176c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <MX_USART2_UART_Init+0x4c>)
 8001770:	2200      	movs	r2, #0
 8001772:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <MX_USART2_UART_Init+0x4c>)
 8001776:	2200      	movs	r2, #0
 8001778:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800177a:	4805      	ldr	r0, [pc, #20]	; (8001790 <MX_USART2_UART_Init+0x4c>)
 800177c:	f002 fe80 	bl	8004480 <HAL_UART_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001786:	f000 f8b3 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200006d8 	.word	0x200006d8
 8001794:	40004400 	.word	0x40004400

08001798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	; 0x28
 800179c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179e:	f107 0314 	add.w	r3, r7, #20
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
 80017ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	4b37      	ldr	r3, [pc, #220]	; (8001890 <MX_GPIO_Init+0xf8>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a36      	ldr	r2, [pc, #216]	; (8001890 <MX_GPIO_Init+0xf8>)
 80017b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b34      	ldr	r3, [pc, #208]	; (8001890 <MX_GPIO_Init+0xf8>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	4b30      	ldr	r3, [pc, #192]	; (8001890 <MX_GPIO_Init+0xf8>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a2f      	ldr	r2, [pc, #188]	; (8001890 <MX_GPIO_Init+0xf8>)
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b2d      	ldr	r3, [pc, #180]	; (8001890 <MX_GPIO_Init+0xf8>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	4b29      	ldr	r3, [pc, #164]	; (8001890 <MX_GPIO_Init+0xf8>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a28      	ldr	r2, [pc, #160]	; (8001890 <MX_GPIO_Init+0xf8>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b26      	ldr	r3, [pc, #152]	; (8001890 <MX_GPIO_Init+0xf8>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	4b22      	ldr	r3, [pc, #136]	; (8001890 <MX_GPIO_Init+0xf8>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a21      	ldr	r2, [pc, #132]	; (8001890 <MX_GPIO_Init+0xf8>)
 800180c:	f043 0310 	orr.w	r3, r3, #16
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b1f      	ldr	r3, [pc, #124]	; (8001890 <MX_GPIO_Init+0xf8>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0310 	and.w	r3, r3, #16
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800181e:	2200      	movs	r2, #0
 8001820:	2101      	movs	r1, #1
 8001822:	481c      	ldr	r0, [pc, #112]	; (8001894 <MX_GPIO_Init+0xfc>)
 8001824:	f000 fcc0 	bl	80021a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(output_GPIO_Port, output_Pin, GPIO_PIN_RESET);
 8001828:	2200      	movs	r2, #0
 800182a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800182e:	481a      	ldr	r0, [pc, #104]	; (8001898 <MX_GPIO_Init+0x100>)
 8001830:	f000 fcba 	bl	80021a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001834:	2301      	movs	r3, #1
 8001836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001838:	2301      	movs	r3, #1
 800183a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	2300      	movs	r3, #0
 8001842:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	4619      	mov	r1, r3
 800184a:	4812      	ldr	r0, [pc, #72]	; (8001894 <MX_GPIO_Init+0xfc>)
 800184c:	f000 fb12 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : input_Pin */
  GPIO_InitStruct.Pin = input_Pin;
 8001850:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001856:	2300      	movs	r3, #0
 8001858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(input_GPIO_Port, &GPIO_InitStruct);
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	4619      	mov	r1, r3
 8001864:	480d      	ldr	r0, [pc, #52]	; (800189c <MX_GPIO_Init+0x104>)
 8001866:	f000 fb05 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : output_Pin */
  GPIO_InitStruct.Pin = output_Pin;
 800186a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800186e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001870:	2301      	movs	r3, #1
 8001872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	2300      	movs	r3, #0
 800187a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(output_GPIO_Port, &GPIO_InitStruct);
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	4619      	mov	r1, r3
 8001882:	4805      	ldr	r0, [pc, #20]	; (8001898 <MX_GPIO_Init+0x100>)
 8001884:	f000 faf6 	bl	8001e74 <HAL_GPIO_Init>

}
 8001888:	bf00      	nop
 800188a:	3728      	adds	r7, #40	; 0x28
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40023800 	.word	0x40023800
 8001894:	40020800 	.word	0x40020800
 8001898:	40020000 	.word	0x40020000
 800189c:	40021000 	.word	0x40021000

080018a0 <Output_binary>:

/* USER CODE BEGIN 4 */

void Output_binary(int tmp)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	if(tmp==1){
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d106      	bne.n	80018bc <Output_binary+0x1c>
		HAL_GPIO_WritePin(GPIOA, output_Pin, GPIO_PIN_SET);
 80018ae:	2201      	movs	r2, #1
 80018b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018b4:	480d      	ldr	r0, [pc, #52]	; (80018ec <Output_binary+0x4c>)
 80018b6:	f000 fc77 	bl	80021a8 <HAL_GPIO_WritePin>
 80018ba:	e008      	b.n	80018ce <Output_binary+0x2e>

	}else if(tmp==0){
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d105      	bne.n	80018ce <Output_binary+0x2e>
		HAL_GPIO_WritePin(GPIOA, output_Pin, GPIO_PIN_RESET);
 80018c2:	2200      	movs	r2, #0
 80018c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c8:	4808      	ldr	r0, [pc, #32]	; (80018ec <Output_binary+0x4c>)
 80018ca:	f000 fc6d 	bl	80021a8 <HAL_GPIO_WritePin>

	}

	for(int i = 0 ; i < 5000 ; i++){
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	e002      	b.n	80018da <Output_binary+0x3a>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	3301      	adds	r3, #1
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f241 3287 	movw	r2, #4999	; 0x1387
 80018e0:	4293      	cmp	r3, r2
 80018e2:	ddf7      	ble.n	80018d4 <Output_binary+0x34>

	}

}
 80018e4:	bf00      	nop
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40020000 	.word	0x40020000

080018f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <HAL_MspInit+0x4c>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	4a0f      	ldr	r2, [pc, #60]	; (800194c <HAL_MspInit+0x4c>)
 8001910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001914:	6453      	str	r3, [r2, #68]	; 0x44
 8001916:	4b0d      	ldr	r3, [pc, #52]	; (800194c <HAL_MspInit+0x4c>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	603b      	str	r3, [r7, #0]
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <HAL_MspInit+0x4c>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	4a08      	ldr	r2, [pc, #32]	; (800194c <HAL_MspInit+0x4c>)
 800192c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001930:	6413      	str	r3, [r2, #64]	; 0x40
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_MspInit+0x4c>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800193e:	2007      	movs	r0, #7
 8001940:	f000 fa56 	bl	8001df0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40023800 	.word	0x40023800

08001950 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08a      	sub	sp, #40	; 0x28
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a19      	ldr	r2, [pc, #100]	; (80019d4 <HAL_UART_MspInit+0x84>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d12b      	bne.n	80019ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <HAL_UART_MspInit+0x88>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	4a17      	ldr	r2, [pc, #92]	; (80019d8 <HAL_UART_MspInit+0x88>)
 800197c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001980:	6413      	str	r3, [r2, #64]	; 0x40
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <HAL_UART_MspInit+0x88>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <HAL_UART_MspInit+0x88>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a10      	ldr	r2, [pc, #64]	; (80019d8 <HAL_UART_MspInit+0x88>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <HAL_UART_MspInit+0x88>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019aa:	230c      	movs	r3, #12
 80019ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b6:	2303      	movs	r3, #3
 80019b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019ba:	2307      	movs	r3, #7
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	4619      	mov	r1, r3
 80019c4:	4805      	ldr	r0, [pc, #20]	; (80019dc <HAL_UART_MspInit+0x8c>)
 80019c6:	f000 fa55 	bl	8001e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019ca:	bf00      	nop
 80019cc:	3728      	adds	r7, #40	; 0x28
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40004400 	.word	0x40004400
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40020000 	.word	0x40020000

080019e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <HardFault_Handler+0x4>

080019f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <MemManage_Handler+0x4>

080019fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019fe:	e7fe      	b.n	80019fe <BusFault_Handler+0x4>

08001a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <UsageFault_Handler+0x4>

08001a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a34:	f000 f8ca 	bl	8001bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <OTG_FS_IRQHandler+0x10>)
 8001a42:	f000 fe59 	bl	80026f8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20002ba8 	.word	0x20002ba8

08001a50 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a58:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <_sbrk+0x50>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d102      	bne.n	8001a66 <_sbrk+0x16>
		heap_end = &end;
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <_sbrk+0x50>)
 8001a62:	4a10      	ldr	r2, [pc, #64]	; (8001aa4 <_sbrk+0x54>)
 8001a64:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <_sbrk+0x50>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <_sbrk+0x50>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4413      	add	r3, r2
 8001a74:	466a      	mov	r2, sp
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d907      	bls.n	8001a8a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001a7a:	f00c fac9 	bl	800e010 <__errno>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	230c      	movs	r3, #12
 8001a82:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001a84:	f04f 33ff 	mov.w	r3, #4294967295
 8001a88:	e006      	b.n	8001a98 <_sbrk+0x48>
	}

	heap_end += incr;
 8001a8a:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <_sbrk+0x50>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	4a03      	ldr	r2, [pc, #12]	; (8001aa0 <_sbrk+0x50>)
 8001a94:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a96:	68fb      	ldr	r3, [r7, #12]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	200000b4 	.word	0x200000b4
 8001aa4:	20002e70 	.word	0x20002e70

08001aa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <SystemInit+0x28>)
 8001aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ab2:	4a07      	ldr	r2, [pc, #28]	; (8001ad0 <SystemInit+0x28>)
 8001ab4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ab8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001abc:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <SystemInit+0x28>)
 8001abe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ac2:	609a      	str	r2, [r3, #8]
#endif
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ad8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ada:	e003      	b.n	8001ae4 <LoopCopyDataInit>

08001adc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ade:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ae0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ae2:	3104      	adds	r1, #4

08001ae4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ae4:	480b      	ldr	r0, [pc, #44]	; (8001b14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ae8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001aea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001aec:	d3f6      	bcc.n	8001adc <CopyDataInit>
  ldr  r2, =_sbss
 8001aee:	4a0b      	ldr	r2, [pc, #44]	; (8001b1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001af0:	e002      	b.n	8001af8 <LoopFillZerobss>

08001af2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001af2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001af4:	f842 3b04 	str.w	r3, [r2], #4

08001af8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001af8:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001afa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001afc:	d3f9      	bcc.n	8001af2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001afe:	f7ff ffd3 	bl	8001aa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b02:	f00c fa8b 	bl	800e01c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b06:	f7ff fb89 	bl	800121c <main>
  bx  lr    
 8001b0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b10:	0800f290 	.word	0x0800f290
  ldr  r0, =_sdata
 8001b14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b18:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8001b1c:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8001b20:	20002e70 	.word	0x20002e70

08001b24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b24:	e7fe      	b.n	8001b24 <ADC_IRQHandler>
	...

08001b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <HAL_Init+0x40>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a0d      	ldr	r2, [pc, #52]	; (8001b68 <HAL_Init+0x40>)
 8001b32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_Init+0x40>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <HAL_Init+0x40>)
 8001b3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <HAL_Init+0x40>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a07      	ldr	r2, [pc, #28]	; (8001b68 <HAL_Init+0x40>)
 8001b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b50:	2003      	movs	r0, #3
 8001b52:	f000 f94d 	bl	8001df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b56:	2000      	movs	r0, #0
 8001b58:	f000 f808 	bl	8001b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b5c:	f7ff fed0 	bl	8001900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40023c00 	.word	0x40023c00

08001b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b74:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_InitTick+0x54>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_InitTick+0x58>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 f965 	bl	8001e5a <HAL_SYSTICK_Config>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e00e      	b.n	8001bb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b0f      	cmp	r3, #15
 8001b9e:	d80a      	bhi.n	8001bb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba8:	f000 f92d 	bl	8001e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bac:	4a06      	ldr	r2, [pc, #24]	; (8001bc8 <HAL_InitTick+0x5c>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e000      	b.n	8001bb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	20000008 	.word	0x20000008
 8001bc8:	20000004 	.word	0x20000004

08001bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_IncTick+0x20>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_IncTick+0x24>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4413      	add	r3, r2
 8001bdc:	4a04      	ldr	r2, [pc, #16]	; (8001bf0 <HAL_IncTick+0x24>)
 8001bde:	6013      	str	r3, [r2, #0]
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	20000008 	.word	0x20000008
 8001bf0:	20000728 	.word	0x20000728

08001bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf8:	4b03      	ldr	r3, [pc, #12]	; (8001c08 <HAL_GetTick+0x14>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000728 	.word	0x20000728

08001c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c14:	f7ff ffee 	bl	8001bf4 <HAL_GetTick>
 8001c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c24:	d005      	beq.n	8001c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <HAL_Delay+0x40>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4413      	add	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c32:	bf00      	nop
 8001c34:	f7ff ffde 	bl	8001bf4 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d8f7      	bhi.n	8001c34 <HAL_Delay+0x28>
  {
  }
}
 8001c44:	bf00      	nop
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000008 	.word	0x20000008

08001c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c82:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	60d3      	str	r3, [r2, #12]
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	f003 0307 	and.w	r3, r3, #7
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	db0b      	blt.n	8001cde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	f003 021f 	and.w	r2, r3, #31
 8001ccc:	4907      	ldr	r1, [pc, #28]	; (8001cec <__NVIC_EnableIRQ+0x38>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000e100 	.word	0xe000e100

08001cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	db0a      	blt.n	8001d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	490c      	ldr	r1, [pc, #48]	; (8001d3c <__NVIC_SetPriority+0x4c>)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	0112      	lsls	r2, r2, #4
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	440b      	add	r3, r1
 8001d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d18:	e00a      	b.n	8001d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4908      	ldr	r1, [pc, #32]	; (8001d40 <__NVIC_SetPriority+0x50>)
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	3b04      	subs	r3, #4
 8001d28:	0112      	lsls	r2, r2, #4
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	761a      	strb	r2, [r3, #24]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000e100 	.word	0xe000e100
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b089      	sub	sp, #36	; 0x24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f1c3 0307 	rsb	r3, r3, #7
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	bf28      	it	cs
 8001d62:	2304      	movcs	r3, #4
 8001d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	2b06      	cmp	r3, #6
 8001d6c:	d902      	bls.n	8001d74 <NVIC_EncodePriority+0x30>
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3b03      	subs	r3, #3
 8001d72:	e000      	b.n	8001d76 <NVIC_EncodePriority+0x32>
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	f04f 32ff 	mov.w	r2, #4294967295
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43da      	mvns	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	401a      	ands	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	fa01 f303 	lsl.w	r3, r1, r3
 8001d96:	43d9      	mvns	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	4313      	orrs	r3, r2
         );
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3724      	adds	r7, #36	; 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dbc:	d301      	bcc.n	8001dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e00f      	b.n	8001de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <SysTick_Config+0x40>)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dca:	210f      	movs	r1, #15
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd0:	f7ff ff8e 	bl	8001cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <SysTick_Config+0x40>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dda:	4b04      	ldr	r3, [pc, #16]	; (8001dec <SysTick_Config+0x40>)
 8001ddc:	2207      	movs	r2, #7
 8001dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	e000e010 	.word	0xe000e010

08001df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff ff29 	bl	8001c50 <__NVIC_SetPriorityGrouping>
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b086      	sub	sp, #24
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
 8001e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e18:	f7ff ff3e 	bl	8001c98 <__NVIC_GetPriorityGrouping>
 8001e1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	6978      	ldr	r0, [r7, #20]
 8001e24:	f7ff ff8e 	bl	8001d44 <NVIC_EncodePriority>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff5d 	bl	8001cf0 <__NVIC_SetPriority>
}
 8001e36:	bf00      	nop
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff31 	bl	8001cb4 <__NVIC_EnableIRQ>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff ffa2 	bl	8001dac <SysTick_Config>
 8001e68:	4603      	mov	r3, r0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b089      	sub	sp, #36	; 0x24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	e159      	b.n	8002144 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e90:	2201      	movs	r2, #1
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	f040 8148 	bne.w	800213e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d00b      	beq.n	8001ece <HAL_GPIO_Init+0x5a>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d007      	beq.n	8001ece <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ec2:	2b11      	cmp	r3, #17
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b12      	cmp	r3, #18
 8001ecc:	d130      	bne.n	8001f30 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	2203      	movs	r2, #3
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f04:	2201      	movs	r2, #1
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 0201 	and.w	r2, r3, #1
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_Init+0xfc>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b12      	cmp	r3, #18
 8001f6e:	d123      	bne.n	8001fb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	08da      	lsrs	r2, r3, #3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3208      	adds	r2, #8
 8001f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	220f      	movs	r2, #15
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	691a      	ldr	r2, [r3, #16]
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	08da      	lsrs	r2, r3, #3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3208      	adds	r2, #8
 8001fb2:	69b9      	ldr	r1, [r7, #24]
 8001fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0203 	and.w	r2, r3, #3
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 80a2 	beq.w	800213e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b56      	ldr	r3, [pc, #344]	; (8002158 <HAL_GPIO_Init+0x2e4>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	4a55      	ldr	r2, [pc, #340]	; (8002158 <HAL_GPIO_Init+0x2e4>)
 8002004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002008:	6453      	str	r3, [r2, #68]	; 0x44
 800200a:	4b53      	ldr	r3, [pc, #332]	; (8002158 <HAL_GPIO_Init+0x2e4>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002016:	4a51      	ldr	r2, [pc, #324]	; (800215c <HAL_GPIO_Init+0x2e8>)
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	089b      	lsrs	r3, r3, #2
 800201c:	3302      	adds	r3, #2
 800201e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	220f      	movs	r2, #15
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a48      	ldr	r2, [pc, #288]	; (8002160 <HAL_GPIO_Init+0x2ec>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d019      	beq.n	8002076 <HAL_GPIO_Init+0x202>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a47      	ldr	r2, [pc, #284]	; (8002164 <HAL_GPIO_Init+0x2f0>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d013      	beq.n	8002072 <HAL_GPIO_Init+0x1fe>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a46      	ldr	r2, [pc, #280]	; (8002168 <HAL_GPIO_Init+0x2f4>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d00d      	beq.n	800206e <HAL_GPIO_Init+0x1fa>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a45      	ldr	r2, [pc, #276]	; (800216c <HAL_GPIO_Init+0x2f8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d007      	beq.n	800206a <HAL_GPIO_Init+0x1f6>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a44      	ldr	r2, [pc, #272]	; (8002170 <HAL_GPIO_Init+0x2fc>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d101      	bne.n	8002066 <HAL_GPIO_Init+0x1f2>
 8002062:	2304      	movs	r3, #4
 8002064:	e008      	b.n	8002078 <HAL_GPIO_Init+0x204>
 8002066:	2307      	movs	r3, #7
 8002068:	e006      	b.n	8002078 <HAL_GPIO_Init+0x204>
 800206a:	2303      	movs	r3, #3
 800206c:	e004      	b.n	8002078 <HAL_GPIO_Init+0x204>
 800206e:	2302      	movs	r3, #2
 8002070:	e002      	b.n	8002078 <HAL_GPIO_Init+0x204>
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <HAL_GPIO_Init+0x204>
 8002076:	2300      	movs	r3, #0
 8002078:	69fa      	ldr	r2, [r7, #28]
 800207a:	f002 0203 	and.w	r2, r2, #3
 800207e:	0092      	lsls	r2, r2, #2
 8002080:	4093      	lsls	r3, r2
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002088:	4934      	ldr	r1, [pc, #208]	; (800215c <HAL_GPIO_Init+0x2e8>)
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	089b      	lsrs	r3, r3, #2
 800208e:	3302      	adds	r3, #2
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002096:	4b37      	ldr	r3, [pc, #220]	; (8002174 <HAL_GPIO_Init+0x300>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	43db      	mvns	r3, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4013      	ands	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020ba:	4a2e      	ldr	r2, [pc, #184]	; (8002174 <HAL_GPIO_Init+0x300>)
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020c0:	4b2c      	ldr	r3, [pc, #176]	; (8002174 <HAL_GPIO_Init+0x300>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020e4:	4a23      	ldr	r2, [pc, #140]	; (8002174 <HAL_GPIO_Init+0x300>)
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ea:	4b22      	ldr	r3, [pc, #136]	; (8002174 <HAL_GPIO_Init+0x300>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800210e:	4a19      	ldr	r2, [pc, #100]	; (8002174 <HAL_GPIO_Init+0x300>)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002114:	4b17      	ldr	r3, [pc, #92]	; (8002174 <HAL_GPIO_Init+0x300>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	4313      	orrs	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002138:	4a0e      	ldr	r2, [pc, #56]	; (8002174 <HAL_GPIO_Init+0x300>)
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3301      	adds	r3, #1
 8002142:	61fb      	str	r3, [r7, #28]
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	2b0f      	cmp	r3, #15
 8002148:	f67f aea2 	bls.w	8001e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800214c:	bf00      	nop
 800214e:	3724      	adds	r7, #36	; 0x24
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	40023800 	.word	0x40023800
 800215c:	40013800 	.word	0x40013800
 8002160:	40020000 	.word	0x40020000
 8002164:	40020400 	.word	0x40020400
 8002168:	40020800 	.word	0x40020800
 800216c:	40020c00 	.word	0x40020c00
 8002170:	40021000 	.word	0x40021000
 8002174:	40013c00 	.word	0x40013c00

08002178 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691a      	ldr	r2, [r3, #16]
 8002188:	887b      	ldrh	r3, [r7, #2]
 800218a:	4013      	ands	r3, r2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d002      	beq.n	8002196 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002190:	2301      	movs	r3, #1
 8002192:	73fb      	strb	r3, [r7, #15]
 8002194:	e001      	b.n	800219a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002196:	2300      	movs	r3, #0
 8002198:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800219a:	7bfb      	ldrb	r3, [r7, #15]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	807b      	strh	r3, [r7, #2]
 80021b4:	4613      	mov	r3, r2
 80021b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b8:	787b      	ldrb	r3, [r7, #1]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021be:	887a      	ldrh	r2, [r7, #2]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021c4:	e003      	b.n	80021ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021c6:	887b      	ldrh	r3, [r7, #2]
 80021c8:	041a      	lsls	r2, r3, #16
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	619a      	str	r2, [r3, #24]
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80021da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021dc:	b08f      	sub	sp, #60	; 0x3c
 80021de:	af0a      	add	r7, sp, #40	; 0x28
 80021e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e054      	b.n	8002296 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d106      	bne.n	800220c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f00b fc24 	bl	800da54 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2203      	movs	r2, #3
 8002210:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221c:	2b00      	cmp	r3, #0
 800221e:	d102      	bne.n	8002226 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f002 fe46 	bl	8004ebc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	603b      	str	r3, [r7, #0]
 8002236:	687e      	ldr	r6, [r7, #4]
 8002238:	466d      	mov	r5, sp
 800223a:	f106 0410 	add.w	r4, r6, #16
 800223e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002240:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002242:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002244:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002246:	e894 0003 	ldmia.w	r4, {r0, r1}
 800224a:	e885 0003 	stmia.w	r5, {r0, r1}
 800224e:	1d33      	adds	r3, r6, #4
 8002250:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002252:	6838      	ldr	r0, [r7, #0]
 8002254:	f002 fdc0 	bl	8004dd8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2101      	movs	r1, #1
 800225e:	4618      	mov	r0, r3
 8002260:	f002 fe3d 	bl	8004ede <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	603b      	str	r3, [r7, #0]
 800226a:	687e      	ldr	r6, [r7, #4]
 800226c:	466d      	mov	r5, sp
 800226e:	f106 0410 	add.w	r4, r6, #16
 8002272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002276:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002278:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800227a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800227e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002282:	1d33      	adds	r3, r6, #4
 8002284:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002286:	6838      	ldr	r0, [r7, #0]
 8002288:	f002 ff50 	bl	800512c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800229e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800229e:	b590      	push	{r4, r7, lr}
 80022a0:	b089      	sub	sp, #36	; 0x24
 80022a2:	af04      	add	r7, sp, #16
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	4608      	mov	r0, r1
 80022a8:	4611      	mov	r1, r2
 80022aa:	461a      	mov	r2, r3
 80022ac:	4603      	mov	r3, r0
 80022ae:	70fb      	strb	r3, [r7, #3]
 80022b0:	460b      	mov	r3, r1
 80022b2:	70bb      	strb	r3, [r7, #2]
 80022b4:	4613      	mov	r3, r2
 80022b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d101      	bne.n	80022c6 <HAL_HCD_HC_Init+0x28>
 80022c2:	2302      	movs	r3, #2
 80022c4:	e07f      	b.n	80023c6 <HAL_HCD_HC_Init+0x128>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80022ce:	78fa      	ldrb	r2, [r7, #3]
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	440b      	add	r3, r1
 80022dc:	333d      	adds	r3, #61	; 0x3d
 80022de:	2200      	movs	r2, #0
 80022e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80022e2:	78fa      	ldrb	r2, [r7, #3]
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	440b      	add	r3, r1
 80022f0:	3338      	adds	r3, #56	; 0x38
 80022f2:	787a      	ldrb	r2, [r7, #1]
 80022f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80022f6:	78fa      	ldrb	r2, [r7, #3]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	440b      	add	r3, r1
 8002304:	3340      	adds	r3, #64	; 0x40
 8002306:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002308:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800230a:	78fa      	ldrb	r2, [r7, #3]
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	440b      	add	r3, r1
 8002318:	3339      	adds	r3, #57	; 0x39
 800231a:	78fa      	ldrb	r2, [r7, #3]
 800231c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800231e:	78fa      	ldrb	r2, [r7, #3]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	440b      	add	r3, r1
 800232c:	333f      	adds	r3, #63	; 0x3f
 800232e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002332:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002334:	78fa      	ldrb	r2, [r7, #3]
 8002336:	78bb      	ldrb	r3, [r7, #2]
 8002338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800233c:	b2d8      	uxtb	r0, r3
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	440b      	add	r3, r1
 800234a:	333a      	adds	r3, #58	; 0x3a
 800234c:	4602      	mov	r2, r0
 800234e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002350:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002354:	2b00      	cmp	r3, #0
 8002356:	da0a      	bge.n	800236e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	440b      	add	r3, r1
 8002366:	333b      	adds	r3, #59	; 0x3b
 8002368:	2201      	movs	r2, #1
 800236a:	701a      	strb	r2, [r3, #0]
 800236c:	e009      	b.n	8002382 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800236e:	78fa      	ldrb	r2, [r7, #3]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	440b      	add	r3, r1
 800237c:	333b      	adds	r3, #59	; 0x3b
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002382:	78fa      	ldrb	r2, [r7, #3]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	440b      	add	r3, r1
 8002390:	333c      	adds	r3, #60	; 0x3c
 8002392:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002396:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	787c      	ldrb	r4, [r7, #1]
 800239e:	78ba      	ldrb	r2, [r7, #2]
 80023a0:	78f9      	ldrb	r1, [r7, #3]
 80023a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023a4:	9302      	str	r3, [sp, #8]
 80023a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80023aa:	9301      	str	r3, [sp, #4]
 80023ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	4623      	mov	r3, r4
 80023b4:	f003 f83c 	bl	8005430 <USB_HC_Init>
 80023b8:	4603      	mov	r3, r0
 80023ba:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd90      	pop	{r4, r7, pc}

080023ce <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b084      	sub	sp, #16
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	460b      	mov	r3, r1
 80023d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d101      	bne.n	80023ec <HAL_HCD_HC_Halt+0x1e>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e00f      	b.n	800240c <HAL_HCD_HC_Halt+0x3e>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	78fa      	ldrb	r2, [r7, #3]
 80023fa:	4611      	mov	r1, r2
 80023fc:	4618      	mov	r0, r3
 80023fe:	f003 fa78 	bl	80058f2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800240a:	7bfb      	ldrb	r3, [r7, #15]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	4608      	mov	r0, r1
 800241e:	4611      	mov	r1, r2
 8002420:	461a      	mov	r2, r3
 8002422:	4603      	mov	r3, r0
 8002424:	70fb      	strb	r3, [r7, #3]
 8002426:	460b      	mov	r3, r1
 8002428:	70bb      	strb	r3, [r7, #2]
 800242a:	4613      	mov	r3, r2
 800242c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800242e:	78fa      	ldrb	r2, [r7, #3]
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	440b      	add	r3, r1
 800243c:	333b      	adds	r3, #59	; 0x3b
 800243e:	78ba      	ldrb	r2, [r7, #2]
 8002440:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002442:	78fa      	ldrb	r2, [r7, #3]
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	440b      	add	r3, r1
 8002450:	333f      	adds	r3, #63	; 0x3f
 8002452:	787a      	ldrb	r2, [r7, #1]
 8002454:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002456:	7c3b      	ldrb	r3, [r7, #16]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d114      	bne.n	8002486 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800245c:	78fa      	ldrb	r2, [r7, #3]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	440b      	add	r3, r1
 800246a:	3342      	adds	r3, #66	; 0x42
 800246c:	2203      	movs	r2, #3
 800246e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002470:	78fa      	ldrb	r2, [r7, #3]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	440b      	add	r3, r1
 800247e:	333d      	adds	r3, #61	; 0x3d
 8002480:	7f3a      	ldrb	r2, [r7, #28]
 8002482:	701a      	strb	r2, [r3, #0]
 8002484:	e009      	b.n	800249a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002486:	78fa      	ldrb	r2, [r7, #3]
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	440b      	add	r3, r1
 8002494:	3342      	adds	r3, #66	; 0x42
 8002496:	2202      	movs	r2, #2
 8002498:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800249a:	787b      	ldrb	r3, [r7, #1]
 800249c:	2b03      	cmp	r3, #3
 800249e:	f200 80d6 	bhi.w	800264e <HAL_HCD_HC_SubmitRequest+0x23a>
 80024a2:	a201      	add	r2, pc, #4	; (adr r2, 80024a8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80024a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a8:	080024b9 	.word	0x080024b9
 80024ac:	08002639 	.word	0x08002639
 80024b0:	08002525 	.word	0x08002525
 80024b4:	080025af 	.word	0x080025af
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80024b8:	7c3b      	ldrb	r3, [r7, #16]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	f040 80c9 	bne.w	8002652 <HAL_HCD_HC_SubmitRequest+0x23e>
 80024c0:	78bb      	ldrb	r3, [r7, #2]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f040 80c5 	bne.w	8002652 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80024c8:	8b3b      	ldrh	r3, [r7, #24]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d109      	bne.n	80024e2 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	440b      	add	r3, r1
 80024dc:	3351      	adds	r3, #81	; 0x51
 80024de:	2201      	movs	r2, #1
 80024e0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024e2:	78fa      	ldrb	r2, [r7, #3]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	440b      	add	r3, r1
 80024f0:	3351      	adds	r3, #81	; 0x51
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10a      	bne.n	800250e <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024f8:	78fa      	ldrb	r2, [r7, #3]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	440b      	add	r3, r1
 8002506:	3342      	adds	r3, #66	; 0x42
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800250c:	e0a1      	b.n	8002652 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800250e:	78fa      	ldrb	r2, [r7, #3]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	440b      	add	r3, r1
 800251c:	3342      	adds	r3, #66	; 0x42
 800251e:	2202      	movs	r2, #2
 8002520:	701a      	strb	r2, [r3, #0]
      break;
 8002522:	e096      	b.n	8002652 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002524:	78bb      	ldrb	r3, [r7, #2]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d120      	bne.n	800256c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800252a:	78fa      	ldrb	r2, [r7, #3]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	440b      	add	r3, r1
 8002538:	3351      	adds	r3, #81	; 0x51
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10a      	bne.n	8002556 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002540:	78fa      	ldrb	r2, [r7, #3]
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	440b      	add	r3, r1
 800254e:	3342      	adds	r3, #66	; 0x42
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002554:	e07e      	b.n	8002654 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002556:	78fa      	ldrb	r2, [r7, #3]
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	440b      	add	r3, r1
 8002564:	3342      	adds	r3, #66	; 0x42
 8002566:	2202      	movs	r2, #2
 8002568:	701a      	strb	r2, [r3, #0]
      break;
 800256a:	e073      	b.n	8002654 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	440b      	add	r3, r1
 800257a:	3350      	adds	r3, #80	; 0x50
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10a      	bne.n	8002598 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002582:	78fa      	ldrb	r2, [r7, #3]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	440b      	add	r3, r1
 8002590:	3342      	adds	r3, #66	; 0x42
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
      break;
 8002596:	e05d      	b.n	8002654 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	440b      	add	r3, r1
 80025a6:	3342      	adds	r3, #66	; 0x42
 80025a8:	2202      	movs	r2, #2
 80025aa:	701a      	strb	r2, [r3, #0]
      break;
 80025ac:	e052      	b.n	8002654 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80025ae:	78bb      	ldrb	r3, [r7, #2]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d120      	bne.n	80025f6 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80025b4:	78fa      	ldrb	r2, [r7, #3]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	440b      	add	r3, r1
 80025c2:	3351      	adds	r3, #81	; 0x51
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10a      	bne.n	80025e0 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025ca:	78fa      	ldrb	r2, [r7, #3]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	440b      	add	r3, r1
 80025d8:	3342      	adds	r3, #66	; 0x42
 80025da:	2200      	movs	r2, #0
 80025dc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80025de:	e039      	b.n	8002654 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	440b      	add	r3, r1
 80025ee:	3342      	adds	r3, #66	; 0x42
 80025f0:	2202      	movs	r2, #2
 80025f2:	701a      	strb	r2, [r3, #0]
      break;
 80025f4:	e02e      	b.n	8002654 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80025f6:	78fa      	ldrb	r2, [r7, #3]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	440b      	add	r3, r1
 8002604:	3350      	adds	r3, #80	; 0x50
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10a      	bne.n	8002622 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	440b      	add	r3, r1
 800261a:	3342      	adds	r3, #66	; 0x42
 800261c:	2200      	movs	r2, #0
 800261e:	701a      	strb	r2, [r3, #0]
      break;
 8002620:	e018      	b.n	8002654 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002622:	78fa      	ldrb	r2, [r7, #3]
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	440b      	add	r3, r1
 8002630:	3342      	adds	r3, #66	; 0x42
 8002632:	2202      	movs	r2, #2
 8002634:	701a      	strb	r2, [r3, #0]
      break;
 8002636:	e00d      	b.n	8002654 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002638:	78fa      	ldrb	r2, [r7, #3]
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	440b      	add	r3, r1
 8002646:	3342      	adds	r3, #66	; 0x42
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
      break;
 800264c:	e002      	b.n	8002654 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800264e:	bf00      	nop
 8002650:	e000      	b.n	8002654 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8002652:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002654:	78fa      	ldrb	r2, [r7, #3]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	440b      	add	r3, r1
 8002662:	3344      	adds	r3, #68	; 0x44
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002668:	78fa      	ldrb	r2, [r7, #3]
 800266a:	8b39      	ldrh	r1, [r7, #24]
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	4403      	add	r3, r0
 8002678:	3348      	adds	r3, #72	; 0x48
 800267a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800267c:	78fa      	ldrb	r2, [r7, #3]
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	440b      	add	r3, r1
 800268a:	335c      	adds	r3, #92	; 0x5c
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002690:	78fa      	ldrb	r2, [r7, #3]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	440b      	add	r3, r1
 800269e:	334c      	adds	r3, #76	; 0x4c
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80026a4:	78fa      	ldrb	r2, [r7, #3]
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	440b      	add	r3, r1
 80026b2:	3339      	adds	r3, #57	; 0x39
 80026b4:	78fa      	ldrb	r2, [r7, #3]
 80026b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80026b8:	78fa      	ldrb	r2, [r7, #3]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	440b      	add	r3, r1
 80026c6:	335d      	adds	r3, #93	; 0x5d
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	78fa      	ldrb	r2, [r7, #3]
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	3338      	adds	r3, #56	; 0x38
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	18d1      	adds	r1, r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	461a      	mov	r2, r3
 80026e8:	f002 ffac 	bl	8005644 <USB_HC_StartXfer>
 80026ec:	4603      	mov	r3, r0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop

080026f8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f002 fcc9 	bl	80050a6 <USB_GetMode>
 8002714:	4603      	mov	r3, r0
 8002716:	2b01      	cmp	r3, #1
 8002718:	f040 80ef 	bne.w	80028fa <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f002 fcad 	bl	8005080 <USB_ReadInterrupts>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 80e5 	beq.w	80028f8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f002 fca4 	bl	8005080 <USB_ReadInterrupts>
 8002738:	4603      	mov	r3, r0
 800273a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800273e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002742:	d104      	bne.n	800274e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800274c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f002 fc94 	bl	8005080 <USB_ReadInterrupts>
 8002758:	4603      	mov	r3, r0
 800275a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800275e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002762:	d104      	bne.n	800276e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800276c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f002 fc84 	bl	8005080 <USB_ReadInterrupts>
 8002778:	4603      	mov	r3, r0
 800277a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800277e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002782:	d104      	bne.n	800278e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800278c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f002 fc74 	bl	8005080 <USB_ReadInterrupts>
 8002798:	4603      	mov	r3, r0
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d103      	bne.n	80027aa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2202      	movs	r2, #2
 80027a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f002 fc66 	bl	8005080 <USB_ReadInterrupts>
 80027b4:	4603      	mov	r3, r0
 80027b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027be:	d115      	bne.n	80027ec <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80027c8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d108      	bne.n	80027ec <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f00b f9b8 	bl	800db50 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2101      	movs	r1, #1
 80027e6:	4618      	mov	r0, r3
 80027e8:	f002 fd5c 	bl	80052a4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f002 fc45 	bl	8005080 <USB_ReadInterrupts>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002800:	d102      	bne.n	8002808 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f001 f966 	bl	8003ad4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f002 fc37 	bl	8005080 <USB_ReadInterrupts>
 8002812:	4603      	mov	r3, r0
 8002814:	f003 0308 	and.w	r3, r3, #8
 8002818:	2b08      	cmp	r3, #8
 800281a:	d106      	bne.n	800282a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f00b f97b 	bl	800db18 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2208      	movs	r2, #8
 8002828:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f002 fc26 	bl	8005080 <USB_ReadInterrupts>
 8002834:	4603      	mov	r3, r0
 8002836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800283e:	d138      	bne.n	80028b2 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f003 f843 	bl	80058d0 <USB_HC_ReadInterrupt>
 800284a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	e025      	b.n	800289e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f003 030f 	and.w	r3, r3, #15
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	fa22 f303 	lsr.w	r3, r2, r3
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d018      	beq.n	8002898 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	015a      	lsls	r2, r3, #5
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	4413      	add	r3, r2
 800286e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800287c:	d106      	bne.n	800288c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	4619      	mov	r1, r3
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f8cf 	bl	8002a28 <HCD_HC_IN_IRQHandler>
 800288a:	e005      	b.n	8002898 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	b2db      	uxtb	r3, r3
 8002890:	4619      	mov	r1, r3
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 fcfd 	bl	8003292 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	3301      	adds	r3, #1
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d3d4      	bcc.n	8002852 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f002 fbe2 	bl	8005080 <USB_ReadInterrupts>
 80028bc:	4603      	mov	r3, r0
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	2b10      	cmp	r3, #16
 80028c4:	d101      	bne.n	80028ca <HAL_HCD_IRQHandler+0x1d2>
 80028c6:	2301      	movs	r3, #1
 80028c8:	e000      	b.n	80028cc <HAL_HCD_IRQHandler+0x1d4>
 80028ca:	2300      	movs	r3, #0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d014      	beq.n	80028fa <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	699a      	ldr	r2, [r3, #24]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0210 	bic.w	r2, r2, #16
 80028de:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f001 f84b 	bl	800397c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	699a      	ldr	r2, [r3, #24]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f042 0210 	orr.w	r2, r2, #16
 80028f4:	619a      	str	r2, [r3, #24]
 80028f6:	e000      	b.n	80028fa <HAL_HCD_IRQHandler+0x202>
      return;
 80028f8:	bf00      	nop
    }
  }
}
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800290e:	2b01      	cmp	r3, #1
 8002910:	d101      	bne.n	8002916 <HAL_HCD_Start+0x16>
 8002912:	2302      	movs	r3, #2
 8002914:	e013      	b.n	800293e <HAL_HCD_Start+0x3e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f002 fab9 	bl	8004e9a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2101      	movs	r1, #1
 800292e:	4618      	mov	r0, r3
 8002930:	f002 fd1c 	bl	800536c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <HAL_HCD_Stop+0x16>
 8002958:	2302      	movs	r3, #2
 800295a:	e00d      	b.n	8002978 <HAL_HCD_Stop+0x32>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f003 f8fd 	bl	8005b68 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f002 fcc3 	bl	8005318 <USB_ResetPort>
 8002992:	4603      	mov	r3, r0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	440b      	add	r3, r1
 80029b6:	335c      	adds	r3, #92	; 0x5c
 80029b8:	781b      	ldrb	r3, [r3, #0]
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
 80029ce:	460b      	mov	r3, r1
 80029d0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80029d2:	78fa      	ldrb	r2, [r7, #3]
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	440b      	add	r3, r1
 80029e0:	334c      	adds	r3, #76	; 0x4c
 80029e2:	681b      	ldr	r3, [r3, #0]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f002 fd05 	bl	800540c <USB_GetCurrentFrame>
 8002a02:	4603      	mov	r3, r0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f002 fce0 	bl	80053de <USB_GetHostSpeed>
 8002a1e:	4603      	mov	r3, r0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002a3e:	78fb      	ldrb	r3, [r7, #3]
 8002a40:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d119      	bne.n	8002a8c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a64:	461a      	mov	r2, r3
 8002a66:	2304      	movs	r3, #4
 8002a68:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	015a      	lsls	r2, r3, #5
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	0151      	lsls	r1, r2, #5
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	440a      	add	r2, r1
 8002a80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a84:	f043 0302 	orr.w	r3, r3, #2
 8002a88:	60d3      	str	r3, [r2, #12]
 8002a8a:	e0ce      	b.n	8002c2a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aa2:	d12c      	bne.n	8002afe <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ab6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	440b      	add	r3, r1
 8002ac6:	335d      	adds	r3, #93	; 0x5d
 8002ac8:	2207      	movs	r2, #7
 8002aca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	0151      	lsls	r1, r2, #5
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	440a      	add	r2, r1
 8002ae2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ae6:	f043 0302 	orr.w	r3, r3, #2
 8002aea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	4611      	mov	r1, r2
 8002af6:	4618      	mov	r0, r3
 8002af8:	f002 fefb 	bl	80058f2 <USB_HC_Halt>
 8002afc:	e095      	b.n	8002c2a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	015a      	lsls	r2, r3, #5
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4413      	add	r3, r2
 8002b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 0320 	and.w	r3, r3, #32
 8002b10:	2b20      	cmp	r3, #32
 8002b12:	d109      	bne.n	8002b28 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b20:	461a      	mov	r2, r3
 8002b22:	2320      	movs	r3, #32
 8002b24:	6093      	str	r3, [r2, #8]
 8002b26:	e080      	b.n	8002c2a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	015a      	lsls	r2, r3, #5
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d134      	bne.n	8002ba8 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	015a      	lsls	r2, r3, #5
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	4413      	add	r3, r2
 8002b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	0151      	lsls	r1, r2, #5
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	440a      	add	r2, r1
 8002b54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b58:	f043 0302 	orr.w	r3, r3, #2
 8002b5c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	440b      	add	r3, r1
 8002b6c:	335d      	adds	r3, #93	; 0x5d
 8002b6e:	2205      	movs	r2, #5
 8002b70:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	015a      	lsls	r2, r3, #5
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7e:	461a      	mov	r2, r3
 8002b80:	2310      	movs	r3, #16
 8002b82:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b90:	461a      	mov	r2, r3
 8002b92:	2308      	movs	r3, #8
 8002b94:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f002 fea6 	bl	80058f2 <USB_HC_Halt>
 8002ba6:	e040      	b.n	8002c2a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bbe:	d134      	bne.n	8002c2a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	015a      	lsls	r2, r3, #5
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	0151      	lsls	r1, r2, #5
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	440a      	add	r2, r1
 8002bd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bda:	f043 0302 	orr.w	r3, r3, #2
 8002bde:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	4611      	mov	r1, r2
 8002bea:	4618      	mov	r0, r3
 8002bec:	f002 fe81 	bl	80058f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	015a      	lsls	r2, r3, #5
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	2310      	movs	r3, #16
 8002c00:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	440b      	add	r3, r1
 8002c10:	335d      	adds	r3, #93	; 0x5d
 8002c12:	2208      	movs	r2, #8
 8002c14:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	015a      	lsls	r2, r3, #5
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c22:	461a      	mov	r2, r3
 8002c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c28:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	015a      	lsls	r2, r3, #5
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	4413      	add	r3, r2
 8002c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c40:	d122      	bne.n	8002c88 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	0151      	lsls	r1, r2, #5
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	440a      	add	r2, r1
 8002c58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c5c:	f043 0302 	orr.w	r3, r3, #2
 8002c60:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	b2d2      	uxtb	r2, r2
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f002 fe40 	bl	80058f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	015a      	lsls	r2, r3, #5
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4413      	add	r3, r2
 8002c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7e:	461a      	mov	r2, r3
 8002c80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c84:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002c86:	e300      	b.n	800328a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	f040 80fd 	bne.w	8002e9a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d01b      	beq.n	8002ce0 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	440b      	add	r3, r1
 8002cb6:	3348      	adds	r3, #72	; 0x48
 8002cb8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	0159      	lsls	r1, r3, #5
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	440b      	add	r3, r1
 8002cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002ccc:	1ad1      	subs	r1, r2, r3
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	4403      	add	r3, r0
 8002cdc:	334c      	adds	r3, #76	; 0x4c
 8002cde:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	440b      	add	r3, r1
 8002cee:	335d      	adds	r3, #93	; 0x5d
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	440b      	add	r3, r1
 8002d02:	3358      	adds	r3, #88	; 0x58
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d14:	461a      	mov	r2, r3
 8002d16:	2301      	movs	r3, #1
 8002d18:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	440b      	add	r3, r1
 8002d28:	333f      	adds	r3, #63	; 0x3f
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00a      	beq.n	8002d46 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	4613      	mov	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	440b      	add	r3, r1
 8002d3e:	333f      	adds	r3, #63	; 0x3f
 8002d40:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d121      	bne.n	8002d8a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	015a      	lsls	r2, r3, #5
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	0151      	lsls	r1, r2, #5
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	440a      	add	r2, r1
 8002d5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d60:	f043 0302 	orr.w	r3, r3, #2
 8002d64:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f002 fdbe 	bl	80058f2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	015a      	lsls	r2, r3, #5
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d82:	461a      	mov	r2, r3
 8002d84:	2310      	movs	r3, #16
 8002d86:	6093      	str	r3, [r2, #8]
 8002d88:	e070      	b.n	8002e6c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	440b      	add	r3, r1
 8002d98:	333f      	adds	r3, #63	; 0x3f
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d12a      	bne.n	8002df6 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	0151      	lsls	r1, r2, #5
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	440a      	add	r2, r1
 8002db6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002dbe:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	440b      	add	r3, r1
 8002dce:	335c      	adds	r3, #92	; 0x5c
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	b2d8      	uxtb	r0, r3
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	440b      	add	r3, r1
 8002de6:	335c      	adds	r3, #92	; 0x5c
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	4601      	mov	r1, r0
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f00a febc 	bl	800db6c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002df4:	e03a      	b.n	8002e6c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	440b      	add	r3, r1
 8002e04:	333f      	adds	r3, #63	; 0x3f
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d12f      	bne.n	8002e6c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	440b      	add	r3, r1
 8002e1a:	335c      	adds	r3, #92	; 0x5c
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	440b      	add	r3, r1
 8002e2e:	3350      	adds	r3, #80	; 0x50
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	f083 0301 	eor.w	r3, r3, #1
 8002e36:	b2d8      	uxtb	r0, r3
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	440b      	add	r3, r1
 8002e46:	3350      	adds	r3, #80	; 0x50
 8002e48:	4602      	mov	r2, r0
 8002e4a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	b2d8      	uxtb	r0, r3
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	4613      	mov	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	440b      	add	r3, r1
 8002e5e:	335c      	adds	r3, #92	; 0x5c
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	461a      	mov	r2, r3
 8002e64:	4601      	mov	r1, r0
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f00a fe80 	bl	800db6c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	440b      	add	r3, r1
 8002e7a:	3350      	adds	r3, #80	; 0x50
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	f083 0301 	eor.w	r3, r3, #1
 8002e82:	b2d8      	uxtb	r0, r3
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	440b      	add	r3, r1
 8002e92:	3350      	adds	r3, #80	; 0x50
 8002e94:	4602      	mov	r2, r0
 8002e96:	701a      	strb	r2, [r3, #0]
}
 8002e98:	e1f7      	b.n	800328a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	015a      	lsls	r2, r3, #5
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	f040 811a 	bne.w	80030e6 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	0151      	lsls	r1, r2, #5
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	440a      	add	r2, r1
 8002ec8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ecc:	f023 0302 	bic.w	r3, r3, #2
 8002ed0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	440b      	add	r3, r1
 8002ee0:	335d      	adds	r3, #93	; 0x5d
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d10a      	bne.n	8002efe <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	4613      	mov	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4413      	add	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	440b      	add	r3, r1
 8002ef6:	335c      	adds	r3, #92	; 0x5c
 8002ef8:	2201      	movs	r2, #1
 8002efa:	701a      	strb	r2, [r3, #0]
 8002efc:	e0d9      	b.n	80030b2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	440b      	add	r3, r1
 8002f0c:	335d      	adds	r3, #93	; 0x5d
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b05      	cmp	r3, #5
 8002f12:	d10a      	bne.n	8002f2a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	440b      	add	r3, r1
 8002f22:	335c      	adds	r3, #92	; 0x5c
 8002f24:	2205      	movs	r2, #5
 8002f26:	701a      	strb	r2, [r3, #0]
 8002f28:	e0c3      	b.n	80030b2 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	440b      	add	r3, r1
 8002f38:	335d      	adds	r3, #93	; 0x5d
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b06      	cmp	r3, #6
 8002f3e:	d00a      	beq.n	8002f56 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	440b      	add	r3, r1
 8002f4e:	335d      	adds	r3, #93	; 0x5d
 8002f50:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f52:	2b08      	cmp	r3, #8
 8002f54:	d156      	bne.n	8003004 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	440b      	add	r3, r1
 8002f64:	3358      	adds	r3, #88	; 0x58
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	1c59      	adds	r1, r3, #1
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	4403      	add	r3, r0
 8002f78:	3358      	adds	r3, #88	; 0x58
 8002f7a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	4613      	mov	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	440b      	add	r3, r1
 8002f8a:	3358      	adds	r3, #88	; 0x58
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b03      	cmp	r3, #3
 8002f90:	d914      	bls.n	8002fbc <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	440b      	add	r3, r1
 8002fa0:	3358      	adds	r3, #88	; 0x58
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4613      	mov	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	440b      	add	r3, r1
 8002fb4:	335c      	adds	r3, #92	; 0x5c
 8002fb6:	2204      	movs	r2, #4
 8002fb8:	701a      	strb	r2, [r3, #0]
 8002fba:	e009      	b.n	8002fd0 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	440b      	add	r3, r1
 8002fca:	335c      	adds	r3, #92	; 0x5c
 8002fcc:	2202      	movs	r2, #2
 8002fce:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fe6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fee:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	6013      	str	r3, [r2, #0]
 8003002:	e056      	b.n	80030b2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	440b      	add	r3, r1
 8003012:	335d      	adds	r3, #93	; 0x5d
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b03      	cmp	r3, #3
 8003018:	d123      	bne.n	8003062 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	4613      	mov	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	440b      	add	r3, r1
 8003028:	335c      	adds	r3, #92	; 0x5c
 800302a:	2202      	movs	r2, #2
 800302c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4413      	add	r3, r2
 8003036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003044:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800304c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	4413      	add	r3, r2
 8003056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305a:	461a      	mov	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	6013      	str	r3, [r2, #0]
 8003060:	e027      	b.n	80030b2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	440b      	add	r3, r1
 8003070:	335d      	adds	r3, #93	; 0x5d
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b07      	cmp	r3, #7
 8003076:	d11c      	bne.n	80030b2 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	4613      	mov	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	440b      	add	r3, r1
 8003086:	3358      	adds	r3, #88	; 0x58
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	1c59      	adds	r1, r3, #1
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4403      	add	r3, r0
 800309a:	3358      	adds	r3, #88	; 0x58
 800309c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	4613      	mov	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	440b      	add	r3, r1
 80030ac:	335c      	adds	r3, #92	; 0x5c
 80030ae:	2204      	movs	r2, #4
 80030b0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	015a      	lsls	r2, r3, #5
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030be:	461a      	mov	r2, r3
 80030c0:	2302      	movs	r3, #2
 80030c2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	b2d8      	uxtb	r0, r3
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	440b      	add	r3, r1
 80030d6:	335c      	adds	r3, #92	; 0x5c
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	461a      	mov	r2, r3
 80030dc:	4601      	mov	r1, r0
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f00a fd44 	bl	800db6c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80030e4:	e0d1      	b.n	800328a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f8:	2b80      	cmp	r3, #128	; 0x80
 80030fa:	d13e      	bne.n	800317a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	4413      	add	r3, r2
 8003104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	0151      	lsls	r1, r2, #5
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	440a      	add	r2, r1
 8003112:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003116:	f043 0302 	orr.w	r3, r3, #2
 800311a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	440b      	add	r3, r1
 800312a:	3358      	adds	r3, #88	; 0x58
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	1c59      	adds	r1, r3, #1
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	4613      	mov	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4403      	add	r3, r0
 800313e:	3358      	adds	r3, #88	; 0x58
 8003140:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	440b      	add	r3, r1
 8003150:	335d      	adds	r3, #93	; 0x5d
 8003152:	2206      	movs	r2, #6
 8003154:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	4611      	mov	r1, r2
 8003160:	4618      	mov	r0, r3
 8003162:	f002 fbc6 	bl	80058f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4413      	add	r3, r2
 800316e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003172:	461a      	mov	r2, r3
 8003174:	2380      	movs	r3, #128	; 0x80
 8003176:	6093      	str	r3, [r2, #8]
}
 8003178:	e087      	b.n	800328a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4413      	add	r3, r2
 8003182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 0310 	and.w	r3, r3, #16
 800318c:	2b10      	cmp	r3, #16
 800318e:	d17c      	bne.n	800328a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	440b      	add	r3, r1
 800319e:	333f      	adds	r3, #63	; 0x3f
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	d122      	bne.n	80031ec <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	440b      	add	r3, r1
 80031b4:	3358      	adds	r3, #88	; 0x58
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	015a      	lsls	r2, r3, #5
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	0151      	lsls	r1, r2, #5
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	440a      	add	r2, r1
 80031d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031d4:	f043 0302 	orr.w	r3, r3, #2
 80031d8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	4611      	mov	r1, r2
 80031e4:	4618      	mov	r0, r3
 80031e6:	f002 fb84 	bl	80058f2 <USB_HC_Halt>
 80031ea:	e045      	b.n	8003278 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	440b      	add	r3, r1
 80031fa:	333f      	adds	r3, #63	; 0x3f
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	4613      	mov	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	440b      	add	r3, r1
 8003210:	333f      	adds	r3, #63	; 0x3f
 8003212:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003214:	2b02      	cmp	r3, #2
 8003216:	d12f      	bne.n	8003278 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	4613      	mov	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	440b      	add	r3, r1
 8003226:	3358      	adds	r3, #88	; 0x58
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d121      	bne.n	8003278 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	440b      	add	r3, r1
 8003242:	335d      	adds	r3, #93	; 0x5d
 8003244:	2203      	movs	r2, #3
 8003246:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	4413      	add	r3, r2
 8003250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	0151      	lsls	r1, r2, #5
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	440a      	add	r2, r1
 800325e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003262:	f043 0302 	orr.w	r3, r3, #2
 8003266:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	4611      	mov	r1, r2
 8003272:	4618      	mov	r0, r3
 8003274:	f002 fb3d 	bl	80058f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	015a      	lsls	r2, r3, #5
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	4413      	add	r3, r2
 8003280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003284:	461a      	mov	r2, r3
 8003286:	2310      	movs	r3, #16
 8003288:	6093      	str	r3, [r2, #8]
}
 800328a:	bf00      	nop
 800328c:	3718      	adds	r7, #24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b086      	sub	sp, #24
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
 800329a:	460b      	mov	r3, r1
 800329c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80032a8:	78fb      	ldrb	r3, [r7, #3]
 80032aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	015a      	lsls	r2, r3, #5
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 0304 	and.w	r3, r3, #4
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d119      	bne.n	80032f6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	015a      	lsls	r2, r3, #5
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4413      	add	r3, r2
 80032ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ce:	461a      	mov	r2, r3
 80032d0:	2304      	movs	r3, #4
 80032d2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	0151      	lsls	r1, r2, #5
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	440a      	add	r2, r1
 80032ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032ee:	f043 0302 	orr.w	r3, r3, #2
 80032f2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80032f4:	e33e      	b.n	8003974 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	015a      	lsls	r2, r3, #5
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 0320 	and.w	r3, r3, #32
 8003308:	2b20      	cmp	r3, #32
 800330a:	d141      	bne.n	8003390 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4413      	add	r3, r2
 8003314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003318:	461a      	mov	r2, r3
 800331a:	2320      	movs	r3, #32
 800331c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	440b      	add	r3, r1
 800332c:	333d      	adds	r3, #61	; 0x3d
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b01      	cmp	r3, #1
 8003332:	f040 831f 	bne.w	8003974 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4613      	mov	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	440b      	add	r3, r1
 8003344:	333d      	adds	r3, #61	; 0x3d
 8003346:	2200      	movs	r2, #0
 8003348:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	4613      	mov	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	440b      	add	r3, r1
 8003358:	335c      	adds	r3, #92	; 0x5c
 800335a:	2202      	movs	r2, #2
 800335c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	015a      	lsls	r2, r3, #5
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	4413      	add	r3, r2
 8003366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	0151      	lsls	r1, r2, #5
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	440a      	add	r2, r1
 8003374:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003378:	f043 0302 	orr.w	r3, r3, #2
 800337c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	b2d2      	uxtb	r2, r2
 8003386:	4611      	mov	r1, r2
 8003388:	4618      	mov	r0, r3
 800338a:	f002 fab2 	bl	80058f2 <USB_HC_Halt>
}
 800338e:	e2f1      	b.n	8003974 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	4413      	add	r3, r2
 8003398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a2:	2b40      	cmp	r3, #64	; 0x40
 80033a4:	d13f      	bne.n	8003426 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4613      	mov	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	440b      	add	r3, r1
 80033b4:	335d      	adds	r3, #93	; 0x5d
 80033b6:	2204      	movs	r2, #4
 80033b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	4613      	mov	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	440b      	add	r3, r1
 80033c8:	333d      	adds	r3, #61	; 0x3d
 80033ca:	2201      	movs	r2, #1
 80033cc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4613      	mov	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	440b      	add	r3, r1
 80033dc:	3358      	adds	r3, #88	; 0x58
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	015a      	lsls	r2, r3, #5
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	0151      	lsls	r1, r2, #5
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	440a      	add	r2, r1
 80033f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033fc:	f043 0302 	orr.w	r3, r3, #2
 8003400:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	4611      	mov	r1, r2
 800340c:	4618      	mov	r0, r3
 800340e:	f002 fa70 	bl	80058f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	015a      	lsls	r2, r3, #5
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	4413      	add	r3, r2
 800341a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800341e:	461a      	mov	r2, r3
 8003420:	2340      	movs	r3, #64	; 0x40
 8003422:	6093      	str	r3, [r2, #8]
}
 8003424:	e2a6      	b.n	8003974 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	015a      	lsls	r2, r3, #5
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	4413      	add	r3, r2
 800342e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800343c:	d122      	bne.n	8003484 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	015a      	lsls	r2, r3, #5
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	4413      	add	r3, r2
 8003446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	0151      	lsls	r1, r2, #5
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	440a      	add	r2, r1
 8003454:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003458:	f043 0302 	orr.w	r3, r3, #2
 800345c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	4611      	mov	r1, r2
 8003468:	4618      	mov	r0, r3
 800346a:	f002 fa42 	bl	80058f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	015a      	lsls	r2, r3, #5
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	4413      	add	r3, r2
 8003476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800347a:	461a      	mov	r2, r3
 800347c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003480:	6093      	str	r3, [r2, #8]
}
 8003482:	e277      	b.n	8003974 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	015a      	lsls	r2, r3, #5
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	4413      	add	r3, r2
 800348c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b01      	cmp	r3, #1
 8003498:	d135      	bne.n	8003506 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	4613      	mov	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	440b      	add	r3, r1
 80034a8:	3358      	adds	r3, #88	; 0x58
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	015a      	lsls	r2, r3, #5
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	4413      	add	r3, r2
 80034b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	0151      	lsls	r1, r2, #5
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	440a      	add	r2, r1
 80034c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034c8:	f043 0302 	orr.w	r3, r3, #2
 80034cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	4611      	mov	r1, r2
 80034d8:	4618      	mov	r0, r3
 80034da:	f002 fa0a 	bl	80058f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	015a      	lsls	r2, r3, #5
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	4413      	add	r3, r2
 80034e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ea:	461a      	mov	r2, r3
 80034ec:	2301      	movs	r3, #1
 80034ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	440b      	add	r3, r1
 80034fe:	335d      	adds	r3, #93	; 0x5d
 8003500:	2201      	movs	r2, #1
 8003502:	701a      	strb	r2, [r3, #0]
}
 8003504:	e236      	b.n	8003974 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	015a      	lsls	r2, r3, #5
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	4413      	add	r3, r2
 800350e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 0308 	and.w	r3, r3, #8
 8003518:	2b08      	cmp	r3, #8
 800351a:	d12b      	bne.n	8003574 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	4413      	add	r3, r2
 8003524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003528:	461a      	mov	r2, r3
 800352a:	2308      	movs	r3, #8
 800352c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	015a      	lsls	r2, r3, #5
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4413      	add	r3, r2
 8003536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	0151      	lsls	r1, r2, #5
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	440a      	add	r2, r1
 8003544:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003548:	f043 0302 	orr.w	r3, r3, #2
 800354c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	4611      	mov	r1, r2
 8003558:	4618      	mov	r0, r3
 800355a:	f002 f9ca 	bl	80058f2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	4613      	mov	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	440b      	add	r3, r1
 800356c:	335d      	adds	r3, #93	; 0x5d
 800356e:	2205      	movs	r2, #5
 8003570:	701a      	strb	r2, [r3, #0]
}
 8003572:	e1ff      	b.n	8003974 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4413      	add	r3, r2
 800357c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 0310 	and.w	r3, r3, #16
 8003586:	2b10      	cmp	r3, #16
 8003588:	d155      	bne.n	8003636 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	4613      	mov	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4413      	add	r3, r2
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	440b      	add	r3, r1
 8003598:	3358      	adds	r3, #88	; 0x58
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	440b      	add	r3, r1
 80035ac:	335d      	adds	r3, #93	; 0x5d
 80035ae:	2203      	movs	r2, #3
 80035b0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	4613      	mov	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	440b      	add	r3, r1
 80035c0:	333d      	adds	r3, #61	; 0x3d
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d114      	bne.n	80035f2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	4613      	mov	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	440b      	add	r3, r1
 80035d6:	333c      	adds	r3, #60	; 0x3c
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d109      	bne.n	80035f2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	4613      	mov	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	440b      	add	r3, r1
 80035ec:	333d      	adds	r3, #61	; 0x3d
 80035ee:	2201      	movs	r2, #1
 80035f0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	015a      	lsls	r2, r3, #5
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4413      	add	r3, r2
 80035fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	0151      	lsls	r1, r2, #5
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	440a      	add	r2, r1
 8003608:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800360c:	f043 0302 	orr.w	r3, r3, #2
 8003610:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	4611      	mov	r1, r2
 800361c:	4618      	mov	r0, r3
 800361e:	f002 f968 	bl	80058f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	015a      	lsls	r2, r3, #5
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	4413      	add	r3, r2
 800362a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800362e:	461a      	mov	r2, r3
 8003630:	2310      	movs	r3, #16
 8003632:	6093      	str	r3, [r2, #8]
}
 8003634:	e19e      	b.n	8003974 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	015a      	lsls	r2, r3, #5
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	4413      	add	r3, r2
 800363e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003648:	2b80      	cmp	r3, #128	; 0x80
 800364a:	d12b      	bne.n	80036a4 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	4413      	add	r3, r2
 8003654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	0151      	lsls	r1, r2, #5
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	440a      	add	r2, r1
 8003662:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003666:	f043 0302 	orr.w	r3, r3, #2
 800366a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	4611      	mov	r1, r2
 8003676:	4618      	mov	r0, r3
 8003678:	f002 f93b 	bl	80058f2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	4613      	mov	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	440b      	add	r3, r1
 800368a:	335d      	adds	r3, #93	; 0x5d
 800368c:	2206      	movs	r2, #6
 800368e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	015a      	lsls	r2, r3, #5
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	4413      	add	r3, r2
 8003698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800369c:	461a      	mov	r2, r3
 800369e:	2380      	movs	r3, #128	; 0x80
 80036a0:	6093      	str	r3, [r2, #8]
}
 80036a2:	e167      	b.n	8003974 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	015a      	lsls	r2, r3, #5
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	4413      	add	r3, r2
 80036ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ba:	d135      	bne.n	8003728 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	0151      	lsls	r1, r2, #5
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	440a      	add	r2, r1
 80036d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036d6:	f043 0302 	orr.w	r3, r3, #2
 80036da:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	4611      	mov	r1, r2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f002 f903 	bl	80058f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f8:	461a      	mov	r2, r3
 80036fa:	2310      	movs	r3, #16
 80036fc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	015a      	lsls	r2, r3, #5
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	4413      	add	r3, r2
 8003706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800370a:	461a      	mov	r2, r3
 800370c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003710:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	4613      	mov	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	440b      	add	r3, r1
 8003720:	335d      	adds	r3, #93	; 0x5d
 8003722:	2208      	movs	r2, #8
 8003724:	701a      	strb	r2, [r3, #0]
}
 8003726:	e125      	b.n	8003974 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	4413      	add	r3, r2
 8003730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b02      	cmp	r3, #2
 800373c:	f040 811a 	bne.w	8003974 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	015a      	lsls	r2, r3, #5
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	4413      	add	r3, r2
 8003748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	0151      	lsls	r1, r2, #5
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	440a      	add	r2, r1
 8003756:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800375a:	f023 0302 	bic.w	r3, r3, #2
 800375e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4613      	mov	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	440b      	add	r3, r1
 800376e:	335d      	adds	r3, #93	; 0x5d
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d137      	bne.n	80037e6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	440b      	add	r3, r1
 8003784:	335c      	adds	r3, #92	; 0x5c
 8003786:	2201      	movs	r2, #1
 8003788:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4613      	mov	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	440b      	add	r3, r1
 8003798:	333f      	adds	r3, #63	; 0x3f
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b02      	cmp	r3, #2
 800379e:	d00b      	beq.n	80037b8 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	4613      	mov	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	440b      	add	r3, r1
 80037ae:	333f      	adds	r3, #63	; 0x3f
 80037b0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80037b2:	2b03      	cmp	r3, #3
 80037b4:	f040 80c5 	bne.w	8003942 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	440b      	add	r3, r1
 80037c6:	3351      	adds	r3, #81	; 0x51
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	f083 0301 	eor.w	r3, r3, #1
 80037ce:	b2d8      	uxtb	r0, r3
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	4613      	mov	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	440b      	add	r3, r1
 80037de:	3351      	adds	r3, #81	; 0x51
 80037e0:	4602      	mov	r2, r0
 80037e2:	701a      	strb	r2, [r3, #0]
 80037e4:	e0ad      	b.n	8003942 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	4613      	mov	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	440b      	add	r3, r1
 80037f4:	335d      	adds	r3, #93	; 0x5d
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b03      	cmp	r3, #3
 80037fa:	d10a      	bne.n	8003812 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4613      	mov	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	440b      	add	r3, r1
 800380a:	335c      	adds	r3, #92	; 0x5c
 800380c:	2202      	movs	r2, #2
 800380e:	701a      	strb	r2, [r3, #0]
 8003810:	e097      	b.n	8003942 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	4613      	mov	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	440b      	add	r3, r1
 8003820:	335d      	adds	r3, #93	; 0x5d
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b04      	cmp	r3, #4
 8003826:	d10a      	bne.n	800383e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	4613      	mov	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	440b      	add	r3, r1
 8003836:	335c      	adds	r3, #92	; 0x5c
 8003838:	2202      	movs	r2, #2
 800383a:	701a      	strb	r2, [r3, #0]
 800383c:	e081      	b.n	8003942 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	440b      	add	r3, r1
 800384c:	335d      	adds	r3, #93	; 0x5d
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2b05      	cmp	r3, #5
 8003852:	d10a      	bne.n	800386a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	4613      	mov	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	440b      	add	r3, r1
 8003862:	335c      	adds	r3, #92	; 0x5c
 8003864:	2205      	movs	r2, #5
 8003866:	701a      	strb	r2, [r3, #0]
 8003868:	e06b      	b.n	8003942 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	440b      	add	r3, r1
 8003878:	335d      	adds	r3, #93	; 0x5d
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b06      	cmp	r3, #6
 800387e:	d00a      	beq.n	8003896 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	4613      	mov	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	440b      	add	r3, r1
 800388e:	335d      	adds	r3, #93	; 0x5d
 8003890:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003892:	2b08      	cmp	r3, #8
 8003894:	d155      	bne.n	8003942 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4613      	mov	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	440b      	add	r3, r1
 80038a4:	3358      	adds	r3, #88	; 0x58
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	1c59      	adds	r1, r3, #1
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4613      	mov	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	4403      	add	r3, r0
 80038b8:	3358      	adds	r3, #88	; 0x58
 80038ba:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80038bc:	6879      	ldr	r1, [r7, #4]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	4613      	mov	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	440b      	add	r3, r1
 80038ca:	3358      	adds	r3, #88	; 0x58
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b03      	cmp	r3, #3
 80038d0:	d914      	bls.n	80038fc <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	4613      	mov	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	440b      	add	r3, r1
 80038e0:	3358      	adds	r3, #88	; 0x58
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	440b      	add	r3, r1
 80038f4:	335c      	adds	r3, #92	; 0x5c
 80038f6:	2204      	movs	r2, #4
 80038f8:	701a      	strb	r2, [r3, #0]
 80038fa:	e009      	b.n	8003910 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80038fc:	6879      	ldr	r1, [r7, #4]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	440b      	add	r3, r1
 800390a:	335c      	adds	r3, #92	; 0x5c
 800390c:	2202      	movs	r2, #2
 800390e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	4413      	add	r3, r2
 8003918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003926:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800392e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	4413      	add	r3, r2
 8003938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800393c:	461a      	mov	r2, r3
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	4413      	add	r3, r2
 800394a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800394e:	461a      	mov	r2, r3
 8003950:	2302      	movs	r3, #2
 8003952:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	b2d8      	uxtb	r0, r3
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4613      	mov	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	440b      	add	r3, r1
 8003966:	335c      	adds	r3, #92	; 0x5c
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	4601      	mov	r1, r0
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f00a f8fc 	bl	800db6c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003974:	bf00      	nop
 8003976:	3718      	adds	r7, #24
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08a      	sub	sp, #40	; 0x28
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	f003 030f 	and.w	r3, r3, #15
 800399c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	0c5b      	lsrs	r3, r3, #17
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	091b      	lsrs	r3, r3, #4
 80039ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039b0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d003      	beq.n	80039c0 <HCD_RXQLVL_IRQHandler+0x44>
 80039b8:	2b05      	cmp	r3, #5
 80039ba:	f000 8082 	beq.w	8003ac2 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80039be:	e083      	b.n	8003ac8 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d07f      	beq.n	8003ac6 <HCD_RXQLVL_IRQHandler+0x14a>
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4613      	mov	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	440b      	add	r3, r1
 80039d4:	3344      	adds	r3, #68	; 0x44
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d074      	beq.n	8003ac6 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6818      	ldr	r0, [r3, #0]
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	440b      	add	r3, r1
 80039ee:	3344      	adds	r3, #68	; 0x44
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	b292      	uxth	r2, r2
 80039f6:	4619      	mov	r1, r3
 80039f8:	f001 fb19 	bl	800502e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	440b      	add	r3, r1
 8003a0a:	3344      	adds	r3, #68	; 0x44
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	18d1      	adds	r1, r2, r3
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4613      	mov	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	4403      	add	r3, r0
 8003a20:	3344      	adds	r3, #68	; 0x44
 8003a22:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	440b      	add	r3, r1
 8003a32:	334c      	adds	r3, #76	; 0x4c
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	18d1      	adds	r1, r2, r3
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	4403      	add	r3, r0
 8003a48:	334c      	adds	r3, #76	; 0x4c
 8003a4a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a58:	691a      	ldr	r2, [r3, #16]
 8003a5a:	4b1d      	ldr	r3, [pc, #116]	; (8003ad0 <HCD_RXQLVL_IRQHandler+0x154>)
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d031      	beq.n	8003ac6 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a78:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a80:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a8e:	461a      	mov	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	440b      	add	r3, r1
 8003aa2:	3350      	adds	r3, #80	; 0x50
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	f083 0301 	eor.w	r3, r3, #1
 8003aaa:	b2d8      	uxtb	r0, r3
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	440b      	add	r3, r1
 8003aba:	3350      	adds	r3, #80	; 0x50
 8003abc:	4602      	mov	r2, r0
 8003abe:	701a      	strb	r2, [r3, #0]
      break;
 8003ac0:	e001      	b.n	8003ac6 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003ac2:	bf00      	nop
 8003ac4:	e000      	b.n	8003ac8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003ac6:	bf00      	nop
  }
}
 8003ac8:	bf00      	nop
 8003aca:	3728      	adds	r7, #40	; 0x28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	1ff80000 	.word	0x1ff80000

08003ad4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003b00:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d10b      	bne.n	8003b24 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d102      	bne.n	8003b1c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f00a f80c 	bl	800db34 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f043 0302 	orr.w	r3, r3, #2
 8003b22:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b08      	cmp	r3, #8
 8003b2c:	d132      	bne.n	8003b94 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	f043 0308 	orr.w	r3, r3, #8
 8003b34:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d126      	bne.n	8003b8e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d113      	bne.n	8003b70 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003b4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b52:	d106      	bne.n	8003b62 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2102      	movs	r1, #2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f001 fba2 	bl	80052a4 <USB_InitFSLSPClkSel>
 8003b60:	e011      	b.n	8003b86 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2101      	movs	r1, #1
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f001 fb9b 	bl	80052a4 <USB_InitFSLSPClkSel>
 8003b6e:	e00a      	b.n	8003b86 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d106      	bne.n	8003b86 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b7e:	461a      	mov	r2, r3
 8003b80:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003b84:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f009 fffe 	bl	800db88 <HAL_HCD_PortEnabled_Callback>
 8003b8c:	e002      	b.n	8003b94 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f00a f808 	bl	800dba4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f003 0320 	and.w	r3, r3, #32
 8003b9a:	2b20      	cmp	r3, #32
 8003b9c:	d103      	bne.n	8003ba6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	f043 0320 	orr.w	r3, r3, #32
 8003ba4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003bac:	461a      	mov	r2, r3
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	6013      	str	r3, [r2, #0]
}
 8003bb2:	bf00      	nop
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
	...

08003bbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e25b      	b.n	8004086 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d075      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bda:	4ba3      	ldr	r3, [pc, #652]	; (8003e68 <HAL_RCC_OscConfig+0x2ac>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 030c 	and.w	r3, r3, #12
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d00c      	beq.n	8003c00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003be6:	4ba0      	ldr	r3, [pc, #640]	; (8003e68 <HAL_RCC_OscConfig+0x2ac>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d112      	bne.n	8003c18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bf2:	4b9d      	ldr	r3, [pc, #628]	; (8003e68 <HAL_RCC_OscConfig+0x2ac>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bfe:	d10b      	bne.n	8003c18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c00:	4b99      	ldr	r3, [pc, #612]	; (8003e68 <HAL_RCC_OscConfig+0x2ac>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d05b      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x108>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d157      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e236      	b.n	8004086 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c20:	d106      	bne.n	8003c30 <HAL_RCC_OscConfig+0x74>
 8003c22:	4b91      	ldr	r3, [pc, #580]	; (8003e68 <HAL_RCC_OscConfig+0x2ac>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a90      	ldr	r2, [pc, #576]	; (8003e68 <HAL_RCC_OscConfig+0x2ac>)
 8003c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	e01d      	b.n	8003c6c <HAL_RCC_OscConfig+0xb0>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c38:	d10c      	bne.n	8003c54 <HAL_RCC_OscConfig+0x98>
 8003c3a:	4b8b      	ldr	r3, [pc, #556]	; (8003e68 <HAL_RCC_OscConfig+0x2ac>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a8a      	ldr	r2, [pc, #552]	; (8003e68 <HAL_RCC_OscConfig+0x2ac>)
 8003c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	4b88      	ldr	r3, [pc, #544]	; (8003e68 <HAL_RCC_OscConfig+0x2ac>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a87      	ldr	r2, [pc, #540]	; (8003e68 <HAL_RCC_OscConfig+0x2ac>)
 8003c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	e00b      	b.n	8003c6c <HAL_RCC_OscConfig+0xb0>
 8003c54:	4b84      	ldr	r3, [pc, #528]	; (8003e68 <HAL_RCC_OscConfig+0x2ac>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a83      	ldr	r2, [pc, #524]	; (8003e68 <HAL_RCC_OscConfig+0x2ac>)
 8003c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	4b81      	ldr	r3, [pc, #516]	; (8003e68 <HAL_RCC_OscConfig+0x2ac>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a80      	ldr	r2, [pc, #512]	; (8003e68 <HAL_RCC_OscConfig+0x2ac>)
 8003c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d013      	beq.n	8003c9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c74:	f7fd ffbe 	bl	8001bf4 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c7c:	f7fd ffba 	bl	8001bf4 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b64      	cmp	r3, #100	; 0x64
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e1fb      	b.n	8004086 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8e:	4b76      	ldr	r3, [pc, #472]	; (8003e68 <HAL_RCC_OscConfig+0x2ac>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0f0      	beq.n	8003c7c <HAL_RCC_OscConfig+0xc0>
 8003c9a:	e014      	b.n	8003cc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c9c:	f7fd ffaa 	bl	8001bf4 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ca4:	f7fd ffa6 	bl	8001bf4 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b64      	cmp	r3, #100	; 0x64
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e1e7      	b.n	8004086 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cb6:	4b6c      	ldr	r3, [pc, #432]	; (8003e68 <HAL_RCC_OscConfig+0x2ac>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1f0      	bne.n	8003ca4 <HAL_RCC_OscConfig+0xe8>
 8003cc2:	e000      	b.n	8003cc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d063      	beq.n	8003d9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cd2:	4b65      	ldr	r3, [pc, #404]	; (8003e68 <HAL_RCC_OscConfig+0x2ac>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 030c 	and.w	r3, r3, #12
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00b      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cde:	4b62      	ldr	r3, [pc, #392]	; (8003e68 <HAL_RCC_OscConfig+0x2ac>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ce6:	2b08      	cmp	r3, #8
 8003ce8:	d11c      	bne.n	8003d24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cea:	4b5f      	ldr	r3, [pc, #380]	; (8003e68 <HAL_RCC_OscConfig+0x2ac>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d116      	bne.n	8003d24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cf6:	4b5c      	ldr	r3, [pc, #368]	; (8003e68 <HAL_RCC_OscConfig+0x2ac>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d005      	beq.n	8003d0e <HAL_RCC_OscConfig+0x152>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d001      	beq.n	8003d0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e1bb      	b.n	8004086 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d0e:	4b56      	ldr	r3, [pc, #344]	; (8003e68 <HAL_RCC_OscConfig+0x2ac>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	4952      	ldr	r1, [pc, #328]	; (8003e68 <HAL_RCC_OscConfig+0x2ac>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d22:	e03a      	b.n	8003d9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d020      	beq.n	8003d6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d2c:	4b4f      	ldr	r3, [pc, #316]	; (8003e6c <HAL_RCC_OscConfig+0x2b0>)
 8003d2e:	2201      	movs	r2, #1
 8003d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d32:	f7fd ff5f 	bl	8001bf4 <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d38:	e008      	b.n	8003d4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d3a:	f7fd ff5b 	bl	8001bf4 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e19c      	b.n	8004086 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d4c:	4b46      	ldr	r3, [pc, #280]	; (8003e68 <HAL_RCC_OscConfig+0x2ac>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0f0      	beq.n	8003d3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d58:	4b43      	ldr	r3, [pc, #268]	; (8003e68 <HAL_RCC_OscConfig+0x2ac>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	4940      	ldr	r1, [pc, #256]	; (8003e68 <HAL_RCC_OscConfig+0x2ac>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	600b      	str	r3, [r1, #0]
 8003d6c:	e015      	b.n	8003d9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d6e:	4b3f      	ldr	r3, [pc, #252]	; (8003e6c <HAL_RCC_OscConfig+0x2b0>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d74:	f7fd ff3e 	bl	8001bf4 <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d7c:	f7fd ff3a 	bl	8001bf4 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e17b      	b.n	8004086 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d8e:	4b36      	ldr	r3, [pc, #216]	; (8003e68 <HAL_RCC_OscConfig+0x2ac>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1f0      	bne.n	8003d7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d030      	beq.n	8003e08 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d016      	beq.n	8003ddc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dae:	4b30      	ldr	r3, [pc, #192]	; (8003e70 <HAL_RCC_OscConfig+0x2b4>)
 8003db0:	2201      	movs	r2, #1
 8003db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db4:	f7fd ff1e 	bl	8001bf4 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dbc:	f7fd ff1a 	bl	8001bf4 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e15b      	b.n	8004086 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dce:	4b26      	ldr	r3, [pc, #152]	; (8003e68 <HAL_RCC_OscConfig+0x2ac>)
 8003dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0f0      	beq.n	8003dbc <HAL_RCC_OscConfig+0x200>
 8003dda:	e015      	b.n	8003e08 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ddc:	4b24      	ldr	r3, [pc, #144]	; (8003e70 <HAL_RCC_OscConfig+0x2b4>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de2:	f7fd ff07 	bl	8001bf4 <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de8:	e008      	b.n	8003dfc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dea:	f7fd ff03 	bl	8001bf4 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e144      	b.n	8004086 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dfc:	4b1a      	ldr	r3, [pc, #104]	; (8003e68 <HAL_RCC_OscConfig+0x2ac>)
 8003dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1f0      	bne.n	8003dea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 80a0 	beq.w	8003f56 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e16:	2300      	movs	r3, #0
 8003e18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e1a:	4b13      	ldr	r3, [pc, #76]	; (8003e68 <HAL_RCC_OscConfig+0x2ac>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10f      	bne.n	8003e46 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e26:	2300      	movs	r3, #0
 8003e28:	60bb      	str	r3, [r7, #8]
 8003e2a:	4b0f      	ldr	r3, [pc, #60]	; (8003e68 <HAL_RCC_OscConfig+0x2ac>)
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	4a0e      	ldr	r2, [pc, #56]	; (8003e68 <HAL_RCC_OscConfig+0x2ac>)
 8003e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e34:	6413      	str	r3, [r2, #64]	; 0x40
 8003e36:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <HAL_RCC_OscConfig+0x2ac>)
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3e:	60bb      	str	r3, [r7, #8]
 8003e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e42:	2301      	movs	r3, #1
 8003e44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e46:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <HAL_RCC_OscConfig+0x2b8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d121      	bne.n	8003e96 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e52:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <HAL_RCC_OscConfig+0x2b8>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a07      	ldr	r2, [pc, #28]	; (8003e74 <HAL_RCC_OscConfig+0x2b8>)
 8003e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e5e:	f7fd fec9 	bl	8001bf4 <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e64:	e011      	b.n	8003e8a <HAL_RCC_OscConfig+0x2ce>
 8003e66:	bf00      	nop
 8003e68:	40023800 	.word	0x40023800
 8003e6c:	42470000 	.word	0x42470000
 8003e70:	42470e80 	.word	0x42470e80
 8003e74:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e78:	f7fd febc 	bl	8001bf4 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e0fd      	b.n	8004086 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8a:	4b81      	ldr	r3, [pc, #516]	; (8004090 <HAL_RCC_OscConfig+0x4d4>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0f0      	beq.n	8003e78 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d106      	bne.n	8003eac <HAL_RCC_OscConfig+0x2f0>
 8003e9e:	4b7d      	ldr	r3, [pc, #500]	; (8004094 <HAL_RCC_OscConfig+0x4d8>)
 8003ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea2:	4a7c      	ldr	r2, [pc, #496]	; (8004094 <HAL_RCC_OscConfig+0x4d8>)
 8003ea4:	f043 0301 	orr.w	r3, r3, #1
 8003ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eaa:	e01c      	b.n	8003ee6 <HAL_RCC_OscConfig+0x32a>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	2b05      	cmp	r3, #5
 8003eb2:	d10c      	bne.n	8003ece <HAL_RCC_OscConfig+0x312>
 8003eb4:	4b77      	ldr	r3, [pc, #476]	; (8004094 <HAL_RCC_OscConfig+0x4d8>)
 8003eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb8:	4a76      	ldr	r2, [pc, #472]	; (8004094 <HAL_RCC_OscConfig+0x4d8>)
 8003eba:	f043 0304 	orr.w	r3, r3, #4
 8003ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec0:	4b74      	ldr	r3, [pc, #464]	; (8004094 <HAL_RCC_OscConfig+0x4d8>)
 8003ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec4:	4a73      	ldr	r2, [pc, #460]	; (8004094 <HAL_RCC_OscConfig+0x4d8>)
 8003ec6:	f043 0301 	orr.w	r3, r3, #1
 8003eca:	6713      	str	r3, [r2, #112]	; 0x70
 8003ecc:	e00b      	b.n	8003ee6 <HAL_RCC_OscConfig+0x32a>
 8003ece:	4b71      	ldr	r3, [pc, #452]	; (8004094 <HAL_RCC_OscConfig+0x4d8>)
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed2:	4a70      	ldr	r2, [pc, #448]	; (8004094 <HAL_RCC_OscConfig+0x4d8>)
 8003ed4:	f023 0301 	bic.w	r3, r3, #1
 8003ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eda:	4b6e      	ldr	r3, [pc, #440]	; (8004094 <HAL_RCC_OscConfig+0x4d8>)
 8003edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ede:	4a6d      	ldr	r2, [pc, #436]	; (8004094 <HAL_RCC_OscConfig+0x4d8>)
 8003ee0:	f023 0304 	bic.w	r3, r3, #4
 8003ee4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d015      	beq.n	8003f1a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eee:	f7fd fe81 	bl	8001bf4 <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef4:	e00a      	b.n	8003f0c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ef6:	f7fd fe7d 	bl	8001bf4 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e0bc      	b.n	8004086 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0c:	4b61      	ldr	r3, [pc, #388]	; (8004094 <HAL_RCC_OscConfig+0x4d8>)
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0ee      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x33a>
 8003f18:	e014      	b.n	8003f44 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f1a:	f7fd fe6b 	bl	8001bf4 <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f20:	e00a      	b.n	8003f38 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f22:	f7fd fe67 	bl	8001bf4 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e0a6      	b.n	8004086 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f38:	4b56      	ldr	r3, [pc, #344]	; (8004094 <HAL_RCC_OscConfig+0x4d8>)
 8003f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1ee      	bne.n	8003f22 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f44:	7dfb      	ldrb	r3, [r7, #23]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d105      	bne.n	8003f56 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f4a:	4b52      	ldr	r3, [pc, #328]	; (8004094 <HAL_RCC_OscConfig+0x4d8>)
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	4a51      	ldr	r2, [pc, #324]	; (8004094 <HAL_RCC_OscConfig+0x4d8>)
 8003f50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 8092 	beq.w	8004084 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f60:	4b4c      	ldr	r3, [pc, #304]	; (8004094 <HAL_RCC_OscConfig+0x4d8>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f003 030c 	and.w	r3, r3, #12
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d05c      	beq.n	8004026 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d141      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f74:	4b48      	ldr	r3, [pc, #288]	; (8004098 <HAL_RCC_OscConfig+0x4dc>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7a:	f7fd fe3b 	bl	8001bf4 <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f80:	e008      	b.n	8003f94 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f82:	f7fd fe37 	bl	8001bf4 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e078      	b.n	8004086 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f94:	4b3f      	ldr	r3, [pc, #252]	; (8004094 <HAL_RCC_OscConfig+0x4d8>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1f0      	bne.n	8003f82 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	69da      	ldr	r2, [r3, #28]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fae:	019b      	lsls	r3, r3, #6
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb6:	085b      	lsrs	r3, r3, #1
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	041b      	lsls	r3, r3, #16
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc2:	061b      	lsls	r3, r3, #24
 8003fc4:	4933      	ldr	r1, [pc, #204]	; (8004094 <HAL_RCC_OscConfig+0x4d8>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fca:	4b33      	ldr	r3, [pc, #204]	; (8004098 <HAL_RCC_OscConfig+0x4dc>)
 8003fcc:	2201      	movs	r2, #1
 8003fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd0:	f7fd fe10 	bl	8001bf4 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd8:	f7fd fe0c 	bl	8001bf4 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e04d      	b.n	8004086 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fea:	4b2a      	ldr	r3, [pc, #168]	; (8004094 <HAL_RCC_OscConfig+0x4d8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0f0      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x41c>
 8003ff6:	e045      	b.n	8004084 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff8:	4b27      	ldr	r3, [pc, #156]	; (8004098 <HAL_RCC_OscConfig+0x4dc>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffe:	f7fd fdf9 	bl	8001bf4 <HAL_GetTick>
 8004002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004004:	e008      	b.n	8004018 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004006:	f7fd fdf5 	bl	8001bf4 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e036      	b.n	8004086 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004018:	4b1e      	ldr	r3, [pc, #120]	; (8004094 <HAL_RCC_OscConfig+0x4d8>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1f0      	bne.n	8004006 <HAL_RCC_OscConfig+0x44a>
 8004024:	e02e      	b.n	8004084 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d101      	bne.n	8004032 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e029      	b.n	8004086 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004032:	4b18      	ldr	r3, [pc, #96]	; (8004094 <HAL_RCC_OscConfig+0x4d8>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	429a      	cmp	r2, r3
 8004044:	d11c      	bne.n	8004080 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004050:	429a      	cmp	r2, r3
 8004052:	d115      	bne.n	8004080 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800405a:	4013      	ands	r3, r2
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004060:	4293      	cmp	r3, r2
 8004062:	d10d      	bne.n	8004080 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800406e:	429a      	cmp	r2, r3
 8004070:	d106      	bne.n	8004080 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800407c:	429a      	cmp	r2, r3
 800407e:	d001      	beq.n	8004084 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e000      	b.n	8004086 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3718      	adds	r7, #24
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40007000 	.word	0x40007000
 8004094:	40023800 	.word	0x40023800
 8004098:	42470060 	.word	0x42470060

0800409c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e0cc      	b.n	800424a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040b0:	4b68      	ldr	r3, [pc, #416]	; (8004254 <HAL_RCC_ClockConfig+0x1b8>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 030f 	and.w	r3, r3, #15
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d90c      	bls.n	80040d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040be:	4b65      	ldr	r3, [pc, #404]	; (8004254 <HAL_RCC_ClockConfig+0x1b8>)
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c6:	4b63      	ldr	r3, [pc, #396]	; (8004254 <HAL_RCC_ClockConfig+0x1b8>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d001      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e0b8      	b.n	800424a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d020      	beq.n	8004126 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040f0:	4b59      	ldr	r3, [pc, #356]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	4a58      	ldr	r2, [pc, #352]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0308 	and.w	r3, r3, #8
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004108:	4b53      	ldr	r3, [pc, #332]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	4a52      	ldr	r2, [pc, #328]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004112:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004114:	4b50      	ldr	r3, [pc, #320]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	494d      	ldr	r1, [pc, #308]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 8004122:	4313      	orrs	r3, r2
 8004124:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d044      	beq.n	80041bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d107      	bne.n	800414a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413a:	4b47      	ldr	r3, [pc, #284]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d119      	bne.n	800417a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e07f      	b.n	800424a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b02      	cmp	r3, #2
 8004150:	d003      	beq.n	800415a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004156:	2b03      	cmp	r3, #3
 8004158:	d107      	bne.n	800416a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800415a:	4b3f      	ldr	r3, [pc, #252]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d109      	bne.n	800417a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e06f      	b.n	800424a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800416a:	4b3b      	ldr	r3, [pc, #236]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e067      	b.n	800424a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800417a:	4b37      	ldr	r3, [pc, #220]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f023 0203 	bic.w	r2, r3, #3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	4934      	ldr	r1, [pc, #208]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 8004188:	4313      	orrs	r3, r2
 800418a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800418c:	f7fd fd32 	bl	8001bf4 <HAL_GetTick>
 8004190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004192:	e00a      	b.n	80041aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004194:	f7fd fd2e 	bl	8001bf4 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e04f      	b.n	800424a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041aa:	4b2b      	ldr	r3, [pc, #172]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 020c 	and.w	r2, r3, #12
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d1eb      	bne.n	8004194 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041bc:	4b25      	ldr	r3, [pc, #148]	; (8004254 <HAL_RCC_ClockConfig+0x1b8>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 030f 	and.w	r3, r3, #15
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d20c      	bcs.n	80041e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ca:	4b22      	ldr	r3, [pc, #136]	; (8004254 <HAL_RCC_ClockConfig+0x1b8>)
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d2:	4b20      	ldr	r3, [pc, #128]	; (8004254 <HAL_RCC_ClockConfig+0x1b8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d001      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e032      	b.n	800424a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d008      	beq.n	8004202 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041f0:	4b19      	ldr	r3, [pc, #100]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	4916      	ldr	r1, [pc, #88]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b00      	cmp	r3, #0
 800420c:	d009      	beq.n	8004222 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800420e:	4b12      	ldr	r3, [pc, #72]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	490e      	ldr	r1, [pc, #56]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 800421e:	4313      	orrs	r3, r2
 8004220:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004222:	f000 f821 	bl	8004268 <HAL_RCC_GetSysClockFreq>
 8004226:	4601      	mov	r1, r0
 8004228:	4b0b      	ldr	r3, [pc, #44]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	091b      	lsrs	r3, r3, #4
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	4a0a      	ldr	r2, [pc, #40]	; (800425c <HAL_RCC_ClockConfig+0x1c0>)
 8004234:	5cd3      	ldrb	r3, [r2, r3]
 8004236:	fa21 f303 	lsr.w	r3, r1, r3
 800423a:	4a09      	ldr	r2, [pc, #36]	; (8004260 <HAL_RCC_ClockConfig+0x1c4>)
 800423c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800423e:	4b09      	ldr	r3, [pc, #36]	; (8004264 <HAL_RCC_ClockConfig+0x1c8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f7fd fc92 	bl	8001b6c <HAL_InitTick>

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40023c00 	.word	0x40023c00
 8004258:	40023800 	.word	0x40023800
 800425c:	0800ede0 	.word	0x0800ede0
 8004260:	20000000 	.word	0x20000000
 8004264:	20000004 	.word	0x20000004

08004268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	607b      	str	r3, [r7, #4]
 8004272:	2300      	movs	r3, #0
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	2300      	movs	r3, #0
 8004278:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800427e:	4b63      	ldr	r3, [pc, #396]	; (800440c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 030c 	and.w	r3, r3, #12
 8004286:	2b04      	cmp	r3, #4
 8004288:	d007      	beq.n	800429a <HAL_RCC_GetSysClockFreq+0x32>
 800428a:	2b08      	cmp	r3, #8
 800428c:	d008      	beq.n	80042a0 <HAL_RCC_GetSysClockFreq+0x38>
 800428e:	2b00      	cmp	r3, #0
 8004290:	f040 80b4 	bne.w	80043fc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004294:	4b5e      	ldr	r3, [pc, #376]	; (8004410 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004296:	60bb      	str	r3, [r7, #8]
       break;
 8004298:	e0b3      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800429a:	4b5e      	ldr	r3, [pc, #376]	; (8004414 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800429c:	60bb      	str	r3, [r7, #8]
      break;
 800429e:	e0b0      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042a0:	4b5a      	ldr	r3, [pc, #360]	; (800440c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042aa:	4b58      	ldr	r3, [pc, #352]	; (800440c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d04a      	beq.n	800434c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042b6:	4b55      	ldr	r3, [pc, #340]	; (800440c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	099b      	lsrs	r3, r3, #6
 80042bc:	f04f 0400 	mov.w	r4, #0
 80042c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	ea03 0501 	and.w	r5, r3, r1
 80042cc:	ea04 0602 	and.w	r6, r4, r2
 80042d0:	4629      	mov	r1, r5
 80042d2:	4632      	mov	r2, r6
 80042d4:	f04f 0300 	mov.w	r3, #0
 80042d8:	f04f 0400 	mov.w	r4, #0
 80042dc:	0154      	lsls	r4, r2, #5
 80042de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042e2:	014b      	lsls	r3, r1, #5
 80042e4:	4619      	mov	r1, r3
 80042e6:	4622      	mov	r2, r4
 80042e8:	1b49      	subs	r1, r1, r5
 80042ea:	eb62 0206 	sbc.w	r2, r2, r6
 80042ee:	f04f 0300 	mov.w	r3, #0
 80042f2:	f04f 0400 	mov.w	r4, #0
 80042f6:	0194      	lsls	r4, r2, #6
 80042f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042fc:	018b      	lsls	r3, r1, #6
 80042fe:	1a5b      	subs	r3, r3, r1
 8004300:	eb64 0402 	sbc.w	r4, r4, r2
 8004304:	f04f 0100 	mov.w	r1, #0
 8004308:	f04f 0200 	mov.w	r2, #0
 800430c:	00e2      	lsls	r2, r4, #3
 800430e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004312:	00d9      	lsls	r1, r3, #3
 8004314:	460b      	mov	r3, r1
 8004316:	4614      	mov	r4, r2
 8004318:	195b      	adds	r3, r3, r5
 800431a:	eb44 0406 	adc.w	r4, r4, r6
 800431e:	f04f 0100 	mov.w	r1, #0
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	0262      	lsls	r2, r4, #9
 8004328:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800432c:	0259      	lsls	r1, r3, #9
 800432e:	460b      	mov	r3, r1
 8004330:	4614      	mov	r4, r2
 8004332:	4618      	mov	r0, r3
 8004334:	4621      	mov	r1, r4
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f04f 0400 	mov.w	r4, #0
 800433c:	461a      	mov	r2, r3
 800433e:	4623      	mov	r3, r4
 8004340:	f7fc fba4 	bl	8000a8c <__aeabi_uldivmod>
 8004344:	4603      	mov	r3, r0
 8004346:	460c      	mov	r4, r1
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	e049      	b.n	80043e0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800434c:	4b2f      	ldr	r3, [pc, #188]	; (800440c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	099b      	lsrs	r3, r3, #6
 8004352:	f04f 0400 	mov.w	r4, #0
 8004356:	f240 11ff 	movw	r1, #511	; 0x1ff
 800435a:	f04f 0200 	mov.w	r2, #0
 800435e:	ea03 0501 	and.w	r5, r3, r1
 8004362:	ea04 0602 	and.w	r6, r4, r2
 8004366:	4629      	mov	r1, r5
 8004368:	4632      	mov	r2, r6
 800436a:	f04f 0300 	mov.w	r3, #0
 800436e:	f04f 0400 	mov.w	r4, #0
 8004372:	0154      	lsls	r4, r2, #5
 8004374:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004378:	014b      	lsls	r3, r1, #5
 800437a:	4619      	mov	r1, r3
 800437c:	4622      	mov	r2, r4
 800437e:	1b49      	subs	r1, r1, r5
 8004380:	eb62 0206 	sbc.w	r2, r2, r6
 8004384:	f04f 0300 	mov.w	r3, #0
 8004388:	f04f 0400 	mov.w	r4, #0
 800438c:	0194      	lsls	r4, r2, #6
 800438e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004392:	018b      	lsls	r3, r1, #6
 8004394:	1a5b      	subs	r3, r3, r1
 8004396:	eb64 0402 	sbc.w	r4, r4, r2
 800439a:	f04f 0100 	mov.w	r1, #0
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	00e2      	lsls	r2, r4, #3
 80043a4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80043a8:	00d9      	lsls	r1, r3, #3
 80043aa:	460b      	mov	r3, r1
 80043ac:	4614      	mov	r4, r2
 80043ae:	195b      	adds	r3, r3, r5
 80043b0:	eb44 0406 	adc.w	r4, r4, r6
 80043b4:	f04f 0100 	mov.w	r1, #0
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	02a2      	lsls	r2, r4, #10
 80043be:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80043c2:	0299      	lsls	r1, r3, #10
 80043c4:	460b      	mov	r3, r1
 80043c6:	4614      	mov	r4, r2
 80043c8:	4618      	mov	r0, r3
 80043ca:	4621      	mov	r1, r4
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f04f 0400 	mov.w	r4, #0
 80043d2:	461a      	mov	r2, r3
 80043d4:	4623      	mov	r3, r4
 80043d6:	f7fc fb59 	bl	8000a8c <__aeabi_uldivmod>
 80043da:	4603      	mov	r3, r0
 80043dc:	460c      	mov	r4, r1
 80043de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043e0:	4b0a      	ldr	r3, [pc, #40]	; (800440c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	0c1b      	lsrs	r3, r3, #16
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	3301      	adds	r3, #1
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f8:	60bb      	str	r3, [r7, #8]
      break;
 80043fa:	e002      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043fc:	4b04      	ldr	r3, [pc, #16]	; (8004410 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80043fe:	60bb      	str	r3, [r7, #8]
      break;
 8004400:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004402:	68bb      	ldr	r3, [r7, #8]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800440c:	40023800 	.word	0x40023800
 8004410:	00f42400 	.word	0x00f42400
 8004414:	007a1200 	.word	0x007a1200

08004418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800441c:	4b03      	ldr	r3, [pc, #12]	; (800442c <HAL_RCC_GetHCLKFreq+0x14>)
 800441e:	681b      	ldr	r3, [r3, #0]
}
 8004420:	4618      	mov	r0, r3
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	20000000 	.word	0x20000000

08004430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004434:	f7ff fff0 	bl	8004418 <HAL_RCC_GetHCLKFreq>
 8004438:	4601      	mov	r1, r0
 800443a:	4b05      	ldr	r3, [pc, #20]	; (8004450 <HAL_RCC_GetPCLK1Freq+0x20>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	0a9b      	lsrs	r3, r3, #10
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	4a03      	ldr	r2, [pc, #12]	; (8004454 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004446:	5cd3      	ldrb	r3, [r2, r3]
 8004448:	fa21 f303 	lsr.w	r3, r1, r3
}
 800444c:	4618      	mov	r0, r3
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40023800 	.word	0x40023800
 8004454:	0800edf0 	.word	0x0800edf0

08004458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800445c:	f7ff ffdc 	bl	8004418 <HAL_RCC_GetHCLKFreq>
 8004460:	4601      	mov	r1, r0
 8004462:	4b05      	ldr	r3, [pc, #20]	; (8004478 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	0b5b      	lsrs	r3, r3, #13
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	4a03      	ldr	r2, [pc, #12]	; (800447c <HAL_RCC_GetPCLK2Freq+0x24>)
 800446e:	5cd3      	ldrb	r3, [r2, r3]
 8004470:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004474:	4618      	mov	r0, r3
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40023800 	.word	0x40023800
 800447c:	0800edf0 	.word	0x0800edf0

08004480 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e03f      	b.n	8004512 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d106      	bne.n	80044ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7fd fa52 	bl	8001950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2224      	movs	r2, #36	; 0x24
 80044b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68da      	ldr	r2, [r3, #12]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f90b 	bl	80046e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	691a      	ldr	r2, [r3, #16]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	695a      	ldr	r2, [r3, #20]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68da      	ldr	r2, [r3, #12]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2220      	movs	r2, #32
 8004504:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2220      	movs	r2, #32
 800450c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b088      	sub	sp, #32
 800451e:	af02      	add	r7, sp, #8
 8004520:	60f8      	str	r0, [r7, #12]
 8004522:	60b9      	str	r1, [r7, #8]
 8004524:	603b      	str	r3, [r7, #0]
 8004526:	4613      	mov	r3, r2
 8004528:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b20      	cmp	r3, #32
 8004538:	f040 8083 	bne.w	8004642 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <HAL_UART_Transmit+0x2e>
 8004542:	88fb      	ldrh	r3, [r7, #6]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e07b      	b.n	8004644 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <HAL_UART_Transmit+0x40>
 8004556:	2302      	movs	r3, #2
 8004558:	e074      	b.n	8004644 <HAL_UART_Transmit+0x12a>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2221      	movs	r2, #33	; 0x21
 800456c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004570:	f7fd fb40 	bl	8001bf4 <HAL_GetTick>
 8004574:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	88fa      	ldrh	r2, [r7, #6]
 800457a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	88fa      	ldrh	r2, [r7, #6]
 8004580:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800458a:	e042      	b.n	8004612 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004590:	b29b      	uxth	r3, r3
 8004592:	3b01      	subs	r3, #1
 8004594:	b29a      	uxth	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a2:	d122      	bne.n	80045ea <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	2200      	movs	r2, #0
 80045ac:	2180      	movs	r1, #128	; 0x80
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 f84c 	bl	800464c <UART_WaitOnFlagUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e042      	b.n	8004644 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	461a      	mov	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045d0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d103      	bne.n	80045e2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	3302      	adds	r3, #2
 80045de:	60bb      	str	r3, [r7, #8]
 80045e0:	e017      	b.n	8004612 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	3301      	adds	r3, #1
 80045e6:	60bb      	str	r3, [r7, #8]
 80045e8:	e013      	b.n	8004612 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2200      	movs	r2, #0
 80045f2:	2180      	movs	r1, #128	; 0x80
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 f829 	bl	800464c <UART_WaitOnFlagUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e01f      	b.n	8004644 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	1c5a      	adds	r2, r3, #1
 8004608:	60ba      	str	r2, [r7, #8]
 800460a:	781a      	ldrb	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004616:	b29b      	uxth	r3, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1b7      	bne.n	800458c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	2200      	movs	r2, #0
 8004624:	2140      	movs	r1, #64	; 0x40
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 f810 	bl	800464c <UART_WaitOnFlagUntilTimeout>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e006      	b.n	8004644 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	e000      	b.n	8004644 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004642:	2302      	movs	r3, #2
  }
}
 8004644:	4618      	mov	r0, r3
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	603b      	str	r3, [r7, #0]
 8004658:	4613      	mov	r3, r2
 800465a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800465c:	e02c      	b.n	80046b8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004664:	d028      	beq.n	80046b8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d007      	beq.n	800467c <UART_WaitOnFlagUntilTimeout+0x30>
 800466c:	f7fd fac2 	bl	8001bf4 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	429a      	cmp	r2, r3
 800467a:	d21d      	bcs.n	80046b8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68da      	ldr	r2, [r3, #12]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800468a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695a      	ldr	r2, [r3, #20]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0201 	bic.w	r2, r2, #1
 800469a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2220      	movs	r2, #32
 80046a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2220      	movs	r2, #32
 80046a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e00f      	b.n	80046d8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	4013      	ands	r3, r2
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	bf0c      	ite	eq
 80046c8:	2301      	moveq	r3, #1
 80046ca:	2300      	movne	r3, #0
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	461a      	mov	r2, r3
 80046d0:	79fb      	ldrb	r3, [r7, #7]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d0c3      	beq.n	800465e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e4:	b085      	sub	sp, #20
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	431a      	orrs	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	4313      	orrs	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004722:	f023 030c 	bic.w	r3, r3, #12
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6812      	ldr	r2, [r2, #0]
 800472a:	68f9      	ldr	r1, [r7, #12]
 800472c:	430b      	orrs	r3, r1
 800472e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800474e:	f040 818b 	bne.w	8004a68 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4ac1      	ldr	r2, [pc, #772]	; (8004a5c <UART_SetConfig+0x37c>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d005      	beq.n	8004768 <UART_SetConfig+0x88>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4abf      	ldr	r2, [pc, #764]	; (8004a60 <UART_SetConfig+0x380>)
 8004762:	4293      	cmp	r3, r2
 8004764:	f040 80bd 	bne.w	80048e2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004768:	f7ff fe76 	bl	8004458 <HAL_RCC_GetPCLK2Freq>
 800476c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	461d      	mov	r5, r3
 8004772:	f04f 0600 	mov.w	r6, #0
 8004776:	46a8      	mov	r8, r5
 8004778:	46b1      	mov	r9, r6
 800477a:	eb18 0308 	adds.w	r3, r8, r8
 800477e:	eb49 0409 	adc.w	r4, r9, r9
 8004782:	4698      	mov	r8, r3
 8004784:	46a1      	mov	r9, r4
 8004786:	eb18 0805 	adds.w	r8, r8, r5
 800478a:	eb49 0906 	adc.w	r9, r9, r6
 800478e:	f04f 0100 	mov.w	r1, #0
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800479a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800479e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80047a2:	4688      	mov	r8, r1
 80047a4:	4691      	mov	r9, r2
 80047a6:	eb18 0005 	adds.w	r0, r8, r5
 80047aa:	eb49 0106 	adc.w	r1, r9, r6
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	461d      	mov	r5, r3
 80047b4:	f04f 0600 	mov.w	r6, #0
 80047b8:	196b      	adds	r3, r5, r5
 80047ba:	eb46 0406 	adc.w	r4, r6, r6
 80047be:	461a      	mov	r2, r3
 80047c0:	4623      	mov	r3, r4
 80047c2:	f7fc f963 	bl	8000a8c <__aeabi_uldivmod>
 80047c6:	4603      	mov	r3, r0
 80047c8:	460c      	mov	r4, r1
 80047ca:	461a      	mov	r2, r3
 80047cc:	4ba5      	ldr	r3, [pc, #660]	; (8004a64 <UART_SetConfig+0x384>)
 80047ce:	fba3 2302 	umull	r2, r3, r3, r2
 80047d2:	095b      	lsrs	r3, r3, #5
 80047d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	461d      	mov	r5, r3
 80047dc:	f04f 0600 	mov.w	r6, #0
 80047e0:	46a9      	mov	r9, r5
 80047e2:	46b2      	mov	sl, r6
 80047e4:	eb19 0309 	adds.w	r3, r9, r9
 80047e8:	eb4a 040a 	adc.w	r4, sl, sl
 80047ec:	4699      	mov	r9, r3
 80047ee:	46a2      	mov	sl, r4
 80047f0:	eb19 0905 	adds.w	r9, r9, r5
 80047f4:	eb4a 0a06 	adc.w	sl, sl, r6
 80047f8:	f04f 0100 	mov.w	r1, #0
 80047fc:	f04f 0200 	mov.w	r2, #0
 8004800:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004804:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004808:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800480c:	4689      	mov	r9, r1
 800480e:	4692      	mov	sl, r2
 8004810:	eb19 0005 	adds.w	r0, r9, r5
 8004814:	eb4a 0106 	adc.w	r1, sl, r6
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	461d      	mov	r5, r3
 800481e:	f04f 0600 	mov.w	r6, #0
 8004822:	196b      	adds	r3, r5, r5
 8004824:	eb46 0406 	adc.w	r4, r6, r6
 8004828:	461a      	mov	r2, r3
 800482a:	4623      	mov	r3, r4
 800482c:	f7fc f92e 	bl	8000a8c <__aeabi_uldivmod>
 8004830:	4603      	mov	r3, r0
 8004832:	460c      	mov	r4, r1
 8004834:	461a      	mov	r2, r3
 8004836:	4b8b      	ldr	r3, [pc, #556]	; (8004a64 <UART_SetConfig+0x384>)
 8004838:	fba3 1302 	umull	r1, r3, r3, r2
 800483c:	095b      	lsrs	r3, r3, #5
 800483e:	2164      	movs	r1, #100	; 0x64
 8004840:	fb01 f303 	mul.w	r3, r1, r3
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	3332      	adds	r3, #50	; 0x32
 800484a:	4a86      	ldr	r2, [pc, #536]	; (8004a64 <UART_SetConfig+0x384>)
 800484c:	fba2 2303 	umull	r2, r3, r2, r3
 8004850:	095b      	lsrs	r3, r3, #5
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004858:	4498      	add	r8, r3
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	461d      	mov	r5, r3
 800485e:	f04f 0600 	mov.w	r6, #0
 8004862:	46a9      	mov	r9, r5
 8004864:	46b2      	mov	sl, r6
 8004866:	eb19 0309 	adds.w	r3, r9, r9
 800486a:	eb4a 040a 	adc.w	r4, sl, sl
 800486e:	4699      	mov	r9, r3
 8004870:	46a2      	mov	sl, r4
 8004872:	eb19 0905 	adds.w	r9, r9, r5
 8004876:	eb4a 0a06 	adc.w	sl, sl, r6
 800487a:	f04f 0100 	mov.w	r1, #0
 800487e:	f04f 0200 	mov.w	r2, #0
 8004882:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004886:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800488a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800488e:	4689      	mov	r9, r1
 8004890:	4692      	mov	sl, r2
 8004892:	eb19 0005 	adds.w	r0, r9, r5
 8004896:	eb4a 0106 	adc.w	r1, sl, r6
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	461d      	mov	r5, r3
 80048a0:	f04f 0600 	mov.w	r6, #0
 80048a4:	196b      	adds	r3, r5, r5
 80048a6:	eb46 0406 	adc.w	r4, r6, r6
 80048aa:	461a      	mov	r2, r3
 80048ac:	4623      	mov	r3, r4
 80048ae:	f7fc f8ed 	bl	8000a8c <__aeabi_uldivmod>
 80048b2:	4603      	mov	r3, r0
 80048b4:	460c      	mov	r4, r1
 80048b6:	461a      	mov	r2, r3
 80048b8:	4b6a      	ldr	r3, [pc, #424]	; (8004a64 <UART_SetConfig+0x384>)
 80048ba:	fba3 1302 	umull	r1, r3, r3, r2
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	2164      	movs	r1, #100	; 0x64
 80048c2:	fb01 f303 	mul.w	r3, r1, r3
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	3332      	adds	r3, #50	; 0x32
 80048cc:	4a65      	ldr	r2, [pc, #404]	; (8004a64 <UART_SetConfig+0x384>)
 80048ce:	fba2 2303 	umull	r2, r3, r2, r3
 80048d2:	095b      	lsrs	r3, r3, #5
 80048d4:	f003 0207 	and.w	r2, r3, #7
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4442      	add	r2, r8
 80048de:	609a      	str	r2, [r3, #8]
 80048e0:	e26f      	b.n	8004dc2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048e2:	f7ff fda5 	bl	8004430 <HAL_RCC_GetPCLK1Freq>
 80048e6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	461d      	mov	r5, r3
 80048ec:	f04f 0600 	mov.w	r6, #0
 80048f0:	46a8      	mov	r8, r5
 80048f2:	46b1      	mov	r9, r6
 80048f4:	eb18 0308 	adds.w	r3, r8, r8
 80048f8:	eb49 0409 	adc.w	r4, r9, r9
 80048fc:	4698      	mov	r8, r3
 80048fe:	46a1      	mov	r9, r4
 8004900:	eb18 0805 	adds.w	r8, r8, r5
 8004904:	eb49 0906 	adc.w	r9, r9, r6
 8004908:	f04f 0100 	mov.w	r1, #0
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004914:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004918:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800491c:	4688      	mov	r8, r1
 800491e:	4691      	mov	r9, r2
 8004920:	eb18 0005 	adds.w	r0, r8, r5
 8004924:	eb49 0106 	adc.w	r1, r9, r6
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	461d      	mov	r5, r3
 800492e:	f04f 0600 	mov.w	r6, #0
 8004932:	196b      	adds	r3, r5, r5
 8004934:	eb46 0406 	adc.w	r4, r6, r6
 8004938:	461a      	mov	r2, r3
 800493a:	4623      	mov	r3, r4
 800493c:	f7fc f8a6 	bl	8000a8c <__aeabi_uldivmod>
 8004940:	4603      	mov	r3, r0
 8004942:	460c      	mov	r4, r1
 8004944:	461a      	mov	r2, r3
 8004946:	4b47      	ldr	r3, [pc, #284]	; (8004a64 <UART_SetConfig+0x384>)
 8004948:	fba3 2302 	umull	r2, r3, r3, r2
 800494c:	095b      	lsrs	r3, r3, #5
 800494e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	461d      	mov	r5, r3
 8004956:	f04f 0600 	mov.w	r6, #0
 800495a:	46a9      	mov	r9, r5
 800495c:	46b2      	mov	sl, r6
 800495e:	eb19 0309 	adds.w	r3, r9, r9
 8004962:	eb4a 040a 	adc.w	r4, sl, sl
 8004966:	4699      	mov	r9, r3
 8004968:	46a2      	mov	sl, r4
 800496a:	eb19 0905 	adds.w	r9, r9, r5
 800496e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004972:	f04f 0100 	mov.w	r1, #0
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800497e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004982:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004986:	4689      	mov	r9, r1
 8004988:	4692      	mov	sl, r2
 800498a:	eb19 0005 	adds.w	r0, r9, r5
 800498e:	eb4a 0106 	adc.w	r1, sl, r6
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	461d      	mov	r5, r3
 8004998:	f04f 0600 	mov.w	r6, #0
 800499c:	196b      	adds	r3, r5, r5
 800499e:	eb46 0406 	adc.w	r4, r6, r6
 80049a2:	461a      	mov	r2, r3
 80049a4:	4623      	mov	r3, r4
 80049a6:	f7fc f871 	bl	8000a8c <__aeabi_uldivmod>
 80049aa:	4603      	mov	r3, r0
 80049ac:	460c      	mov	r4, r1
 80049ae:	461a      	mov	r2, r3
 80049b0:	4b2c      	ldr	r3, [pc, #176]	; (8004a64 <UART_SetConfig+0x384>)
 80049b2:	fba3 1302 	umull	r1, r3, r3, r2
 80049b6:	095b      	lsrs	r3, r3, #5
 80049b8:	2164      	movs	r1, #100	; 0x64
 80049ba:	fb01 f303 	mul.w	r3, r1, r3
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	3332      	adds	r3, #50	; 0x32
 80049c4:	4a27      	ldr	r2, [pc, #156]	; (8004a64 <UART_SetConfig+0x384>)
 80049c6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ca:	095b      	lsrs	r3, r3, #5
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049d2:	4498      	add	r8, r3
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	461d      	mov	r5, r3
 80049d8:	f04f 0600 	mov.w	r6, #0
 80049dc:	46a9      	mov	r9, r5
 80049de:	46b2      	mov	sl, r6
 80049e0:	eb19 0309 	adds.w	r3, r9, r9
 80049e4:	eb4a 040a 	adc.w	r4, sl, sl
 80049e8:	4699      	mov	r9, r3
 80049ea:	46a2      	mov	sl, r4
 80049ec:	eb19 0905 	adds.w	r9, r9, r5
 80049f0:	eb4a 0a06 	adc.w	sl, sl, r6
 80049f4:	f04f 0100 	mov.w	r1, #0
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a08:	4689      	mov	r9, r1
 8004a0a:	4692      	mov	sl, r2
 8004a0c:	eb19 0005 	adds.w	r0, r9, r5
 8004a10:	eb4a 0106 	adc.w	r1, sl, r6
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	461d      	mov	r5, r3
 8004a1a:	f04f 0600 	mov.w	r6, #0
 8004a1e:	196b      	adds	r3, r5, r5
 8004a20:	eb46 0406 	adc.w	r4, r6, r6
 8004a24:	461a      	mov	r2, r3
 8004a26:	4623      	mov	r3, r4
 8004a28:	f7fc f830 	bl	8000a8c <__aeabi_uldivmod>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	460c      	mov	r4, r1
 8004a30:	461a      	mov	r2, r3
 8004a32:	4b0c      	ldr	r3, [pc, #48]	; (8004a64 <UART_SetConfig+0x384>)
 8004a34:	fba3 1302 	umull	r1, r3, r3, r2
 8004a38:	095b      	lsrs	r3, r3, #5
 8004a3a:	2164      	movs	r1, #100	; 0x64
 8004a3c:	fb01 f303 	mul.w	r3, r1, r3
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	3332      	adds	r3, #50	; 0x32
 8004a46:	4a07      	ldr	r2, [pc, #28]	; (8004a64 <UART_SetConfig+0x384>)
 8004a48:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4c:	095b      	lsrs	r3, r3, #5
 8004a4e:	f003 0207 	and.w	r2, r3, #7
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4442      	add	r2, r8
 8004a58:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004a5a:	e1b2      	b.n	8004dc2 <UART_SetConfig+0x6e2>
 8004a5c:	40011000 	.word	0x40011000
 8004a60:	40011400 	.word	0x40011400
 8004a64:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4ad7      	ldr	r2, [pc, #860]	; (8004dcc <UART_SetConfig+0x6ec>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d005      	beq.n	8004a7e <UART_SetConfig+0x39e>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4ad6      	ldr	r2, [pc, #856]	; (8004dd0 <UART_SetConfig+0x6f0>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	f040 80d1 	bne.w	8004c20 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a7e:	f7ff fceb 	bl	8004458 <HAL_RCC_GetPCLK2Freq>
 8004a82:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	469a      	mov	sl, r3
 8004a88:	f04f 0b00 	mov.w	fp, #0
 8004a8c:	46d0      	mov	r8, sl
 8004a8e:	46d9      	mov	r9, fp
 8004a90:	eb18 0308 	adds.w	r3, r8, r8
 8004a94:	eb49 0409 	adc.w	r4, r9, r9
 8004a98:	4698      	mov	r8, r3
 8004a9a:	46a1      	mov	r9, r4
 8004a9c:	eb18 080a 	adds.w	r8, r8, sl
 8004aa0:	eb49 090b 	adc.w	r9, r9, fp
 8004aa4:	f04f 0100 	mov.w	r1, #0
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004ab0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004ab4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ab8:	4688      	mov	r8, r1
 8004aba:	4691      	mov	r9, r2
 8004abc:	eb1a 0508 	adds.w	r5, sl, r8
 8004ac0:	eb4b 0609 	adc.w	r6, fp, r9
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	4619      	mov	r1, r3
 8004aca:	f04f 0200 	mov.w	r2, #0
 8004ace:	f04f 0300 	mov.w	r3, #0
 8004ad2:	f04f 0400 	mov.w	r4, #0
 8004ad6:	0094      	lsls	r4, r2, #2
 8004ad8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004adc:	008b      	lsls	r3, r1, #2
 8004ade:	461a      	mov	r2, r3
 8004ae0:	4623      	mov	r3, r4
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	4631      	mov	r1, r6
 8004ae6:	f7fb ffd1 	bl	8000a8c <__aeabi_uldivmod>
 8004aea:	4603      	mov	r3, r0
 8004aec:	460c      	mov	r4, r1
 8004aee:	461a      	mov	r2, r3
 8004af0:	4bb8      	ldr	r3, [pc, #736]	; (8004dd4 <UART_SetConfig+0x6f4>)
 8004af2:	fba3 2302 	umull	r2, r3, r3, r2
 8004af6:	095b      	lsrs	r3, r3, #5
 8004af8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	469b      	mov	fp, r3
 8004b00:	f04f 0c00 	mov.w	ip, #0
 8004b04:	46d9      	mov	r9, fp
 8004b06:	46e2      	mov	sl, ip
 8004b08:	eb19 0309 	adds.w	r3, r9, r9
 8004b0c:	eb4a 040a 	adc.w	r4, sl, sl
 8004b10:	4699      	mov	r9, r3
 8004b12:	46a2      	mov	sl, r4
 8004b14:	eb19 090b 	adds.w	r9, r9, fp
 8004b18:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b1c:	f04f 0100 	mov.w	r1, #0
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b30:	4689      	mov	r9, r1
 8004b32:	4692      	mov	sl, r2
 8004b34:	eb1b 0509 	adds.w	r5, fp, r9
 8004b38:	eb4c 060a 	adc.w	r6, ip, sl
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	4619      	mov	r1, r3
 8004b42:	f04f 0200 	mov.w	r2, #0
 8004b46:	f04f 0300 	mov.w	r3, #0
 8004b4a:	f04f 0400 	mov.w	r4, #0
 8004b4e:	0094      	lsls	r4, r2, #2
 8004b50:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b54:	008b      	lsls	r3, r1, #2
 8004b56:	461a      	mov	r2, r3
 8004b58:	4623      	mov	r3, r4
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	4631      	mov	r1, r6
 8004b5e:	f7fb ff95 	bl	8000a8c <__aeabi_uldivmod>
 8004b62:	4603      	mov	r3, r0
 8004b64:	460c      	mov	r4, r1
 8004b66:	461a      	mov	r2, r3
 8004b68:	4b9a      	ldr	r3, [pc, #616]	; (8004dd4 <UART_SetConfig+0x6f4>)
 8004b6a:	fba3 1302 	umull	r1, r3, r3, r2
 8004b6e:	095b      	lsrs	r3, r3, #5
 8004b70:	2164      	movs	r1, #100	; 0x64
 8004b72:	fb01 f303 	mul.w	r3, r1, r3
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	011b      	lsls	r3, r3, #4
 8004b7a:	3332      	adds	r3, #50	; 0x32
 8004b7c:	4a95      	ldr	r2, [pc, #596]	; (8004dd4 <UART_SetConfig+0x6f4>)
 8004b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b82:	095b      	lsrs	r3, r3, #5
 8004b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b88:	4498      	add	r8, r3
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	469b      	mov	fp, r3
 8004b8e:	f04f 0c00 	mov.w	ip, #0
 8004b92:	46d9      	mov	r9, fp
 8004b94:	46e2      	mov	sl, ip
 8004b96:	eb19 0309 	adds.w	r3, r9, r9
 8004b9a:	eb4a 040a 	adc.w	r4, sl, sl
 8004b9e:	4699      	mov	r9, r3
 8004ba0:	46a2      	mov	sl, r4
 8004ba2:	eb19 090b 	adds.w	r9, r9, fp
 8004ba6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004baa:	f04f 0100 	mov.w	r1, #0
 8004bae:	f04f 0200 	mov.w	r2, #0
 8004bb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004bba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004bbe:	4689      	mov	r9, r1
 8004bc0:	4692      	mov	sl, r2
 8004bc2:	eb1b 0509 	adds.w	r5, fp, r9
 8004bc6:	eb4c 060a 	adc.w	r6, ip, sl
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	4619      	mov	r1, r3
 8004bd0:	f04f 0200 	mov.w	r2, #0
 8004bd4:	f04f 0300 	mov.w	r3, #0
 8004bd8:	f04f 0400 	mov.w	r4, #0
 8004bdc:	0094      	lsls	r4, r2, #2
 8004bde:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004be2:	008b      	lsls	r3, r1, #2
 8004be4:	461a      	mov	r2, r3
 8004be6:	4623      	mov	r3, r4
 8004be8:	4628      	mov	r0, r5
 8004bea:	4631      	mov	r1, r6
 8004bec:	f7fb ff4e 	bl	8000a8c <__aeabi_uldivmod>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	460c      	mov	r4, r1
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	4b77      	ldr	r3, [pc, #476]	; (8004dd4 <UART_SetConfig+0x6f4>)
 8004bf8:	fba3 1302 	umull	r1, r3, r3, r2
 8004bfc:	095b      	lsrs	r3, r3, #5
 8004bfe:	2164      	movs	r1, #100	; 0x64
 8004c00:	fb01 f303 	mul.w	r3, r1, r3
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	011b      	lsls	r3, r3, #4
 8004c08:	3332      	adds	r3, #50	; 0x32
 8004c0a:	4a72      	ldr	r2, [pc, #456]	; (8004dd4 <UART_SetConfig+0x6f4>)
 8004c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c10:	095b      	lsrs	r3, r3, #5
 8004c12:	f003 020f 	and.w	r2, r3, #15
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4442      	add	r2, r8
 8004c1c:	609a      	str	r2, [r3, #8]
 8004c1e:	e0d0      	b.n	8004dc2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c20:	f7ff fc06 	bl	8004430 <HAL_RCC_GetPCLK1Freq>
 8004c24:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	469a      	mov	sl, r3
 8004c2a:	f04f 0b00 	mov.w	fp, #0
 8004c2e:	46d0      	mov	r8, sl
 8004c30:	46d9      	mov	r9, fp
 8004c32:	eb18 0308 	adds.w	r3, r8, r8
 8004c36:	eb49 0409 	adc.w	r4, r9, r9
 8004c3a:	4698      	mov	r8, r3
 8004c3c:	46a1      	mov	r9, r4
 8004c3e:	eb18 080a 	adds.w	r8, r8, sl
 8004c42:	eb49 090b 	adc.w	r9, r9, fp
 8004c46:	f04f 0100 	mov.w	r1, #0
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004c52:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c56:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c5a:	4688      	mov	r8, r1
 8004c5c:	4691      	mov	r9, r2
 8004c5e:	eb1a 0508 	adds.w	r5, sl, r8
 8004c62:	eb4b 0609 	adc.w	r6, fp, r9
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	f04f 0200 	mov.w	r2, #0
 8004c70:	f04f 0300 	mov.w	r3, #0
 8004c74:	f04f 0400 	mov.w	r4, #0
 8004c78:	0094      	lsls	r4, r2, #2
 8004c7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c7e:	008b      	lsls	r3, r1, #2
 8004c80:	461a      	mov	r2, r3
 8004c82:	4623      	mov	r3, r4
 8004c84:	4628      	mov	r0, r5
 8004c86:	4631      	mov	r1, r6
 8004c88:	f7fb ff00 	bl	8000a8c <__aeabi_uldivmod>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	460c      	mov	r4, r1
 8004c90:	461a      	mov	r2, r3
 8004c92:	4b50      	ldr	r3, [pc, #320]	; (8004dd4 <UART_SetConfig+0x6f4>)
 8004c94:	fba3 2302 	umull	r2, r3, r3, r2
 8004c98:	095b      	lsrs	r3, r3, #5
 8004c9a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	469b      	mov	fp, r3
 8004ca2:	f04f 0c00 	mov.w	ip, #0
 8004ca6:	46d9      	mov	r9, fp
 8004ca8:	46e2      	mov	sl, ip
 8004caa:	eb19 0309 	adds.w	r3, r9, r9
 8004cae:	eb4a 040a 	adc.w	r4, sl, sl
 8004cb2:	4699      	mov	r9, r3
 8004cb4:	46a2      	mov	sl, r4
 8004cb6:	eb19 090b 	adds.w	r9, r9, fp
 8004cba:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004cbe:	f04f 0100 	mov.w	r1, #0
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cd2:	4689      	mov	r9, r1
 8004cd4:	4692      	mov	sl, r2
 8004cd6:	eb1b 0509 	adds.w	r5, fp, r9
 8004cda:	eb4c 060a 	adc.w	r6, ip, sl
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	f04f 0400 	mov.w	r4, #0
 8004cf0:	0094      	lsls	r4, r2, #2
 8004cf2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004cf6:	008b      	lsls	r3, r1, #2
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	4623      	mov	r3, r4
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	4631      	mov	r1, r6
 8004d00:	f7fb fec4 	bl	8000a8c <__aeabi_uldivmod>
 8004d04:	4603      	mov	r3, r0
 8004d06:	460c      	mov	r4, r1
 8004d08:	461a      	mov	r2, r3
 8004d0a:	4b32      	ldr	r3, [pc, #200]	; (8004dd4 <UART_SetConfig+0x6f4>)
 8004d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d10:	095b      	lsrs	r3, r3, #5
 8004d12:	2164      	movs	r1, #100	; 0x64
 8004d14:	fb01 f303 	mul.w	r3, r1, r3
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	3332      	adds	r3, #50	; 0x32
 8004d1e:	4a2d      	ldr	r2, [pc, #180]	; (8004dd4 <UART_SetConfig+0x6f4>)
 8004d20:	fba2 2303 	umull	r2, r3, r2, r3
 8004d24:	095b      	lsrs	r3, r3, #5
 8004d26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d2a:	4498      	add	r8, r3
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	469b      	mov	fp, r3
 8004d30:	f04f 0c00 	mov.w	ip, #0
 8004d34:	46d9      	mov	r9, fp
 8004d36:	46e2      	mov	sl, ip
 8004d38:	eb19 0309 	adds.w	r3, r9, r9
 8004d3c:	eb4a 040a 	adc.w	r4, sl, sl
 8004d40:	4699      	mov	r9, r3
 8004d42:	46a2      	mov	sl, r4
 8004d44:	eb19 090b 	adds.w	r9, r9, fp
 8004d48:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004d4c:	f04f 0100 	mov.w	r1, #0
 8004d50:	f04f 0200 	mov.w	r2, #0
 8004d54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d60:	4689      	mov	r9, r1
 8004d62:	4692      	mov	sl, r2
 8004d64:	eb1b 0509 	adds.w	r5, fp, r9
 8004d68:	eb4c 060a 	adc.w	r6, ip, sl
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	4619      	mov	r1, r3
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	f04f 0300 	mov.w	r3, #0
 8004d7a:	f04f 0400 	mov.w	r4, #0
 8004d7e:	0094      	lsls	r4, r2, #2
 8004d80:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d84:	008b      	lsls	r3, r1, #2
 8004d86:	461a      	mov	r2, r3
 8004d88:	4623      	mov	r3, r4
 8004d8a:	4628      	mov	r0, r5
 8004d8c:	4631      	mov	r1, r6
 8004d8e:	f7fb fe7d 	bl	8000a8c <__aeabi_uldivmod>
 8004d92:	4603      	mov	r3, r0
 8004d94:	460c      	mov	r4, r1
 8004d96:	461a      	mov	r2, r3
 8004d98:	4b0e      	ldr	r3, [pc, #56]	; (8004dd4 <UART_SetConfig+0x6f4>)
 8004d9a:	fba3 1302 	umull	r1, r3, r3, r2
 8004d9e:	095b      	lsrs	r3, r3, #5
 8004da0:	2164      	movs	r1, #100	; 0x64
 8004da2:	fb01 f303 	mul.w	r3, r1, r3
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	3332      	adds	r3, #50	; 0x32
 8004dac:	4a09      	ldr	r2, [pc, #36]	; (8004dd4 <UART_SetConfig+0x6f4>)
 8004dae:	fba2 2303 	umull	r2, r3, r2, r3
 8004db2:	095b      	lsrs	r3, r3, #5
 8004db4:	f003 020f 	and.w	r2, r3, #15
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4442      	add	r2, r8
 8004dbe:	609a      	str	r2, [r3, #8]
}
 8004dc0:	e7ff      	b.n	8004dc2 <UART_SetConfig+0x6e2>
 8004dc2:	bf00      	nop
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dcc:	40011000 	.word	0x40011000
 8004dd0:	40011400 	.word	0x40011400
 8004dd4:	51eb851f 	.word	0x51eb851f

08004dd8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dd8:	b084      	sub	sp, #16
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b084      	sub	sp, #16
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	f107 001c 	add.w	r0, r7, #28
 8004de6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d122      	bne.n	8004e36 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d105      	bne.n	8004e2a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f94a 	bl	80050c4 <USB_CoreReset>
 8004e30:	4603      	mov	r3, r0
 8004e32:	73fb      	strb	r3, [r7, #15]
 8004e34:	e01a      	b.n	8004e6c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f93e 	bl	80050c4 <USB_CoreReset>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d106      	bne.n	8004e60 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	639a      	str	r2, [r3, #56]	; 0x38
 8004e5e:	e005      	b.n	8004e6c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d10b      	bne.n	8004e8a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f043 0206 	orr.w	r2, r3, #6
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f043 0220 	orr.w	r2, r3, #32
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e96:	b004      	add	sp, #16
 8004e98:	4770      	bx	lr

08004e9a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f043 0201 	orr.w	r2, r3, #1
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f023 0201 	bic.w	r2, r3, #1
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b082      	sub	sp, #8
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ef6:	78fb      	ldrb	r3, [r7, #3]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d106      	bne.n	8004f0a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	60da      	str	r2, [r3, #12]
 8004f08:	e00b      	b.n	8004f22 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f0a:	78fb      	ldrb	r3, [r7, #3]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d106      	bne.n	8004f1e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	60da      	str	r2, [r3, #12]
 8004f1c:	e001      	b.n	8004f22 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e003      	b.n	8004f2a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004f22:	2032      	movs	r0, #50	; 0x32
 8004f24:	f7fc fe72 	bl	8001c0c <HAL_Delay>

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	019b      	lsls	r3, r3, #6
 8004f46:	f043 0220 	orr.w	r2, r3, #32
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	3301      	adds	r3, #1
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4a09      	ldr	r2, [pc, #36]	; (8004f7c <USB_FlushTxFifo+0x48>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d901      	bls.n	8004f60 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e006      	b.n	8004f6e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	f003 0320 	and.w	r3, r3, #32
 8004f68:	2b20      	cmp	r3, #32
 8004f6a:	d0f0      	beq.n	8004f4e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	00030d40 	.word	0x00030d40

08004f80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2210      	movs	r2, #16
 8004f90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	3301      	adds	r3, #1
 8004f96:	60fb      	str	r3, [r7, #12]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4a09      	ldr	r2, [pc, #36]	; (8004fc0 <USB_FlushRxFifo+0x40>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d901      	bls.n	8004fa4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e006      	b.n	8004fb2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	f003 0310 	and.w	r3, r3, #16
 8004fac:	2b10      	cmp	r3, #16
 8004fae:	d0f0      	beq.n	8004f92 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3714      	adds	r7, #20
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	00030d40 	.word	0x00030d40

08004fc4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b089      	sub	sp, #36	; 0x24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	4611      	mov	r1, r2
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	71fb      	strb	r3, [r7, #7]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004fe2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d11a      	bne.n	8005020 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004fea:	88bb      	ldrh	r3, [r7, #4]
 8004fec:	3303      	adds	r3, #3
 8004fee:	089b      	lsrs	r3, r3, #2
 8004ff0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	61bb      	str	r3, [r7, #24]
 8004ff6:	e00f      	b.n	8005018 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ff8:	79fb      	ldrb	r3, [r7, #7]
 8004ffa:	031a      	lsls	r2, r3, #12
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005004:	461a      	mov	r2, r3
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	3304      	adds	r3, #4
 8005010:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	3301      	adds	r3, #1
 8005016:	61bb      	str	r3, [r7, #24]
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	429a      	cmp	r2, r3
 800501e:	d3eb      	bcc.n	8004ff8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3724      	adds	r7, #36	; 0x24
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800502e:	b480      	push	{r7}
 8005030:	b089      	sub	sp, #36	; 0x24
 8005032:	af00      	add	r7, sp, #0
 8005034:	60f8      	str	r0, [r7, #12]
 8005036:	60b9      	str	r1, [r7, #8]
 8005038:	4613      	mov	r3, r2
 800503a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005044:	88fb      	ldrh	r3, [r7, #6]
 8005046:	3303      	adds	r3, #3
 8005048:	089b      	lsrs	r3, r3, #2
 800504a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800504c:	2300      	movs	r3, #0
 800504e:	61bb      	str	r3, [r7, #24]
 8005050:	e00b      	b.n	800506a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	601a      	str	r2, [r3, #0]
    pDest++;
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	3304      	adds	r3, #4
 8005062:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	3301      	adds	r3, #1
 8005068:	61bb      	str	r3, [r7, #24]
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	429a      	cmp	r2, r3
 8005070:	d3ef      	bcc.n	8005052 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005072:	69fb      	ldr	r3, [r7, #28]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3724      	adds	r7, #36	; 0x24
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4013      	ands	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005098:	68fb      	ldr	r3, [r7, #12]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b083      	sub	sp, #12
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	f003 0301 	and.w	r3, r3, #1
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
	...

080050c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80050cc:	2300      	movs	r3, #0
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	3301      	adds	r3, #1
 80050d4:	60fb      	str	r3, [r7, #12]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4a13      	ldr	r2, [pc, #76]	; (8005128 <USB_CoreReset+0x64>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d901      	bls.n	80050e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e01b      	b.n	800511a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	daf2      	bge.n	80050d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	f043 0201 	orr.w	r2, r3, #1
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	3301      	adds	r3, #1
 80050fe:	60fb      	str	r3, [r7, #12]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4a09      	ldr	r2, [pc, #36]	; (8005128 <USB_CoreReset+0x64>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d901      	bls.n	800510c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e006      	b.n	800511a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b01      	cmp	r3, #1
 8005116:	d0f0      	beq.n	80050fa <USB_CoreReset+0x36>

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	00030d40 	.word	0x00030d40

0800512c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800512c:	b084      	sub	sp, #16
 800512e:	b580      	push	{r7, lr}
 8005130:	b084      	sub	sp, #16
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	f107 001c 	add.w	r0, r7, #28
 800513a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005148:	461a      	mov	r2, r3
 800514a:	2300      	movs	r3, #0
 800514c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517a:	2b00      	cmp	r3, #0
 800517c:	d018      	beq.n	80051b0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	2b01      	cmp	r3, #1
 8005182:	d10a      	bne.n	800519a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005192:	f043 0304 	orr.w	r3, r3, #4
 8005196:	6013      	str	r3, [r2, #0]
 8005198:	e014      	b.n	80051c4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051a8:	f023 0304 	bic.w	r3, r3, #4
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	e009      	b.n	80051c4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051be:	f023 0304 	bic.w	r3, r3, #4
 80051c2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80051c4:	2110      	movs	r1, #16
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7ff feb4 	bl	8004f34 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7ff fed7 	bl	8004f80 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80051d2:	2300      	movs	r3, #0
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	e015      	b.n	8005204 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e4:	461a      	mov	r2, r3
 80051e6:	f04f 33ff 	mov.w	r3, #4294967295
 80051ea:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f8:	461a      	mov	r2, r3
 80051fa:	2300      	movs	r3, #0
 80051fc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	3301      	adds	r3, #1
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	429a      	cmp	r2, r3
 800520a:	d3e5      	bcc.n	80051d8 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800520c:	2101      	movs	r1, #1
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f8ac 	bl	800536c <USB_DriveVbus>

  HAL_Delay(200U);
 8005214:	20c8      	movs	r0, #200	; 0xc8
 8005216:	f7fc fcf9 	bl	8001c0c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f04f 32ff 	mov.w	r2, #4294967295
 8005226:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00b      	beq.n	800524c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f44f 7200 	mov.w	r2, #512	; 0x200
 800523a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a14      	ldr	r2, [pc, #80]	; (8005290 <USB_HostInit+0x164>)
 8005240:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a13      	ldr	r2, [pc, #76]	; (8005294 <USB_HostInit+0x168>)
 8005246:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800524a:	e009      	b.n	8005260 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2280      	movs	r2, #128	; 0x80
 8005250:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a10      	ldr	r2, [pc, #64]	; (8005298 <USB_HostInit+0x16c>)
 8005256:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a10      	ldr	r2, [pc, #64]	; (800529c <USB_HostInit+0x170>)
 800525c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005262:	2b00      	cmp	r3, #0
 8005264:	d105      	bne.n	8005272 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	f043 0210 	orr.w	r2, r3, #16
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	699a      	ldr	r2, [r3, #24]
 8005276:	4b0a      	ldr	r3, [pc, #40]	; (80052a0 <USB_HostInit+0x174>)
 8005278:	4313      	orrs	r3, r2
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800528a:	b004      	add	sp, #16
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	01000200 	.word	0x01000200
 8005294:	00e00300 	.word	0x00e00300
 8005298:	00600080 	.word	0x00600080
 800529c:	004000e0 	.word	0x004000e0
 80052a0:	a3200008 	.word	0xa3200008

080052a4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	460b      	mov	r3, r1
 80052ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052c2:	f023 0303 	bic.w	r3, r3, #3
 80052c6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	78fb      	ldrb	r3, [r7, #3]
 80052d2:	f003 0303 	and.w	r3, r3, #3
 80052d6:	68f9      	ldr	r1, [r7, #12]
 80052d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80052dc:	4313      	orrs	r3, r2
 80052de:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80052e0:	78fb      	ldrb	r3, [r7, #3]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d107      	bne.n	80052f6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052ec:	461a      	mov	r2, r3
 80052ee:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80052f2:	6053      	str	r3, [r2, #4]
 80052f4:	e009      	b.n	800530a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80052f6:	78fb      	ldrb	r3, [r7, #3]
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d106      	bne.n	800530a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005302:	461a      	mov	r2, r3
 8005304:	f241 7370 	movw	r3, #6000	; 0x1770
 8005308:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005338:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005346:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005348:	2064      	movs	r0, #100	; 0x64
 800534a:	f7fc fc5f 	bl	8001c0c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005356:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800535a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800535c:	200a      	movs	r0, #10
 800535e:	f7fc fc55 	bl	8001c0c <HAL_Delay>

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	460b      	mov	r3, r1
 8005376:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800537c:	2300      	movs	r3, #0
 800537e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005390:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d109      	bne.n	80053b0 <USB_DriveVbus+0x44>
 800539c:	78fb      	ldrb	r3, [r7, #3]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d106      	bne.n	80053b0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80053aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80053ae:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ba:	d109      	bne.n	80053d0 <USB_DriveVbus+0x64>
 80053bc:	78fb      	ldrb	r3, [r7, #3]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d106      	bne.n	80053d0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80053ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053ce:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80053de:	b480      	push	{r7}
 80053e0:	b085      	sub	sp, #20
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80053ea:	2300      	movs	r3, #0
 80053ec:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	0c5b      	lsrs	r3, r3, #17
 80053fc:	f003 0303 	and.w	r3, r3, #3
}
 8005400:	4618      	mov	r0, r3
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	b29b      	uxth	r3, r3
}
 8005422:	4618      	mov	r0, r3
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
	...

08005430 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005430:	b480      	push	{r7}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	4608      	mov	r0, r1
 800543a:	4611      	mov	r1, r2
 800543c:	461a      	mov	r2, r3
 800543e:	4603      	mov	r3, r0
 8005440:	70fb      	strb	r3, [r7, #3]
 8005442:	460b      	mov	r3, r1
 8005444:	70bb      	strb	r3, [r7, #2]
 8005446:	4613      	mov	r3, r2
 8005448:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800544a:	2300      	movs	r3, #0
 800544c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005452:	78fb      	ldrb	r3, [r7, #3]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	4413      	add	r3, r2
 800545a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800545e:	461a      	mov	r2, r3
 8005460:	f04f 33ff 	mov.w	r3, #4294967295
 8005464:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005466:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800546a:	2b03      	cmp	r3, #3
 800546c:	d87e      	bhi.n	800556c <USB_HC_Init+0x13c>
 800546e:	a201      	add	r2, pc, #4	; (adr r2, 8005474 <USB_HC_Init+0x44>)
 8005470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005474:	08005485 	.word	0x08005485
 8005478:	0800552f 	.word	0x0800552f
 800547c:	08005485 	.word	0x08005485
 8005480:	080054f1 	.word	0x080054f1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005484:	78fb      	ldrb	r3, [r7, #3]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	4413      	add	r3, r2
 800548c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005490:	461a      	mov	r2, r3
 8005492:	f240 439d 	movw	r3, #1181	; 0x49d
 8005496:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005498:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800549c:	2b00      	cmp	r3, #0
 800549e:	da10      	bge.n	80054c2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80054a0:	78fb      	ldrb	r3, [r7, #3]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	78fa      	ldrb	r2, [r7, #3]
 80054b0:	0151      	lsls	r1, r2, #5
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	440a      	add	r2, r1
 80054b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054be:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80054c0:	e057      	b.n	8005572 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d051      	beq.n	8005572 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80054ce:	78fb      	ldrb	r3, [r7, #3]
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	78fa      	ldrb	r2, [r7, #3]
 80054de:	0151      	lsls	r1, r2, #5
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	440a      	add	r2, r1
 80054e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80054ec:	60d3      	str	r3, [r2, #12]
      break;
 80054ee:	e040      	b.n	8005572 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80054f0:	78fb      	ldrb	r3, [r7, #3]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054fc:	461a      	mov	r2, r3
 80054fe:	f240 639d 	movw	r3, #1693	; 0x69d
 8005502:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005504:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005508:	2b00      	cmp	r3, #0
 800550a:	da34      	bge.n	8005576 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800550c:	78fb      	ldrb	r3, [r7, #3]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	4413      	add	r3, r2
 8005514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	78fa      	ldrb	r2, [r7, #3]
 800551c:	0151      	lsls	r1, r2, #5
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	440a      	add	r2, r1
 8005522:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800552a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800552c:	e023      	b.n	8005576 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800552e:	78fb      	ldrb	r3, [r7, #3]
 8005530:	015a      	lsls	r2, r3, #5
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	4413      	add	r3, r2
 8005536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800553a:	461a      	mov	r2, r3
 800553c:	f240 2325 	movw	r3, #549	; 0x225
 8005540:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005542:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005546:	2b00      	cmp	r3, #0
 8005548:	da17      	bge.n	800557a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800554a:	78fb      	ldrb	r3, [r7, #3]
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	4413      	add	r3, r2
 8005552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	78fa      	ldrb	r2, [r7, #3]
 800555a:	0151      	lsls	r1, r2, #5
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	440a      	add	r2, r1
 8005560:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005564:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005568:	60d3      	str	r3, [r2, #12]
      }
      break;
 800556a:	e006      	b.n	800557a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	75fb      	strb	r3, [r7, #23]
      break;
 8005570:	e004      	b.n	800557c <USB_HC_Init+0x14c>
      break;
 8005572:	bf00      	nop
 8005574:	e002      	b.n	800557c <USB_HC_Init+0x14c>
      break;
 8005576:	bf00      	nop
 8005578:	e000      	b.n	800557c <USB_HC_Init+0x14c>
      break;
 800557a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005582:	699a      	ldr	r2, [r3, #24]
 8005584:	78fb      	ldrb	r3, [r7, #3]
 8005586:	f003 030f 	and.w	r3, r3, #15
 800558a:	2101      	movs	r1, #1
 800558c:	fa01 f303 	lsl.w	r3, r1, r3
 8005590:	68b9      	ldr	r1, [r7, #8]
 8005592:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005596:	4313      	orrs	r3, r2
 8005598:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80055a6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	da03      	bge.n	80055b6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80055ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055b2:	613b      	str	r3, [r7, #16]
 80055b4:	e001      	b.n	80055ba <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80055b6:	2300      	movs	r3, #0
 80055b8:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80055ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d103      	bne.n	80055ca <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80055c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055c6:	60fb      	str	r3, [r7, #12]
 80055c8:	e001      	b.n	80055ce <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80055ce:	787b      	ldrb	r3, [r7, #1]
 80055d0:	059b      	lsls	r3, r3, #22
 80055d2:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80055d6:	78bb      	ldrb	r3, [r7, #2]
 80055d8:	02db      	lsls	r3, r3, #11
 80055da:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80055de:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80055e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80055e4:	049b      	lsls	r3, r3, #18
 80055e6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80055ea:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80055ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80055ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80055f2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80055f8:	78fb      	ldrb	r3, [r7, #3]
 80055fa:	0159      	lsls	r1, r3, #5
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	440b      	add	r3, r1
 8005600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005604:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800560a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800560c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005610:	2b03      	cmp	r3, #3
 8005612:	d10f      	bne.n	8005634 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005614:	78fb      	ldrb	r3, [r7, #3]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	4413      	add	r3, r2
 800561c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	78fa      	ldrb	r2, [r7, #3]
 8005624:	0151      	lsls	r1, r2, #5
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	440a      	add	r2, r1
 800562a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800562e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005632:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005634:	7dfb      	ldrb	r3, [r7, #23]
}
 8005636:	4618      	mov	r0, r3
 8005638:	371c      	adds	r7, #28
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop

08005644 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b08c      	sub	sp, #48	; 0x30
 8005648:	af02      	add	r7, sp, #8
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	4613      	mov	r3, r2
 8005650:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	785b      	ldrb	r3, [r3, #1]
 800565a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800565c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005660:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566a:	2b00      	cmp	r3, #0
 800566c:	d028      	beq.n	80056c0 <USB_HC_StartXfer+0x7c>
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	791b      	ldrb	r3, [r3, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d124      	bne.n	80056c0 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005676:	79fb      	ldrb	r3, [r7, #7]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10b      	bne.n	8005694 <USB_HC_StartXfer+0x50>
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	795b      	ldrb	r3, [r3, #5]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d107      	bne.n	8005694 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	785b      	ldrb	r3, [r3, #1]
 8005688:	4619      	mov	r1, r3
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f000 fa30 	bl	8005af0 <USB_DoPing>
      return HAL_OK;
 8005690:	2300      	movs	r3, #0
 8005692:	e114      	b.n	80058be <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8005694:	79fb      	ldrb	r3, [r7, #7]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d112      	bne.n	80056c0 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	69fa      	ldr	r2, [r7, #28]
 80056aa:	0151      	lsls	r1, r2, #5
 80056ac:	6a3a      	ldr	r2, [r7, #32]
 80056ae:	440a      	add	r2, r1
 80056b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056b4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80056b8:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	2200      	movs	r2, #0
 80056be:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d018      	beq.n	80056fa <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	8912      	ldrh	r2, [r2, #8]
 80056d0:	4413      	add	r3, r2
 80056d2:	3b01      	subs	r3, #1
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	8912      	ldrh	r2, [r2, #8]
 80056d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80056dc:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80056de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80056e0:	8b7b      	ldrh	r3, [r7, #26]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d90b      	bls.n	80056fe <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80056e6:	8b7b      	ldrh	r3, [r7, #26]
 80056e8:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80056ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	8912      	ldrh	r2, [r2, #8]
 80056f0:	fb02 f203 	mul.w	r2, r2, r3
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	611a      	str	r2, [r3, #16]
 80056f8:	e001      	b.n	80056fe <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80056fa:	2301      	movs	r3, #1
 80056fc:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	78db      	ldrb	r3, [r3, #3]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d006      	beq.n	8005714 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005706:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	8912      	ldrh	r2, [r2, #8]
 800570c:	fb02 f203 	mul.w	r2, r2, r3
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800571c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800571e:	04d9      	lsls	r1, r3, #19
 8005720:	4b69      	ldr	r3, [pc, #420]	; (80058c8 <USB_HC_StartXfer+0x284>)
 8005722:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005724:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	7a9b      	ldrb	r3, [r3, #10]
 800572a:	075b      	lsls	r3, r3, #29
 800572c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005730:	69f9      	ldr	r1, [r7, #28]
 8005732:	0148      	lsls	r0, r1, #5
 8005734:	6a39      	ldr	r1, [r7, #32]
 8005736:	4401      	add	r1, r0
 8005738:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800573c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800573e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005740:	79fb      	ldrb	r3, [r7, #7]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d009      	beq.n	800575a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	68d9      	ldr	r1, [r3, #12]
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	4413      	add	r3, r2
 8005752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005756:	460a      	mov	r2, r1
 8005758:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	bf0c      	ite	eq
 800576a:	2301      	moveq	r3, #1
 800576c:	2300      	movne	r3, #0
 800576e:	b2db      	uxtb	r3, r3
 8005770:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	015a      	lsls	r2, r3, #5
 8005776:	6a3b      	ldr	r3, [r7, #32]
 8005778:	4413      	add	r3, r2
 800577a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	69fa      	ldr	r2, [r7, #28]
 8005782:	0151      	lsls	r1, r2, #5
 8005784:	6a3a      	ldr	r2, [r7, #32]
 8005786:	440a      	add	r2, r1
 8005788:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800578c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005790:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	4413      	add	r3, r2
 800579a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	7e7b      	ldrb	r3, [r7, #25]
 80057a2:	075b      	lsls	r3, r3, #29
 80057a4:	69f9      	ldr	r1, [r7, #28]
 80057a6:	0148      	lsls	r0, r1, #5
 80057a8:	6a39      	ldr	r1, [r7, #32]
 80057aa:	4401      	add	r1, r0
 80057ac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80057b0:	4313      	orrs	r3, r2
 80057b2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a42      	ldr	r2, [pc, #264]	; (80058cc <USB_HC_StartXfer+0x288>)
 80057c4:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057c6:	4b41      	ldr	r3, [pc, #260]	; (80058cc <USB_HC_StartXfer+0x288>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057ce:	4a3f      	ldr	r2, [pc, #252]	; (80058cc <USB_HC_StartXfer+0x288>)
 80057d0:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	78db      	ldrb	r3, [r3, #3]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d006      	beq.n	80057e8 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80057da:	4b3c      	ldr	r3, [pc, #240]	; (80058cc <USB_HC_StartXfer+0x288>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057e2:	4a3a      	ldr	r2, [pc, #232]	; (80058cc <USB_HC_StartXfer+0x288>)
 80057e4:	6013      	str	r3, [r2, #0]
 80057e6:	e005      	b.n	80057f4 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80057e8:	4b38      	ldr	r3, [pc, #224]	; (80058cc <USB_HC_StartXfer+0x288>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057f0:	4a36      	ldr	r2, [pc, #216]	; (80058cc <USB_HC_StartXfer+0x288>)
 80057f2:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80057f4:	4b35      	ldr	r3, [pc, #212]	; (80058cc <USB_HC_StartXfer+0x288>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057fc:	4a33      	ldr	r2, [pc, #204]	; (80058cc <USB_HC_StartXfer+0x288>)
 80057fe:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	4413      	add	r3, r2
 8005808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800580c:	461a      	mov	r2, r3
 800580e:	4b2f      	ldr	r3, [pc, #188]	; (80058cc <USB_HC_StartXfer+0x288>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005814:	79fb      	ldrb	r3, [r7, #7]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800581a:	2300      	movs	r3, #0
 800581c:	e04f      	b.n	80058be <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	78db      	ldrb	r3, [r3, #3]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d14a      	bne.n	80058bc <USB_HC_StartXfer+0x278>
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d046      	beq.n	80058bc <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	79db      	ldrb	r3, [r3, #7]
 8005832:	2b03      	cmp	r3, #3
 8005834:	d830      	bhi.n	8005898 <USB_HC_StartXfer+0x254>
 8005836:	a201      	add	r2, pc, #4	; (adr r2, 800583c <USB_HC_StartXfer+0x1f8>)
 8005838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583c:	0800584d 	.word	0x0800584d
 8005840:	08005871 	.word	0x08005871
 8005844:	0800584d 	.word	0x0800584d
 8005848:	08005871 	.word	0x08005871
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	3303      	adds	r3, #3
 8005852:	089b      	lsrs	r3, r3, #2
 8005854:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005856:	8afa      	ldrh	r2, [r7, #22]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585c:	b29b      	uxth	r3, r3
 800585e:	429a      	cmp	r2, r3
 8005860:	d91c      	bls.n	800589c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	f043 0220 	orr.w	r2, r3, #32
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	619a      	str	r2, [r3, #24]
        }
        break;
 800586e:	e015      	b.n	800589c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	3303      	adds	r3, #3
 8005876:	089b      	lsrs	r3, r3, #2
 8005878:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800587a:	8afa      	ldrh	r2, [r7, #22]
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	b29b      	uxth	r3, r3
 8005886:	429a      	cmp	r2, r3
 8005888:	d90a      	bls.n	80058a0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	619a      	str	r2, [r3, #24]
        }
        break;
 8005896:	e003      	b.n	80058a0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005898:	bf00      	nop
 800589a:	e002      	b.n	80058a2 <USB_HC_StartXfer+0x25e>
        break;
 800589c:	bf00      	nop
 800589e:	e000      	b.n	80058a2 <USB_HC_StartXfer+0x25e>
        break;
 80058a0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	68d9      	ldr	r1, [r3, #12]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	785a      	ldrb	r2, [r3, #1]
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	b298      	uxth	r0, r3
 80058b0:	2300      	movs	r3, #0
 80058b2:	9300      	str	r3, [sp, #0]
 80058b4:	4603      	mov	r3, r0
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f7ff fb84 	bl	8004fc4 <USB_WritePacket>
  }

  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3728      	adds	r7, #40	; 0x28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	1ff80000 	.word	0x1ff80000
 80058cc:	200000b8 	.word	0x200000b8

080058d0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	b29b      	uxth	r3, r3
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b087      	sub	sp, #28
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	460b      	mov	r3, r1
 80058fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8005902:	78fb      	ldrb	r3, [r7, #3]
 8005904:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005906:	2300      	movs	r3, #0
 8005908:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	4413      	add	r3, r2
 8005912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	0c9b      	lsrs	r3, r3, #18
 800591a:	f003 0303 	and.w	r3, r3, #3
 800591e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d002      	beq.n	800592c <USB_HC_Halt+0x3a>
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2b02      	cmp	r3, #2
 800592a:	d16c      	bne.n	8005a06 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	4413      	add	r3, r2
 8005934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	0151      	lsls	r1, r2, #5
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	440a      	add	r2, r1
 8005942:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005946:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800594a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005950:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d143      	bne.n	80059e0 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	4413      	add	r3, r2
 8005960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	0151      	lsls	r1, r2, #5
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	440a      	add	r2, r1
 800596e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005972:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005976:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	015a      	lsls	r2, r3, #5
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	4413      	add	r3, r2
 8005980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	0151      	lsls	r1, r2, #5
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	440a      	add	r2, r1
 800598e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005992:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005996:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	015a      	lsls	r2, r3, #5
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	4413      	add	r3, r2
 80059a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	0151      	lsls	r1, r2, #5
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	440a      	add	r2, r1
 80059ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059b6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	3301      	adds	r3, #1
 80059bc:	617b      	str	r3, [r7, #20]
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059c4:	d81d      	bhi.n	8005a02 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	015a      	lsls	r2, r3, #5
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	4413      	add	r3, r2
 80059ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059dc:	d0ec      	beq.n	80059b8 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80059de:	e080      	b.n	8005ae2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	0151      	lsls	r1, r2, #5
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	440a      	add	r2, r1
 80059f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059fe:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005a00:	e06f      	b.n	8005ae2 <USB_HC_Halt+0x1f0>
          break;
 8005a02:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005a04:	e06d      	b.n	8005ae2 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	0151      	lsls	r1, r2, #5
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	440a      	add	r2, r1
 8005a1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a24:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d143      	bne.n	8005abe <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	0151      	lsls	r1, r2, #5
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	440a      	add	r2, r1
 8005a4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a54:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	0151      	lsls	r1, r2, #5
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	440a      	add	r2, r1
 8005a6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a74:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	0151      	lsls	r1, r2, #5
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	440a      	add	r2, r1
 8005a8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a94:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	617b      	str	r3, [r7, #20]
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005aa2:	d81d      	bhi.n	8005ae0 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ab6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aba:	d0ec      	beq.n	8005a96 <USB_HC_Halt+0x1a4>
 8005abc:	e011      	b.n	8005ae2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	0151      	lsls	r1, r2, #5
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	440a      	add	r2, r1
 8005ad4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ad8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005adc:	6013      	str	r3, [r2, #0]
 8005ade:	e000      	b.n	8005ae2 <USB_HC_Halt+0x1f0>
          break;
 8005ae0:	bf00      	nop
    }
  }

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	371c      	adds	r7, #28
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	460b      	mov	r3, r1
 8005afa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005b00:	78fb      	ldrb	r3, [r7, #3]
 8005b02:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005b04:	2301      	movs	r3, #1
 8005b06:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	04da      	lsls	r2, r3, #19
 8005b0c:	4b15      	ldr	r3, [pc, #84]	; (8005b64 <USB_DoPing+0x74>)
 8005b0e:	4013      	ands	r3, r2
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	0151      	lsls	r1, r2, #5
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	440a      	add	r2, r1
 8005b18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b20:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	015a      	lsls	r2, r3, #5
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b38:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b40:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b4e:	461a      	mov	r2, r3
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	371c      	adds	r7, #28
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	1ff80000 	.word	0x1ff80000

08005b68 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f7ff f99f 	bl	8004ebc <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005b7e:	2110      	movs	r1, #16
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f7ff f9d7 	bl	8004f34 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7ff f9fa 	bl	8004f80 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	613b      	str	r3, [r7, #16]
 8005b90:	e01f      	b.n	8005bd2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ba8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bb0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bb8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	613b      	str	r3, [r7, #16]
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	2b0f      	cmp	r3, #15
 8005bd6:	d9dc      	bls.n	8005b92 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005bd8:	2300      	movs	r3, #0
 8005bda:	613b      	str	r3, [r7, #16]
 8005bdc:	e034      	b.n	8005c48 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bf4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bfc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c04:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c12:	461a      	mov	r2, r3
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	617b      	str	r3, [r7, #20]
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c24:	d80c      	bhi.n	8005c40 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c3c:	d0ec      	beq.n	8005c18 <USB_StopHost+0xb0>
 8005c3e:	e000      	b.n	8005c42 <USB_StopHost+0xda>
        break;
 8005c40:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	3301      	adds	r3, #1
 8005c46:	613b      	str	r3, [r7, #16]
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	2b0f      	cmp	r3, #15
 8005c4c:	d9c7      	bls.n	8005bde <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c54:	461a      	mov	r2, r3
 8005c56:	f04f 33ff 	mov.w	r3, #4294967295
 8005c5a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c62:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7ff f918 	bl	8004e9a <USB_EnableGlobalInt>

  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3718      	adds	r7, #24
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8005c78:	4904      	ldr	r1, [pc, #16]	; (8005c8c <MX_FATFS_Init+0x18>)
 8005c7a:	4805      	ldr	r0, [pc, #20]	; (8005c90 <MX_FATFS_Init+0x1c>)
 8005c7c:	f007 fda8 	bl	800d7d0 <FATFS_LinkDriver>
 8005c80:	4603      	mov	r3, r0
 8005c82:	461a      	mov	r2, r3
 8005c84:	4b03      	ldr	r3, [pc, #12]	; (8005c94 <MX_FATFS_Init+0x20>)
 8005c86:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8005c88:	bf00      	nop
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	20000730 	.word	0x20000730
 8005c90:	0800edf8 	.word	0x0800edf8
 8005c94:	200027cc 	.word	0x200027cc

08005c98 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005c9c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	4603      	mov	r3, r0
 8005cb0:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8005cce:	79fb      	ldrb	r3, [r7, #7]
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	4808      	ldr	r0, [pc, #32]	; (8005cf4 <USBH_status+0x34>)
 8005cd4:	f000 fe11 	bl	80068fa <USBH_MSC_UnitIsReady>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d002      	beq.n	8005ce4 <USBH_status+0x24>
  {
    res = RES_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	73fb      	strb	r3, [r7, #15]
 8005ce2:	e001      	b.n	8005ce8 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	200027d0 	.word	0x200027d0

08005cf8 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b094      	sub	sp, #80	; 0x50
 8005cfc:	af02      	add	r7, sp, #8
 8005cfe:	60b9      	str	r1, [r7, #8]
 8005d00:	607a      	str	r2, [r7, #4]
 8005d02:	603b      	str	r3, [r7, #0]
 8005d04:	4603      	mov	r3, r0
 8005d06:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8005d0e:	7bf9      	ldrb	r1, [r7, #15]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	4812      	ldr	r0, [pc, #72]	; (8005d64 <USBH_read+0x6c>)
 8005d1a:	f000 fe38 	bl	800698e <USBH_MSC_Read>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d103      	bne.n	8005d2c <USBH_read+0x34>
  {
    res = RES_OK;
 8005d24:	2300      	movs	r3, #0
 8005d26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005d2a:	e015      	b.n	8005d58 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005d2c:	f107 0210 	add.w	r2, r7, #16
 8005d30:	7bfb      	ldrb	r3, [r7, #15]
 8005d32:	4619      	mov	r1, r3
 8005d34:	480b      	ldr	r0, [pc, #44]	; (8005d64 <USBH_read+0x6c>)
 8005d36:	f000 fe06 	bl	8006946 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8005d3a:	7f7b      	ldrb	r3, [r7, #29]
 8005d3c:	2b28      	cmp	r3, #40	; 0x28
 8005d3e:	d003      	beq.n	8005d48 <USBH_read+0x50>
 8005d40:	2b3a      	cmp	r3, #58	; 0x3a
 8005d42:	d001      	beq.n	8005d48 <USBH_read+0x50>
 8005d44:	2b04      	cmp	r3, #4
 8005d46:	d103      	bne.n	8005d50 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 8005d4e:	e003      	b.n	8005d58 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005d56:	bf00      	nop
    }
  }

  return res;
 8005d58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3748      	adds	r7, #72	; 0x48
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	200027d0 	.word	0x200027d0

08005d68 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b094      	sub	sp, #80	; 0x50
 8005d6c:	af02      	add	r7, sp, #8
 8005d6e:	60b9      	str	r1, [r7, #8]
 8005d70:	607a      	str	r2, [r7, #4]
 8005d72:	603b      	str	r3, [r7, #0]
 8005d74:	4603      	mov	r3, r0
 8005d76:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8005d7e:	7bf9      	ldrb	r1, [r7, #15]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	4817      	ldr	r0, [pc, #92]	; (8005de8 <USBH_write+0x80>)
 8005d8a:	f000 fe69 	bl	8006a60 <USBH_MSC_Write>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d103      	bne.n	8005d9c <USBH_write+0x34>
  {
    res = RES_OK;
 8005d94:	2300      	movs	r3, #0
 8005d96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005d9a:	e01f      	b.n	8005ddc <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005d9c:	f107 0210 	add.w	r2, r7, #16
 8005da0:	7bfb      	ldrb	r3, [r7, #15]
 8005da2:	4619      	mov	r1, r3
 8005da4:	4810      	ldr	r0, [pc, #64]	; (8005de8 <USBH_write+0x80>)
 8005da6:	f000 fdce 	bl	8006946 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8005daa:	7f7b      	ldrb	r3, [r7, #29]
 8005dac:	2b27      	cmp	r3, #39	; 0x27
 8005dae:	d009      	beq.n	8005dc4 <USBH_write+0x5c>
 8005db0:	2b27      	cmp	r3, #39	; 0x27
 8005db2:	dc02      	bgt.n	8005dba <USBH_write+0x52>
 8005db4:	2b04      	cmp	r3, #4
 8005db6:	d009      	beq.n	8005dcc <USBH_write+0x64>
 8005db8:	e00c      	b.n	8005dd4 <USBH_write+0x6c>
 8005dba:	2b28      	cmp	r3, #40	; 0x28
 8005dbc:	d006      	beq.n	8005dcc <USBH_write+0x64>
 8005dbe:	2b3a      	cmp	r3, #58	; 0x3a
 8005dc0:	d004      	beq.n	8005dcc <USBH_write+0x64>
 8005dc2:	e007      	b.n	8005dd4 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005dca:	e007      	b.n	8005ddc <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005dd2:	e003      	b.n	8005ddc <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005dda:	bf00      	nop
    }
  }

  return res;
 8005ddc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3748      	adds	r7, #72	; 0x48
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	200027d0 	.word	0x200027d0

08005dec <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b090      	sub	sp, #64	; 0x40
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	4603      	mov	r3, r0
 8005df4:	603a      	str	r2, [r7, #0]
 8005df6:	71fb      	strb	r3, [r7, #7]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8005e02:	79bb      	ldrb	r3, [r7, #6]
 8005e04:	2b03      	cmp	r3, #3
 8005e06:	d852      	bhi.n	8005eae <USBH_ioctl+0xc2>
 8005e08:	a201      	add	r2, pc, #4	; (adr r2, 8005e10 <USBH_ioctl+0x24>)
 8005e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0e:	bf00      	nop
 8005e10:	08005e21 	.word	0x08005e21
 8005e14:	08005e29 	.word	0x08005e29
 8005e18:	08005e53 	.word	0x08005e53
 8005e1c:	08005e7f 	.word	0x08005e7f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8005e20:	2300      	movs	r3, #0
 8005e22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005e26:	e045      	b.n	8005eb4 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005e28:	f107 0208 	add.w	r2, r7, #8
 8005e2c:	79fb      	ldrb	r3, [r7, #7]
 8005e2e:	4619      	mov	r1, r3
 8005e30:	4823      	ldr	r0, [pc, #140]	; (8005ec0 <USBH_ioctl+0xd4>)
 8005e32:	f000 fd88 	bl	8006946 <USBH_MSC_GetLUNInfo>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d106      	bne.n	8005e4a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005e42:	2300      	movs	r3, #0
 8005e44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005e48:	e034      	b.n	8005eb4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005e50:	e030      	b.n	8005eb4 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005e52:	f107 0208 	add.w	r2, r7, #8
 8005e56:	79fb      	ldrb	r3, [r7, #7]
 8005e58:	4619      	mov	r1, r3
 8005e5a:	4819      	ldr	r0, [pc, #100]	; (8005ec0 <USBH_ioctl+0xd4>)
 8005e5c:	f000 fd73 	bl	8006946 <USBH_MSC_GetLUNInfo>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d107      	bne.n	8005e76 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8005e66:	8a3b      	ldrh	r3, [r7, #16]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005e74:	e01e      	b.n	8005eb4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005e7c:	e01a      	b.n	8005eb4 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005e7e:	f107 0208 	add.w	r2, r7, #8
 8005e82:	79fb      	ldrb	r3, [r7, #7]
 8005e84:	4619      	mov	r1, r3
 8005e86:	480e      	ldr	r0, [pc, #56]	; (8005ec0 <USBH_ioctl+0xd4>)
 8005e88:	f000 fd5d 	bl	8006946 <USBH_MSC_GetLUNInfo>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d109      	bne.n	8005ea6 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8005e92:	8a3b      	ldrh	r3, [r7, #16]
 8005e94:	0a5b      	lsrs	r3, r3, #9
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	461a      	mov	r2, r3
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005ea4:	e006      	b.n	8005eb4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005eac:	e002      	b.n	8005eb4 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8005eae:	2304      	movs	r3, #4
 8005eb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8005eb4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3740      	adds	r7, #64	; 0x40
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	200027d0 	.word	0x200027d0

08005ec4 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005ec4:	b590      	push	{r4, r7, lr}
 8005ec6:	b089      	sub	sp, #36	; 0x24
 8005ec8:	af04      	add	r7, sp, #16
 8005eca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ed2:	7919      	ldrb	r1, [r3, #4]
 8005ed4:	2350      	movs	r3, #80	; 0x50
 8005ed6:	2206      	movs	r2, #6
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f001 fc4f 	bl	800777c <USBH_FindInterface>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
 8005ee4:	2bff      	cmp	r3, #255	; 0xff
 8005ee6:	d002      	beq.n	8005eee <USBH_MSC_InterfaceInit+0x2a>
 8005ee8:	7bfb      	ldrb	r3, [r7, #15]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d901      	bls.n	8005ef2 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005eee:	2302      	movs	r3, #2
 8005ef0:	e0ef      	b.n	80060d2 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8005ef2:	7bfb      	ldrb	r3, [r7, #15]
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f001 fc24 	bl	8007744 <USBH_SelectInterface>
 8005efc:	4603      	mov	r3, r0
 8005efe:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005f00:	7bbb      	ldrb	r3, [r7, #14]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8005f06:	2302      	movs	r3, #2
 8005f08:	e0e3      	b.n	80060d2 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005f10:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005f14:	f008 f8a6 	bl	800e064 <malloc>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f22:	69db      	ldr	r3, [r3, #28]
 8005f24:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	e0d0      	b.n	80060d2 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8005f30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f34:	2100      	movs	r1, #0
 8005f36:	68b8      	ldr	r0, [r7, #8]
 8005f38:	f008 f8af 	bl	800e09a <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005f3c:	7bfb      	ldrb	r3, [r7, #15]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	211a      	movs	r1, #26
 8005f42:	fb01 f303 	mul.w	r3, r1, r3
 8005f46:	4413      	add	r3, r2
 8005f48:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	b25b      	sxtb	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	da16      	bge.n	8005f82 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	211a      	movs	r1, #26
 8005f5a:	fb01 f303 	mul.w	r3, r1, r3
 8005f5e:	4413      	add	r3, r2
 8005f60:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f64:	781a      	ldrb	r2, [r3, #0]
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f6a:	7bfb      	ldrb	r3, [r7, #15]
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	211a      	movs	r1, #26
 8005f70:	fb01 f303 	mul.w	r3, r1, r3
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005f7a:	881a      	ldrh	r2, [r3, #0]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	815a      	strh	r2, [r3, #10]
 8005f80:	e015      	b.n	8005fae <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005f82:	7bfb      	ldrb	r3, [r7, #15]
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	211a      	movs	r1, #26
 8005f88:	fb01 f303 	mul.w	r3, r1, r3
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f92:	781a      	ldrb	r2, [r3, #0]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f98:	7bfb      	ldrb	r3, [r7, #15]
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	211a      	movs	r1, #26
 8005f9e:	fb01 f303 	mul.w	r3, r1, r3
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005fa8:	881a      	ldrh	r2, [r3, #0]
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	211a      	movs	r1, #26
 8005fb4:	fb01 f303 	mul.w	r3, r1, r3
 8005fb8:	4413      	add	r3, r2
 8005fba:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	b25b      	sxtb	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	da16      	bge.n	8005ff4 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005fc6:	7bfb      	ldrb	r3, [r7, #15]
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	211a      	movs	r1, #26
 8005fcc:	fb01 f303 	mul.w	r3, r1, r3
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005fd6:	781a      	ldrb	r2, [r3, #0]
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005fdc:	7bfb      	ldrb	r3, [r7, #15]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	211a      	movs	r1, #26
 8005fe2:	fb01 f303 	mul.w	r3, r1, r3
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005fec:	881a      	ldrh	r2, [r3, #0]
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	815a      	strh	r2, [r3, #10]
 8005ff2:	e015      	b.n	8006020 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	211a      	movs	r1, #26
 8005ffa:	fb01 f303 	mul.w	r3, r1, r3
 8005ffe:	4413      	add	r3, r2
 8006000:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006004:	781a      	ldrb	r2, [r3, #0]
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800600a:	7bfb      	ldrb	r3, [r7, #15]
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	211a      	movs	r1, #26
 8006010:	fb01 f303 	mul.w	r3, r1, r3
 8006014:	4413      	add	r3, r2
 8006016:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800601a:	881a      	ldrh	r2, [r3, #0]
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	2200      	movs	r2, #0
 8006024:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	2200      	movs	r2, #0
 800602a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	2200      	movs	r2, #0
 8006030:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	799b      	ldrb	r3, [r3, #6]
 8006036:	4619      	mov	r1, r3
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f002 fdc2 	bl	8008bc2 <USBH_AllocPipe>
 800603e:	4603      	mov	r3, r0
 8006040:	461a      	mov	r2, r3
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	79db      	ldrb	r3, [r3, #7]
 800604a:	4619      	mov	r1, r3
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f002 fdb8 	bl	8008bc2 <USBH_AllocPipe>
 8006052:	4603      	mov	r3, r0
 8006054:	461a      	mov	r2, r3
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fda4 	bl	8006ba8 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	7959      	ldrb	r1, [r3, #5]
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	7998      	ldrb	r0, [r3, #6]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	8912      	ldrh	r2, [r2, #8]
 8006078:	9202      	str	r2, [sp, #8]
 800607a:	2202      	movs	r2, #2
 800607c:	9201      	str	r2, [sp, #4]
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	4623      	mov	r3, r4
 8006082:	4602      	mov	r2, r0
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f002 fd6d 	bl	8008b64 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	7919      	ldrb	r1, [r3, #4]
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	79d8      	ldrb	r0, [r3, #7]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	8952      	ldrh	r2, [r2, #10]
 80060a2:	9202      	str	r2, [sp, #8]
 80060a4:	2202      	movs	r2, #2
 80060a6:	9201      	str	r2, [sp, #4]
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	4623      	mov	r3, r4
 80060ac:	4602      	mov	r2, r0
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f002 fd58 	bl	8008b64 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	791b      	ldrb	r3, [r3, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	4619      	mov	r1, r3
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f007 feed 	bl	800de9c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	795b      	ldrb	r3, [r3, #5]
 80060c6:	2200      	movs	r2, #0
 80060c8:	4619      	mov	r1, r3
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f007 fee6 	bl	800de9c <USBH_LL_SetToggle>

  return USBH_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd90      	pop	{r4, r7, pc}

080060da <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b084      	sub	sp, #16
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	795b      	ldrb	r3, [r3, #5]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00e      	beq.n	8006112 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	795b      	ldrb	r3, [r3, #5]
 80060f8:	4619      	mov	r1, r3
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f002 fd51 	bl	8008ba2 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	795b      	ldrb	r3, [r3, #5]
 8006104:	4619      	mov	r1, r3
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f002 fd7c 	bl	8008c04 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	791b      	ldrb	r3, [r3, #4]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00e      	beq.n	8006138 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	791b      	ldrb	r3, [r3, #4]
 800611e:	4619      	mov	r1, r3
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f002 fd3e 	bl	8008ba2 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	791b      	ldrb	r3, [r3, #4]
 800612a:	4619      	mov	r1, r3
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f002 fd69 	bl	8008c04 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800613e:	69db      	ldr	r3, [r3, #28]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00b      	beq.n	800615c <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800614a:	69db      	ldr	r3, [r3, #28]
 800614c:	4618      	mov	r0, r3
 800614e:	f007 ff91 	bl	800e074 <free>
    phost->pActiveClass->pData = 0U;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006158:	2200      	movs	r2, #0
 800615a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b084      	sub	sp, #16
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006178:	2301      	movs	r3, #1
 800617a:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	7b9b      	ldrb	r3, [r3, #14]
 8006180:	2b02      	cmp	r3, #2
 8006182:	d004      	beq.n	800618e <USBH_MSC_ClassRequest+0x28>
 8006184:	2b03      	cmp	r3, #3
 8006186:	d03e      	beq.n	8006206 <USBH_MSC_ClassRequest+0xa0>
 8006188:	2b00      	cmp	r3, #0
 800618a:	d000      	beq.n	800618e <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 800618c:	e04a      	b.n	8006224 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	4619      	mov	r1, r3
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 fcea 	bl	8006b6c <USBH_MSC_BOT_REQ_GetMaxLUN>
 8006198:	4603      	mov	r3, r0
 800619a:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 800619c:	7bfb      	ldrb	r3, [r7, #15]
 800619e:	2b03      	cmp	r3, #3
 80061a0:	d104      	bne.n	80061ac <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2200      	movs	r2, #0
 80061a6:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 80061a8:	2300      	movs	r3, #0
 80061aa:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 80061ac:	7bfb      	ldrb	r3, [r7, #15]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d135      	bne.n	800621e <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d804      	bhi.n	80061c4 <USBH_MSC_ClassRequest+0x5e>
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	3301      	adds	r3, #1
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	e000      	b.n	80061c6 <USBH_MSC_ClassRequest+0x60>
 80061c4:	2202      	movs	r2, #2
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80061ca:	2300      	movs	r3, #0
 80061cc:	73bb      	strb	r3, [r7, #14]
 80061ce:	e014      	b.n	80061fa <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80061d0:	7bbb      	ldrb	r3, [r7, #14]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	2134      	movs	r1, #52	; 0x34
 80061d6:	fb01 f303 	mul.w	r3, r1, r3
 80061da:	4413      	add	r3, r2
 80061dc:	3392      	adds	r3, #146	; 0x92
 80061de:	2202      	movs	r2, #2
 80061e0:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 80061e2:	7bbb      	ldrb	r3, [r7, #14]
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	2134      	movs	r1, #52	; 0x34
 80061e8:	fb01 f303 	mul.w	r3, r1, r3
 80061ec:	4413      	add	r3, r2
 80061ee:	33c1      	adds	r3, #193	; 0xc1
 80061f0:	2200      	movs	r2, #0
 80061f2:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80061f4:	7bbb      	ldrb	r3, [r7, #14]
 80061f6:	3301      	adds	r3, #1
 80061f8:	73bb      	strb	r3, [r7, #14]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	7bba      	ldrb	r2, [r7, #14]
 8006200:	429a      	cmp	r2, r3
 8006202:	d3e5      	bcc.n	80061d0 <USBH_MSC_ClassRequest+0x6a>
      break;
 8006204:	e00b      	b.n	800621e <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8006206:	2100      	movs	r1, #0
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f002 f878 	bl	80082fe <USBH_ClrFeature>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d106      	bne.n	8006222 <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	7bda      	ldrb	r2, [r3, #15]
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	739a      	strb	r2, [r3, #14]
      break;
 800621c:	e001      	b.n	8006222 <USBH_MSC_ClassRequest+0xbc>
      break;
 800621e:	bf00      	nop
 8006220:	e000      	b.n	8006224 <USBH_MSC_ClassRequest+0xbe>
      break;
 8006222:	bf00      	nop
  }

  return status;
 8006224:	7bfb      	ldrb	r3, [r7, #15]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
	...

08006230 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800623e:	69db      	ldr	r3, [r3, #28]
 8006240:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8006242:	2301      	movs	r3, #1
 8006244:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8006246:	2301      	movs	r3, #1
 8006248:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800624a:	2301      	movs	r3, #1
 800624c:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	7b1b      	ldrb	r3, [r3, #12]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d003      	beq.n	800625e <USBH_MSC_Process+0x2e>
 8006256:	2b01      	cmp	r3, #1
 8006258:	f000 8271 	beq.w	800673e <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800625c:	e272      	b.n	8006744 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	b29b      	uxth	r3, r3
 800626a:	429a      	cmp	r2, r3
 800626c:	f080 824f 	bcs.w	800670e <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006276:	4619      	mov	r1, r3
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	2334      	movs	r3, #52	; 0x34
 800627c:	fb03 f301 	mul.w	r3, r3, r1
 8006280:	4413      	add	r3, r2
 8006282:	3391      	adds	r3, #145	; 0x91
 8006284:	2201      	movs	r2, #1
 8006286:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800628e:	4619      	mov	r1, r3
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	2334      	movs	r3, #52	; 0x34
 8006294:	fb03 f301 	mul.w	r3, r3, r1
 8006298:	4413      	add	r3, r2
 800629a:	3390      	adds	r3, #144	; 0x90
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	2b08      	cmp	r3, #8
 80062a0:	f200 8243 	bhi.w	800672a <USBH_MSC_Process+0x4fa>
 80062a4:	a201      	add	r2, pc, #4	; (adr r2, 80062ac <USBH_MSC_Process+0x7c>)
 80062a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062aa:	bf00      	nop
 80062ac:	080062d1 	.word	0x080062d1
 80062b0:	0800672b 	.word	0x0800672b
 80062b4:	08006399 	.word	0x08006399
 80062b8:	0800651d 	.word	0x0800651d
 80062bc:	080062f7 	.word	0x080062f7
 80062c0:	080065e9 	.word	0x080065e9
 80062c4:	0800672b 	.word	0x0800672b
 80062c8:	0800672b 	.word	0x0800672b
 80062cc:	080066fd 	.word	0x080066fd
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062d6:	4619      	mov	r1, r3
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	2334      	movs	r3, #52	; 0x34
 80062dc:	fb03 f301 	mul.w	r3, r3, r1
 80062e0:	4413      	add	r3, r2
 80062e2:	3390      	adds	r3, #144	; 0x90
 80062e4:	2204      	movs	r2, #4
 80062e6:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 80062f4:	e222      	b.n	800673c <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062fc:	b2d9      	uxtb	r1, r3
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006304:	461a      	mov	r2, r3
 8006306:	2334      	movs	r3, #52	; 0x34
 8006308:	fb03 f302 	mul.w	r3, r3, r2
 800630c:	3398      	adds	r3, #152	; 0x98
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	4413      	add	r3, r2
 8006312:	3307      	adds	r3, #7
 8006314:	461a      	mov	r2, r3
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 ff68 	bl	80071ec <USBH_MSC_SCSI_Inquiry>
 800631c:	4603      	mov	r3, r0
 800631e:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006320:	7bfb      	ldrb	r3, [r7, #15]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10b      	bne.n	800633e <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800632c:	4619      	mov	r1, r3
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	2334      	movs	r3, #52	; 0x34
 8006332:	fb03 f301 	mul.w	r3, r3, r1
 8006336:	4413      	add	r3, r2
 8006338:	3390      	adds	r3, #144	; 0x90
 800633a:	2202      	movs	r2, #2
 800633c:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800633e:	7bfb      	ldrb	r3, [r7, #15]
 8006340:	2b02      	cmp	r3, #2
 8006342:	d10c      	bne.n	800635e <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800634a:	4619      	mov	r1, r3
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	2334      	movs	r3, #52	; 0x34
 8006350:	fb03 f301 	mul.w	r3, r3, r1
 8006354:	4413      	add	r3, r2
 8006356:	3390      	adds	r3, #144	; 0x90
 8006358:	2205      	movs	r2, #5
 800635a:	701a      	strb	r2, [r3, #0]
            break;
 800635c:	e1e7      	b.n	800672e <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800635e:	7bfb      	ldrb	r3, [r7, #15]
 8006360:	2b04      	cmp	r3, #4
 8006362:	f040 81e4 	bne.w	800672e <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800636c:	4619      	mov	r1, r3
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	2334      	movs	r3, #52	; 0x34
 8006372:	fb03 f301 	mul.w	r3, r3, r1
 8006376:	4413      	add	r3, r2
 8006378:	3390      	adds	r3, #144	; 0x90
 800637a:	2201      	movs	r2, #1
 800637c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006384:	4619      	mov	r1, r3
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	2334      	movs	r3, #52	; 0x34
 800638a:	fb03 f301 	mul.w	r3, r3, r1
 800638e:	4413      	add	r3, r2
 8006390:	3391      	adds	r3, #145	; 0x91
 8006392:	2202      	movs	r2, #2
 8006394:	701a      	strb	r2, [r3, #0]
            break;
 8006396:	e1ca      	b.n	800672e <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	4619      	mov	r1, r3
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fe64 	bl	8007070 <USBH_MSC_SCSI_TestUnitReady>
 80063a8:	4603      	mov	r3, r0
 80063aa:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 80063ac:	7bbb      	ldrb	r3, [r7, #14]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d149      	bne.n	8006446 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80063b8:	4619      	mov	r1, r3
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	2334      	movs	r3, #52	; 0x34
 80063be:	fb03 f301 	mul.w	r3, r3, r1
 80063c2:	4413      	add	r3, r2
 80063c4:	3392      	adds	r3, #146	; 0x92
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00c      	beq.n	80063e6 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80063d2:	4619      	mov	r1, r3
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	2334      	movs	r3, #52	; 0x34
 80063d8:	fb03 f301 	mul.w	r3, r3, r1
 80063dc:	4413      	add	r3, r2
 80063de:	33c1      	adds	r3, #193	; 0xc1
 80063e0:	2201      	movs	r2, #1
 80063e2:	701a      	strb	r2, [r3, #0]
 80063e4:	e00b      	b.n	80063fe <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80063ec:	4619      	mov	r1, r3
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	2334      	movs	r3, #52	; 0x34
 80063f2:	fb03 f301 	mul.w	r3, r3, r1
 80063f6:	4413      	add	r3, r2
 80063f8:	33c1      	adds	r3, #193	; 0xc1
 80063fa:	2200      	movs	r2, #0
 80063fc:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006404:	4619      	mov	r1, r3
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	2334      	movs	r3, #52	; 0x34
 800640a:	fb03 f301 	mul.w	r3, r3, r1
 800640e:	4413      	add	r3, r2
 8006410:	3390      	adds	r3, #144	; 0x90
 8006412:	2203      	movs	r2, #3
 8006414:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800641c:	4619      	mov	r1, r3
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	2334      	movs	r3, #52	; 0x34
 8006422:	fb03 f301 	mul.w	r3, r3, r1
 8006426:	4413      	add	r3, r2
 8006428:	3391      	adds	r3, #145	; 0x91
 800642a:	2200      	movs	r2, #0
 800642c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006434:	4619      	mov	r1, r3
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	2334      	movs	r3, #52	; 0x34
 800643a:	fb03 f301 	mul.w	r3, r3, r1
 800643e:	4413      	add	r3, r2
 8006440:	3392      	adds	r3, #146	; 0x92
 8006442:	2200      	movs	r2, #0
 8006444:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8006446:	7bbb      	ldrb	r3, [r7, #14]
 8006448:	2b02      	cmp	r3, #2
 800644a:	d14a      	bne.n	80064e2 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006452:	4619      	mov	r1, r3
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	2334      	movs	r3, #52	; 0x34
 8006458:	fb03 f301 	mul.w	r3, r3, r1
 800645c:	4413      	add	r3, r2
 800645e:	3392      	adds	r3, #146	; 0x92
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	2b02      	cmp	r3, #2
 8006464:	d00c      	beq.n	8006480 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800646c:	4619      	mov	r1, r3
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	2334      	movs	r3, #52	; 0x34
 8006472:	fb03 f301 	mul.w	r3, r3, r1
 8006476:	4413      	add	r3, r2
 8006478:	33c1      	adds	r3, #193	; 0xc1
 800647a:	2201      	movs	r2, #1
 800647c:	701a      	strb	r2, [r3, #0]
 800647e:	e00b      	b.n	8006498 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006486:	4619      	mov	r1, r3
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	2334      	movs	r3, #52	; 0x34
 800648c:	fb03 f301 	mul.w	r3, r3, r1
 8006490:	4413      	add	r3, r2
 8006492:	33c1      	adds	r3, #193	; 0xc1
 8006494:	2200      	movs	r2, #0
 8006496:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800649e:	4619      	mov	r1, r3
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	2334      	movs	r3, #52	; 0x34
 80064a4:	fb03 f301 	mul.w	r3, r3, r1
 80064a8:	4413      	add	r3, r2
 80064aa:	3390      	adds	r3, #144	; 0x90
 80064ac:	2205      	movs	r2, #5
 80064ae:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80064b6:	4619      	mov	r1, r3
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	2334      	movs	r3, #52	; 0x34
 80064bc:	fb03 f301 	mul.w	r3, r3, r1
 80064c0:	4413      	add	r3, r2
 80064c2:	3391      	adds	r3, #145	; 0x91
 80064c4:	2201      	movs	r2, #1
 80064c6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80064ce:	4619      	mov	r1, r3
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	2334      	movs	r3, #52	; 0x34
 80064d4:	fb03 f301 	mul.w	r3, r3, r1
 80064d8:	4413      	add	r3, r2
 80064da:	3392      	adds	r3, #146	; 0x92
 80064dc:	2202      	movs	r2, #2
 80064de:	701a      	strb	r2, [r3, #0]
            break;
 80064e0:	e127      	b.n	8006732 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 80064e2:	7bbb      	ldrb	r3, [r7, #14]
 80064e4:	2b04      	cmp	r3, #4
 80064e6:	f040 8124 	bne.w	8006732 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80064f0:	4619      	mov	r1, r3
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	2334      	movs	r3, #52	; 0x34
 80064f6:	fb03 f301 	mul.w	r3, r3, r1
 80064fa:	4413      	add	r3, r2
 80064fc:	3390      	adds	r3, #144	; 0x90
 80064fe:	2201      	movs	r2, #1
 8006500:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006508:	4619      	mov	r1, r3
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	2334      	movs	r3, #52	; 0x34
 800650e:	fb03 f301 	mul.w	r3, r3, r1
 8006512:	4413      	add	r3, r2
 8006514:	3391      	adds	r3, #145	; 0x91
 8006516:	2202      	movs	r2, #2
 8006518:	701a      	strb	r2, [r3, #0]
            break;
 800651a:	e10a      	b.n	8006732 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006522:	b2d9      	uxtb	r1, r3
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800652a:	461a      	mov	r2, r3
 800652c:	2334      	movs	r3, #52	; 0x34
 800652e:	fb03 f302 	mul.w	r3, r3, r2
 8006532:	3390      	adds	r3, #144	; 0x90
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	4413      	add	r3, r2
 8006538:	3304      	adds	r3, #4
 800653a:	461a      	mov	r2, r3
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fdda 	bl	80070f6 <USBH_MSC_SCSI_ReadCapacity>
 8006542:	4603      	mov	r3, r0
 8006544:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006546:	7bfb      	ldrb	r3, [r7, #15]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d120      	bne.n	800658e <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006552:	4619      	mov	r1, r3
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	2334      	movs	r3, #52	; 0x34
 8006558:	fb03 f301 	mul.w	r3, r3, r1
 800655c:	4413      	add	r3, r2
 800655e:	3390      	adds	r3, #144	; 0x90
 8006560:	2201      	movs	r2, #1
 8006562:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800656a:	4619      	mov	r1, r3
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	2334      	movs	r3, #52	; 0x34
 8006570:	fb03 f301 	mul.w	r3, r3, r1
 8006574:	4413      	add	r3, r2
 8006576:	3391      	adds	r3, #145	; 0x91
 8006578:	2200      	movs	r2, #0
 800657a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006582:	3301      	adds	r3, #1
 8006584:	b29a      	uxth	r2, r3
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800658c:	e0d3      	b.n	8006736 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800658e:	7bfb      	ldrb	r3, [r7, #15]
 8006590:	2b02      	cmp	r3, #2
 8006592:	d10c      	bne.n	80065ae <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800659a:	4619      	mov	r1, r3
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	2334      	movs	r3, #52	; 0x34
 80065a0:	fb03 f301 	mul.w	r3, r3, r1
 80065a4:	4413      	add	r3, r2
 80065a6:	3390      	adds	r3, #144	; 0x90
 80065a8:	2205      	movs	r2, #5
 80065aa:	701a      	strb	r2, [r3, #0]
            break;
 80065ac:	e0c3      	b.n	8006736 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
 80065b0:	2b04      	cmp	r3, #4
 80065b2:	f040 80c0 	bne.w	8006736 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80065bc:	4619      	mov	r1, r3
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	2334      	movs	r3, #52	; 0x34
 80065c2:	fb03 f301 	mul.w	r3, r3, r1
 80065c6:	4413      	add	r3, r2
 80065c8:	3390      	adds	r3, #144	; 0x90
 80065ca:	2201      	movs	r2, #1
 80065cc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80065d4:	4619      	mov	r1, r3
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	2334      	movs	r3, #52	; 0x34
 80065da:	fb03 f301 	mul.w	r3, r3, r1
 80065de:	4413      	add	r3, r2
 80065e0:	3391      	adds	r3, #145	; 0x91
 80065e2:	2202      	movs	r2, #2
 80065e4:	701a      	strb	r2, [r3, #0]
            break;
 80065e6:	e0a6      	b.n	8006736 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80065ee:	b2d9      	uxtb	r1, r3
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80065f6:	461a      	mov	r2, r3
 80065f8:	2334      	movs	r3, #52	; 0x34
 80065fa:	fb03 f302 	mul.w	r3, r3, r2
 80065fe:	3398      	adds	r3, #152	; 0x98
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	4413      	add	r3, r2
 8006604:	3304      	adds	r3, #4
 8006606:	461a      	mov	r2, r3
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 fe94 	bl	8007336 <USBH_MSC_SCSI_RequestSense>
 800660e:	4603      	mov	r3, r0
 8006610:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006612:	7bfb      	ldrb	r3, [r7, #15]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d145      	bne.n	80066a4 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800661e:	4619      	mov	r1, r3
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	2334      	movs	r3, #52	; 0x34
 8006624:	fb03 f301 	mul.w	r3, r3, r1
 8006628:	4413      	add	r3, r2
 800662a:	339c      	adds	r3, #156	; 0x9c
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	2b06      	cmp	r3, #6
 8006630:	d00c      	beq.n	800664c <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006638:	4619      	mov	r1, r3
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	2334      	movs	r3, #52	; 0x34
 800663e:	fb03 f301 	mul.w	r3, r3, r1
 8006642:	4413      	add	r3, r2
 8006644:	339c      	adds	r3, #156	; 0x9c
 8006646:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006648:	2b02      	cmp	r3, #2
 800664a:	d117      	bne.n	800667c <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	f242 720f 	movw	r2, #9999	; 0x270f
 800665e:	4293      	cmp	r3, r2
 8006660:	d80c      	bhi.n	800667c <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006668:	4619      	mov	r1, r3
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	2334      	movs	r3, #52	; 0x34
 800666e:	fb03 f301 	mul.w	r3, r3, r1
 8006672:	4413      	add	r3, r2
 8006674:	3390      	adds	r3, #144	; 0x90
 8006676:	2202      	movs	r2, #2
 8006678:	701a      	strb	r2, [r3, #0]
                  break;
 800667a:	e05f      	b.n	800673c <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006682:	4619      	mov	r1, r3
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	2334      	movs	r3, #52	; 0x34
 8006688:	fb03 f301 	mul.w	r3, r3, r1
 800668c:	4413      	add	r3, r2
 800668e:	3390      	adds	r3, #144	; 0x90
 8006690:	2201      	movs	r2, #1
 8006692:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800669a:	3301      	adds	r3, #1
 800669c:	b29a      	uxth	r2, r3
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d10c      	bne.n	80066c4 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80066b0:	4619      	mov	r1, r3
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	2334      	movs	r3, #52	; 0x34
 80066b6:	fb03 f301 	mul.w	r3, r3, r1
 80066ba:	4413      	add	r3, r2
 80066bc:	3390      	adds	r3, #144	; 0x90
 80066be:	2208      	movs	r2, #8
 80066c0:	701a      	strb	r2, [r3, #0]
            break;
 80066c2:	e03a      	b.n	800673a <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	2b04      	cmp	r3, #4
 80066c8:	d137      	bne.n	800673a <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80066d0:	4619      	mov	r1, r3
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	2334      	movs	r3, #52	; 0x34
 80066d6:	fb03 f301 	mul.w	r3, r3, r1
 80066da:	4413      	add	r3, r2
 80066dc:	3390      	adds	r3, #144	; 0x90
 80066de:	2201      	movs	r2, #1
 80066e0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80066e8:	4619      	mov	r1, r3
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	2334      	movs	r3, #52	; 0x34
 80066ee:	fb03 f301 	mul.w	r3, r3, r1
 80066f2:	4413      	add	r3, r2
 80066f4:	3391      	adds	r3, #145	; 0x91
 80066f6:	2202      	movs	r2, #2
 80066f8:	701a      	strb	r2, [r3, #0]
            break;
 80066fa:	e01e      	b.n	800673a <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006702:	3301      	adds	r3, #1
 8006704:	b29a      	uxth	r2, r3
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800670c:	e016      	b.n	800673c <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	2200      	movs	r2, #0
 8006712:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	2201      	movs	r2, #1
 800671a:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006722:	2102      	movs	r1, #2
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	4798      	blx	r3
      break;
 8006728:	e00c      	b.n	8006744 <USBH_MSC_Process+0x514>
            break;
 800672a:	bf00      	nop
 800672c:	e00a      	b.n	8006744 <USBH_MSC_Process+0x514>
            break;
 800672e:	bf00      	nop
 8006730:	e008      	b.n	8006744 <USBH_MSC_Process+0x514>
            break;
 8006732:	bf00      	nop
 8006734:	e006      	b.n	8006744 <USBH_MSC_Process+0x514>
            break;
 8006736:	bf00      	nop
 8006738:	e004      	b.n	8006744 <USBH_MSC_Process+0x514>
            break;
 800673a:	bf00      	nop
      break;
 800673c:	e002      	b.n	8006744 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800673e:	2300      	movs	r3, #0
 8006740:	75fb      	strb	r3, [r7, #23]
      break;
 8006742:	bf00      	nop
  }
  return error;
 8006744:	7dfb      	ldrb	r3, [r7, #23]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3718      	adds	r7, #24
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop

08006750 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b088      	sub	sp, #32
 800676a:	af02      	add	r7, sp, #8
 800676c:	6078      	str	r0, [r7, #4]
 800676e:	460b      	mov	r3, r1
 8006770:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006778:	69db      	ldr	r3, [r3, #28]
 800677a:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800677c:	2301      	movs	r3, #1
 800677e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8006780:	2301      	movs	r3, #1
 8006782:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8006784:	78fb      	ldrb	r3, [r7, #3]
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	2134      	movs	r1, #52	; 0x34
 800678a:	fb01 f303 	mul.w	r3, r1, r3
 800678e:	4413      	add	r3, r2
 8006790:	3390      	adds	r3, #144	; 0x90
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	2b06      	cmp	r3, #6
 8006796:	d004      	beq.n	80067a2 <USBH_MSC_RdWrProcess+0x3c>
 8006798:	2b07      	cmp	r3, #7
 800679a:	d037      	beq.n	800680c <USBH_MSC_RdWrProcess+0xa6>
 800679c:	2b05      	cmp	r3, #5
 800679e:	d06a      	beq.n	8006876 <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 80067a0:	e0a6      	b.n	80068f0 <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80067a2:	78f9      	ldrb	r1, [r7, #3]
 80067a4:	2300      	movs	r3, #0
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	2300      	movs	r3, #0
 80067aa:	2200      	movs	r2, #0
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 fea6 	bl	80074fe <USBH_MSC_SCSI_Read>
 80067b2:	4603      	mov	r3, r0
 80067b4:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10b      	bne.n	80067d4 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80067bc:	78fb      	ldrb	r3, [r7, #3]
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	2134      	movs	r1, #52	; 0x34
 80067c2:	fb01 f303 	mul.w	r3, r1, r3
 80067c6:	4413      	add	r3, r2
 80067c8:	3390      	adds	r3, #144	; 0x90
 80067ca:	2201      	movs	r2, #1
 80067cc:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80067ce:	2300      	movs	r3, #0
 80067d0:	75fb      	strb	r3, [r7, #23]
      break;
 80067d2:	e088      	b.n	80068e6 <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 80067d4:	7bfb      	ldrb	r3, [r7, #15]
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d109      	bne.n	80067ee <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80067da:	78fb      	ldrb	r3, [r7, #3]
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	2134      	movs	r1, #52	; 0x34
 80067e0:	fb01 f303 	mul.w	r3, r1, r3
 80067e4:	4413      	add	r3, r2
 80067e6:	3390      	adds	r3, #144	; 0x90
 80067e8:	2205      	movs	r2, #5
 80067ea:	701a      	strb	r2, [r3, #0]
      break;
 80067ec:	e07b      	b.n	80068e6 <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80067ee:	7bfb      	ldrb	r3, [r7, #15]
 80067f0:	2b04      	cmp	r3, #4
 80067f2:	d178      	bne.n	80068e6 <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80067f4:	78fb      	ldrb	r3, [r7, #3]
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	2134      	movs	r1, #52	; 0x34
 80067fa:	fb01 f303 	mul.w	r3, r1, r3
 80067fe:	4413      	add	r3, r2
 8006800:	3390      	adds	r3, #144	; 0x90
 8006802:	2208      	movs	r2, #8
 8006804:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006806:	2302      	movs	r3, #2
 8006808:	75fb      	strb	r3, [r7, #23]
      break;
 800680a:	e06c      	b.n	80068e6 <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800680c:	78f9      	ldrb	r1, [r7, #3]
 800680e:	2300      	movs	r3, #0
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	2300      	movs	r3, #0
 8006814:	2200      	movs	r2, #0
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fe06 	bl	8007428 <USBH_MSC_SCSI_Write>
 800681c:	4603      	mov	r3, r0
 800681e:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8006820:	7bfb      	ldrb	r3, [r7, #15]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10b      	bne.n	800683e <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006826:	78fb      	ldrb	r3, [r7, #3]
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	2134      	movs	r1, #52	; 0x34
 800682c:	fb01 f303 	mul.w	r3, r1, r3
 8006830:	4413      	add	r3, r2
 8006832:	3390      	adds	r3, #144	; 0x90
 8006834:	2201      	movs	r2, #1
 8006836:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8006838:	2300      	movs	r3, #0
 800683a:	75fb      	strb	r3, [r7, #23]
      break;
 800683c:	e055      	b.n	80068ea <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 800683e:	7bfb      	ldrb	r3, [r7, #15]
 8006840:	2b02      	cmp	r3, #2
 8006842:	d109      	bne.n	8006858 <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8006844:	78fb      	ldrb	r3, [r7, #3]
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	2134      	movs	r1, #52	; 0x34
 800684a:	fb01 f303 	mul.w	r3, r1, r3
 800684e:	4413      	add	r3, r2
 8006850:	3390      	adds	r3, #144	; 0x90
 8006852:	2205      	movs	r2, #5
 8006854:	701a      	strb	r2, [r3, #0]
      break;
 8006856:	e048      	b.n	80068ea <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006858:	7bfb      	ldrb	r3, [r7, #15]
 800685a:	2b04      	cmp	r3, #4
 800685c:	d145      	bne.n	80068ea <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800685e:	78fb      	ldrb	r3, [r7, #3]
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	2134      	movs	r1, #52	; 0x34
 8006864:	fb01 f303 	mul.w	r3, r1, r3
 8006868:	4413      	add	r3, r2
 800686a:	3390      	adds	r3, #144	; 0x90
 800686c:	2208      	movs	r2, #8
 800686e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006870:	2302      	movs	r3, #2
 8006872:	75fb      	strb	r3, [r7, #23]
      break;
 8006874:	e039      	b.n	80068ea <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8006876:	78fb      	ldrb	r3, [r7, #3]
 8006878:	2234      	movs	r2, #52	; 0x34
 800687a:	fb02 f303 	mul.w	r3, r2, r3
 800687e:	3398      	adds	r3, #152	; 0x98
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	4413      	add	r3, r2
 8006884:	1d1a      	adds	r2, r3, #4
 8006886:	78fb      	ldrb	r3, [r7, #3]
 8006888:	4619      	mov	r1, r3
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fd53 	bl	8007336 <USBH_MSC_SCSI_RequestSense>
 8006890:	4603      	mov	r3, r0
 8006892:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8006894:	7bfb      	ldrb	r3, [r7, #15]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d113      	bne.n	80068c2 <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800689a:	78fb      	ldrb	r3, [r7, #3]
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	2134      	movs	r1, #52	; 0x34
 80068a0:	fb01 f303 	mul.w	r3, r1, r3
 80068a4:	4413      	add	r3, r2
 80068a6:	3390      	adds	r3, #144	; 0x90
 80068a8:	2201      	movs	r2, #1
 80068aa:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80068ac:	78fb      	ldrb	r3, [r7, #3]
 80068ae:	693a      	ldr	r2, [r7, #16]
 80068b0:	2134      	movs	r1, #52	; 0x34
 80068b2:	fb01 f303 	mul.w	r3, r1, r3
 80068b6:	4413      	add	r3, r2
 80068b8:	3391      	adds	r3, #145	; 0x91
 80068ba:	2202      	movs	r2, #2
 80068bc:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 80068be:	2302      	movs	r3, #2
 80068c0:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 80068c2:	7bfb      	ldrb	r3, [r7, #15]
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d012      	beq.n	80068ee <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80068c8:	7bfb      	ldrb	r3, [r7, #15]
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	d10f      	bne.n	80068ee <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80068ce:	78fb      	ldrb	r3, [r7, #3]
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	2134      	movs	r1, #52	; 0x34
 80068d4:	fb01 f303 	mul.w	r3, r1, r3
 80068d8:	4413      	add	r3, r2
 80068da:	3390      	adds	r3, #144	; 0x90
 80068dc:	2208      	movs	r2, #8
 80068de:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80068e0:	2302      	movs	r3, #2
 80068e2:	75fb      	strb	r3, [r7, #23]
      break;
 80068e4:	e003      	b.n	80068ee <USBH_MSC_RdWrProcess+0x188>
      break;
 80068e6:	bf00      	nop
 80068e8:	e002      	b.n	80068f0 <USBH_MSC_RdWrProcess+0x18a>
      break;
 80068ea:	bf00      	nop
 80068ec:	e000      	b.n	80068f0 <USBH_MSC_RdWrProcess+0x18a>
      break;
 80068ee:	bf00      	nop

  }
  return error;
 80068f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3718      	adds	r7, #24
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b085      	sub	sp, #20
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
 8006902:	460b      	mov	r3, r1
 8006904:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b0b      	cmp	r3, #11
 8006918:	d10c      	bne.n	8006934 <USBH_MSC_UnitIsReady+0x3a>
 800691a:	78fb      	ldrb	r3, [r7, #3]
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	2134      	movs	r1, #52	; 0x34
 8006920:	fb01 f303 	mul.w	r3, r1, r3
 8006924:	4413      	add	r3, r2
 8006926:	3391      	adds	r3, #145	; 0x91
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d102      	bne.n	8006934 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800692e:	2301      	movs	r3, #1
 8006930:	73fb      	strb	r3, [r7, #15]
 8006932:	e001      	b.n	8006938 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8006934:	2300      	movs	r3, #0
 8006936:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8006938:	7bfb      	ldrb	r3, [r7, #15]
}
 800693a:	4618      	mov	r0, r3
 800693c:	3714      	adds	r7, #20
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b086      	sub	sp, #24
 800694a:	af00      	add	r7, sp, #0
 800694c:	60f8      	str	r0, [r7, #12]
 800694e:	460b      	mov	r3, r1
 8006950:	607a      	str	r2, [r7, #4]
 8006952:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800695a:	69db      	ldr	r3, [r3, #28]
 800695c:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b0b      	cmp	r3, #11
 8006966:	d10d      	bne.n	8006984 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8006968:	7afb      	ldrb	r3, [r7, #11]
 800696a:	2234      	movs	r2, #52	; 0x34
 800696c:	fb02 f303 	mul.w	r3, r2, r3
 8006970:	3390      	adds	r3, #144	; 0x90
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	4413      	add	r3, r2
 8006976:	2234      	movs	r2, #52	; 0x34
 8006978:	4619      	mov	r1, r3
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f007 fb82 	bl	800e084 <memcpy>
    return USBH_OK;
 8006980:	2300      	movs	r3, #0
 8006982:	e000      	b.n	8006986 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8006984:	2302      	movs	r3, #2
  }
}
 8006986:	4618      	mov	r0, r3
 8006988:	3718      	adds	r7, #24
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b088      	sub	sp, #32
 8006992:	af02      	add	r7, sp, #8
 8006994:	60f8      	str	r0, [r7, #12]
 8006996:	607a      	str	r2, [r7, #4]
 8006998:	603b      	str	r3, [r7, #0]
 800699a:	460b      	mov	r3, r1
 800699c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069a4:	69db      	ldr	r3, [r3, #28]
 80069a6:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00e      	beq.n	80069d2 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80069ba:	2b0b      	cmp	r3, #11
 80069bc:	d109      	bne.n	80069d2 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80069be:	7afb      	ldrb	r3, [r7, #11]
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	2134      	movs	r1, #52	; 0x34
 80069c4:	fb01 f303 	mul.w	r3, r1, r3
 80069c8:	4413      	add	r3, r2
 80069ca:	3390      	adds	r3, #144	; 0x90
 80069cc:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d001      	beq.n	80069d6 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 80069d2:	2302      	movs	r3, #2
 80069d4:	e040      	b.n	8006a58 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	2206      	movs	r2, #6
 80069da:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 80069dc:	7afb      	ldrb	r3, [r7, #11]
 80069de:	697a      	ldr	r2, [r7, #20]
 80069e0:	2134      	movs	r1, #52	; 0x34
 80069e2:	fb01 f303 	mul.w	r3, r1, r3
 80069e6:	4413      	add	r3, r2
 80069e8:	3390      	adds	r3, #144	; 0x90
 80069ea:	2206      	movs	r2, #6
 80069ec:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80069ee:	7afb      	ldrb	r3, [r7, #11]
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 80069f8:	7af9      	ldrb	r1, [r7, #11]
 80069fa:	6a3b      	ldr	r3, [r7, #32]
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f000 fd7b 	bl	80074fe <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006a0e:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006a10:	e016      	b.n	8006a40 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	1ad2      	subs	r2, r2, r3
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	f242 7110 	movw	r1, #10000	; 0x2710
 8006a22:	fb01 f303 	mul.w	r3, r1, r3
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d805      	bhi.n	8006a36 <USBH_MSC_Read+0xa8>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d104      	bne.n	8006a40 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	e00b      	b.n	8006a58 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006a40:	7afb      	ldrb	r3, [r7, #11]
 8006a42:	4619      	mov	r1, r3
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f7ff fe8e 	bl	8006766 <USBH_MSC_RdWrProcess>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d0e0      	beq.n	8006a12 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	2201      	movs	r2, #1
 8006a54:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3718      	adds	r7, #24
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b088      	sub	sp, #32
 8006a64:	af02      	add	r7, sp, #8
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	607a      	str	r2, [r7, #4]
 8006a6a:	603b      	str	r3, [r7, #0]
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a76:	69db      	ldr	r3, [r3, #28]
 8006a78:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00e      	beq.n	8006aa4 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8006a8c:	2b0b      	cmp	r3, #11
 8006a8e:	d109      	bne.n	8006aa4 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8006a90:	7afb      	ldrb	r3, [r7, #11]
 8006a92:	697a      	ldr	r2, [r7, #20]
 8006a94:	2134      	movs	r1, #52	; 0x34
 8006a96:	fb01 f303 	mul.w	r3, r1, r3
 8006a9a:	4413      	add	r3, r2
 8006a9c:	3390      	adds	r3, #144	; 0x90
 8006a9e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d001      	beq.n	8006aa8 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	e040      	b.n	8006b2a <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	2207      	movs	r2, #7
 8006aac:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8006aae:	7afb      	ldrb	r3, [r7, #11]
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	2134      	movs	r1, #52	; 0x34
 8006ab4:	fb01 f303 	mul.w	r3, r1, r3
 8006ab8:	4413      	add	r3, r2
 8006aba:	3390      	adds	r3, #144	; 0x90
 8006abc:	2207      	movs	r2, #7
 8006abe:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8006ac0:	7afb      	ldrb	r3, [r7, #11]
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8006aca:	7af9      	ldrb	r1, [r7, #11]
 8006acc:	6a3b      	ldr	r3, [r7, #32]
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f000 fca7 	bl	8007428 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006ae0:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006ae2:	e016      	b.n	8006b12 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	1ad2      	subs	r2, r2, r3
 8006aee:	6a3b      	ldr	r3, [r7, #32]
 8006af0:	f242 7110 	movw	r1, #10000	; 0x2710
 8006af4:	fb01 f303 	mul.w	r3, r1, r3
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d805      	bhi.n	8006b08 <USBH_MSC_Write+0xa8>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d104      	bne.n	8006b12 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8006b0e:	2302      	movs	r3, #2
 8006b10:	e00b      	b.n	8006b2a <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006b12:	7afb      	ldrb	r3, [r7, #11]
 8006b14:	4619      	mov	r1, r3
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f7ff fe25 	bl	8006766 <USBH_MSC_RdWrProcess>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d0e0      	beq.n	8006ae4 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	2201      	movs	r2, #1
 8006b26:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3718      	adds	r7, #24
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b082      	sub	sp, #8
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2221      	movs	r2, #33	; 0x21
 8006b3e:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	22ff      	movs	r2, #255	; 0xff
 8006b44:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8006b58:	2200      	movs	r2, #0
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f001 fdae 	bl	80086be <USBH_CtlReq>
 8006b62:	4603      	mov	r3, r0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3708      	adds	r7, #8
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	22a1      	movs	r2, #161	; 0xa1
 8006b7a:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	22fe      	movs	r2, #254	; 0xfe
 8006b80:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2201      	movs	r2, #1
 8006b92:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8006b94:	2201      	movs	r2, #1
 8006b96:	6839      	ldr	r1, [r7, #0]
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f001 fd90 	bl	80086be <USBH_CtlReq>
 8006b9e:	4603      	mov	r3, r0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3708      	adds	r7, #8
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bb6:	69db      	ldr	r3, [r3, #28]
 8006bb8:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	4a09      	ldr	r2, [pc, #36]	; (8006be4 <USBH_MSC_BOT_Init+0x3c>)
 8006bbe:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4a09      	ldr	r2, [pc, #36]	; (8006be8 <USBH_MSC_BOT_Init+0x40>)
 8006bc4:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3714      	adds	r7, #20
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr
 8006be4:	43425355 	.word	0x43425355
 8006be8:	20304050 	.word	0x20304050

08006bec <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b088      	sub	sp, #32
 8006bf0:	af02      	add	r7, sp, #8
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8006c00:	2301      	movs	r3, #1
 8006c02:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c04:	2300      	movs	r3, #0
 8006c06:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c0e:	69db      	ldr	r3, [r3, #28]
 8006c10:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	2b0a      	cmp	r3, #10
 8006c20:	f200 81a1 	bhi.w	8006f66 <USBH_MSC_BOT_Process+0x37a>
 8006c24:	a201      	add	r2, pc, #4	; (adr r2, 8006c2c <USBH_MSC_BOT_Process+0x40>)
 8006c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2a:	bf00      	nop
 8006c2c:	08006c59 	.word	0x08006c59
 8006c30:	08006c83 	.word	0x08006c83
 8006c34:	08006ced 	.word	0x08006ced
 8006c38:	08006d0b 	.word	0x08006d0b
 8006c3c:	08006d8f 	.word	0x08006d8f
 8006c40:	08006db3 	.word	0x08006db3
 8006c44:	08006e4d 	.word	0x08006e4d
 8006c48:	08006e69 	.word	0x08006e69
 8006c4c:	08006ebb 	.word	0x08006ebb
 8006c50:	08006eeb 	.word	0x08006eeb
 8006c54:	08006f4d 	.word	0x08006f4d
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	78fa      	ldrb	r2, [r7, #3]
 8006c5c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	2202      	movs	r2, #2
 8006c64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	795a      	ldrb	r2, [r3, #5]
 8006c72:	2301      	movs	r3, #1
 8006c74:	9300      	str	r3, [sp, #0]
 8006c76:	4613      	mov	r3, r2
 8006c78:	221f      	movs	r2, #31
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f001 ff2f 	bl	8008ade <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8006c80:	e180      	b.n	8006f84 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	795b      	ldrb	r3, [r3, #5]
 8006c86:	4619      	mov	r1, r3
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f007 f8dd 	bl	800de48 <USBH_LL_GetURBState>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006c92:	7d3b      	ldrb	r3, [r7, #20]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d118      	bne.n	8006cca <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00f      	beq.n	8006cc0 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006ca6:	b25b      	sxtb	r3, r3
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	da04      	bge.n	8006cb6 <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	2203      	movs	r2, #3
 8006cb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006cb4:	e159      	b.n	8006f6a <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	2205      	movs	r2, #5
 8006cba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006cbe:	e154      	b.n	8006f6a <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	2207      	movs	r2, #7
 8006cc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006cc8:	e14f      	b.n	8006f6a <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006cca:	7d3b      	ldrb	r3, [r7, #20]
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d104      	bne.n	8006cda <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006cd8:	e147      	b.n	8006f6a <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 8006cda:	7d3b      	ldrb	r3, [r7, #20]
 8006cdc:	2b05      	cmp	r3, #5
 8006cde:	f040 8144 	bne.w	8006f6a <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	220a      	movs	r2, #10
 8006ce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006cea:	e13e      	b.n	8006f6a <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	895a      	ldrh	r2, [r3, #10]
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	791b      	ldrb	r3, [r3, #4]
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f001 ff14 	bl	8008b28 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	2204      	movs	r2, #4
 8006d04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8006d08:	e13c      	b.n	8006f84 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	791b      	ldrb	r3, [r3, #4]
 8006d0e:	4619      	mov	r1, r3
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f007 f899 	bl	800de48 <USBH_LL_GetURBState>
 8006d16:	4603      	mov	r3, r0
 8006d18:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006d1a:	7d3b      	ldrb	r3, [r7, #20]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d12d      	bne.n	8006d7c <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	8952      	ldrh	r2, [r2, #10]
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d910      	bls.n	8006d4e <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d32:	693a      	ldr	r2, [r7, #16]
 8006d34:	8952      	ldrh	r2, [r2, #10]
 8006d36:	441a      	add	r2, r3
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d42:	693a      	ldr	r2, [r7, #16]
 8006d44:	8952      	ldrh	r2, [r2, #10]
 8006d46:	1a9a      	subs	r2, r3, r2
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	65da      	str	r2, [r3, #92]	; 0x5c
 8006d4c:	e002      	b.n	8006d54 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	2200      	movs	r2, #0
 8006d52:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00a      	beq.n	8006d72 <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	895a      	ldrh	r2, [r3, #10]
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	791b      	ldrb	r3, [r3, #4]
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f001 fedc 	bl	8008b28 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8006d70:	e0fd      	b.n	8006f6e <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	2207      	movs	r2, #7
 8006d76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006d7a:	e0f8      	b.n	8006f6e <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 8006d7c:	7d3b      	ldrb	r3, [r7, #20]
 8006d7e:	2b05      	cmp	r3, #5
 8006d80:	f040 80f5 	bne.w	8006f6e <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	2209      	movs	r2, #9
 8006d88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006d8c:	e0ef      	b.n	8006f6e <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	891a      	ldrh	r2, [r3, #8]
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	7958      	ldrb	r0, [r3, #5]
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	4603      	mov	r3, r0
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f001 fe9b 	bl	8008ade <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	2206      	movs	r2, #6
 8006dac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006db0:	e0e8      	b.n	8006f84 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	795b      	ldrb	r3, [r3, #5]
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f007 f845 	bl	800de48 <USBH_LL_GetURBState>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006dc2:	7d3b      	ldrb	r3, [r7, #20]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d130      	bne.n	8006e2a <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	8912      	ldrh	r2, [r2, #8]
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d910      	bls.n	8006df6 <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	8912      	ldrh	r2, [r2, #8]
 8006dde:	441a      	add	r2, r3
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	8912      	ldrh	r2, [r2, #8]
 8006dee:	1a9a      	subs	r2, r3, r2
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	65da      	str	r2, [r3, #92]	; 0x5c
 8006df4:	e002      	b.n	8006dfc <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00d      	beq.n	8006e20 <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	891a      	ldrh	r2, [r3, #8]
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	7958      	ldrb	r0, [r3, #5]
 8006e12:	2301      	movs	r3, #1
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	4603      	mov	r3, r0
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f001 fe60 	bl	8008ade <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8006e1e:	e0a8      	b.n	8006f72 <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	2207      	movs	r2, #7
 8006e24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006e28:	e0a3      	b.n	8006f72 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006e2a:	7d3b      	ldrb	r3, [r7, #20]
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d104      	bne.n	8006e3a <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	2205      	movs	r2, #5
 8006e34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006e38:	e09b      	b.n	8006f72 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 8006e3a:	7d3b      	ldrb	r3, [r7, #20]
 8006e3c:	2b05      	cmp	r3, #5
 8006e3e:	f040 8098 	bne.w	8006f72 <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	220a      	movs	r2, #10
 8006e46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006e4a:	e092      	b.n	8006f72 <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	791b      	ldrb	r3, [r3, #4]
 8006e56:	220d      	movs	r2, #13
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f001 fe65 	bl	8008b28 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	2208      	movs	r2, #8
 8006e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006e66:	e08d      	b.n	8006f84 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	791b      	ldrb	r3, [r3, #4]
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f006 ffea 	bl	800de48 <USBH_LL_GetURBState>
 8006e74:	4603      	mov	r3, r0
 8006e76:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8006e78:	7d3b      	ldrb	r3, [r7, #20]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d115      	bne.n	8006eaa <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f8aa 	bl	8006fe8 <USBH_MSC_DecodeCSW>
 8006e94:	4603      	mov	r3, r0
 8006e96:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8006e98:	7d7b      	ldrb	r3, [r7, #21]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d102      	bne.n	8006ea4 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8006ea2:	e068      	b.n	8006f76 <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ea8:	e065      	b.n	8006f76 <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 8006eaa:	7d3b      	ldrb	r3, [r7, #20]
 8006eac:	2b05      	cmp	r3, #5
 8006eae:	d162      	bne.n	8006f76 <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	2209      	movs	r2, #9
 8006eb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006eb8:	e05d      	b.n	8006f76 <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8006eba:	78fb      	ldrb	r3, [r7, #3]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f865 	bl	8006f90 <USBH_MSC_BOT_Abort>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8006eca:	7dbb      	ldrb	r3, [r7, #22]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d104      	bne.n	8006eda <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	2207      	movs	r2, #7
 8006ed4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8006ed8:	e04f      	b.n	8006f7a <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 8006eda:	7dbb      	ldrb	r3, [r7, #22]
 8006edc:	2b04      	cmp	r3, #4
 8006ede:	d14c      	bne.n	8006f7a <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	220b      	movs	r2, #11
 8006ee4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006ee8:	e047      	b.n	8006f7a <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8006eea:	78fb      	ldrb	r3, [r7, #3]
 8006eec:	2201      	movs	r2, #1
 8006eee:	4619      	mov	r1, r3
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f84d 	bl	8006f90 <USBH_MSC_BOT_Abort>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8006efa:	7dbb      	ldrb	r3, [r7, #22]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d11d      	bne.n	8006f3c <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	795b      	ldrb	r3, [r3, #5]
 8006f04:	4619      	mov	r1, r3
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f006 fffb 	bl	800df02 <USBH_LL_GetToggle>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	7959      	ldrb	r1, [r3, #5]
 8006f14:	7bfb      	ldrb	r3, [r7, #15]
 8006f16:	f1c3 0301 	rsb	r3, r3, #1
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f006 ffbc 	bl	800de9c <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	791b      	ldrb	r3, [r3, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f006 ffb5 	bl	800de9c <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	2209      	movs	r2, #9
 8006f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8006f3a:	e020      	b.n	8006f7e <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 8006f3c:	7dbb      	ldrb	r3, [r7, #22]
 8006f3e:	2b04      	cmp	r3, #4
 8006f40:	d11d      	bne.n	8006f7e <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	220b      	movs	r2, #11
 8006f46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006f4a:	e018      	b.n	8006f7e <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f7ff fdf0 	bl	8006b32 <USBH_MSC_BOT_REQ_Reset>
 8006f52:	4603      	mov	r3, r0
 8006f54:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8006f56:	7dfb      	ldrb	r3, [r7, #23]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d112      	bne.n	8006f82 <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8006f64:	e00d      	b.n	8006f82 <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 8006f66:	bf00      	nop
 8006f68:	e00c      	b.n	8006f84 <USBH_MSC_BOT_Process+0x398>
      break;
 8006f6a:	bf00      	nop
 8006f6c:	e00a      	b.n	8006f84 <USBH_MSC_BOT_Process+0x398>
      break;
 8006f6e:	bf00      	nop
 8006f70:	e008      	b.n	8006f84 <USBH_MSC_BOT_Process+0x398>
      break;
 8006f72:	bf00      	nop
 8006f74:	e006      	b.n	8006f84 <USBH_MSC_BOT_Process+0x398>
      break;
 8006f76:	bf00      	nop
 8006f78:	e004      	b.n	8006f84 <USBH_MSC_BOT_Process+0x398>
      break;
 8006f7a:	bf00      	nop
 8006f7c:	e002      	b.n	8006f84 <USBH_MSC_BOT_Process+0x398>
      break;
 8006f7e:	bf00      	nop
 8006f80:	e000      	b.n	8006f84 <USBH_MSC_BOT_Process+0x398>
      break;
 8006f82:	bf00      	nop
  }
  return status;
 8006f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3718      	adds	r7, #24
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop

08006f90 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	460b      	mov	r3, r1
 8006f9a:	70fb      	strb	r3, [r7, #3]
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006faa:	69db      	ldr	r3, [r3, #28]
 8006fac:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8006fae:	78bb      	ldrb	r3, [r7, #2]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d002      	beq.n	8006fba <USBH_MSC_BOT_Abort+0x2a>
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d009      	beq.n	8006fcc <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8006fb8:	e011      	b.n	8006fde <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	79db      	ldrb	r3, [r3, #7]
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f001 f99c 	bl	80082fe <USBH_ClrFeature>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	73fb      	strb	r3, [r7, #15]
      break;
 8006fca:	e008      	b.n	8006fde <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	799b      	ldrb	r3, [r3, #6]
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f001 f993 	bl	80082fe <USBH_ClrFeature>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	73fb      	strb	r3, [r7, #15]
      break;
 8006fdc:	bf00      	nop
  }
  return status;
 8006fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ff6:	69db      	ldr	r3, [r3, #28]
 8006ff8:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	791b      	ldrb	r3, [r3, #4]
 8007002:	4619      	mov	r1, r3
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f006 fe8d 	bl	800dd24 <USBH_LL_GetLastXferSize>
 800700a:	4603      	mov	r3, r0
 800700c:	2b0d      	cmp	r3, #13
 800700e:	d002      	beq.n	8007016 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8007010:	2302      	movs	r3, #2
 8007012:	73fb      	strb	r3, [r7, #15]
 8007014:	e024      	b.n	8007060 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800701a:	4a14      	ldr	r2, [pc, #80]	; (800706c <USBH_MSC_DecodeCSW+0x84>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d11d      	bne.n	800705c <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007028:	429a      	cmp	r2, r3
 800702a:	d119      	bne.n	8007060 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007032:	2b00      	cmp	r3, #0
 8007034:	d102      	bne.n	800703c <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8007036:	2300      	movs	r3, #0
 8007038:	73fb      	strb	r3, [r7, #15]
 800703a:	e011      	b.n	8007060 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007042:	2b01      	cmp	r3, #1
 8007044:	d102      	bne.n	800704c <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8007046:	2301      	movs	r3, #1
 8007048:	73fb      	strb	r3, [r7, #15]
 800704a:	e009      	b.n	8007060 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007052:	2b02      	cmp	r3, #2
 8007054:	d104      	bne.n	8007060 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8007056:	2302      	movs	r3, #2
 8007058:	73fb      	strb	r3, [r7, #15]
 800705a:	e001      	b.n	8007060 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800705c:	2302      	movs	r3, #2
 800705e:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8007060:	7bfb      	ldrb	r3, [r7, #15]
}
 8007062:	4618      	mov	r0, r3
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	53425355 	.word	0x53425355

08007070 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	460b      	mov	r3, r1
 800707a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800707c:	2302      	movs	r3, #2
 800707e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007086:	69db      	ldr	r3, [r3, #28]
 8007088:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007090:	2b01      	cmp	r3, #1
 8007092:	d002      	beq.n	800709a <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8007094:	2b02      	cmp	r3, #2
 8007096:	d021      	beq.n	80070dc <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007098:	e028      	b.n	80070ec <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	2200      	movs	r2, #0
 800709e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	220a      	movs	r2, #10
 80070ac:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	3363      	adds	r3, #99	; 0x63
 80070b4:	2210      	movs	r2, #16
 80070b6:	2100      	movs	r1, #0
 80070b8:	4618      	mov	r0, r3
 80070ba:	f006 ffee 	bl	800e09a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	2202      	movs	r2, #2
 80070d2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 80070d6:	2301      	movs	r3, #1
 80070d8:	73fb      	strb	r3, [r7, #15]
      break;
 80070da:	e007      	b.n	80070ec <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 80070dc:	78fb      	ldrb	r3, [r7, #3]
 80070de:	4619      	mov	r1, r3
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f7ff fd83 	bl	8006bec <USBH_MSC_BOT_Process>
 80070e6:	4603      	mov	r3, r0
 80070e8:	73fb      	strb	r3, [r7, #15]
      break;
 80070ea:	bf00      	nop
  }

  return error;
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b086      	sub	sp, #24
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	60f8      	str	r0, [r7, #12]
 80070fe:	460b      	mov	r3, r1
 8007100:	607a      	str	r2, [r7, #4]
 8007102:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8007104:	2301      	movs	r3, #1
 8007106:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800710e:	69db      	ldr	r3, [r3, #28]
 8007110:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007118:	2b01      	cmp	r3, #1
 800711a:	d002      	beq.n	8007122 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800711c:	2b02      	cmp	r3, #2
 800711e:	d027      	beq.n	8007170 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8007120:	e05f      	b.n	80071e2 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	2208      	movs	r2, #8
 8007126:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	2280      	movs	r2, #128	; 0x80
 800712c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	220a      	movs	r2, #10
 8007134:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	3363      	adds	r3, #99	; 0x63
 800713c:	2210      	movs	r2, #16
 800713e:	2100      	movs	r1, #0
 8007140:	4618      	mov	r0, r3
 8007142:	f006 ffaa 	bl	800e09a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	2225      	movs	r2, #37	; 0x25
 800714a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	2201      	movs	r2, #1
 8007152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	2202      	movs	r2, #2
 800715a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	f103 0210 	add.w	r2, r3, #16
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800716a:	2301      	movs	r3, #1
 800716c:	75fb      	strb	r3, [r7, #23]
      break;
 800716e:	e038      	b.n	80071e2 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007170:	7afb      	ldrb	r3, [r7, #11]
 8007172:	4619      	mov	r1, r3
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f7ff fd39 	bl	8006bec <USBH_MSC_BOT_Process>
 800717a:	4603      	mov	r3, r0
 800717c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800717e:	7dfb      	ldrb	r3, [r7, #23]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d12d      	bne.n	80071e0 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800718a:	3303      	adds	r3, #3
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	461a      	mov	r2, r3
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007196:	3302      	adds	r3, #2
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	021b      	lsls	r3, r3, #8
 800719c:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071a4:	3301      	adds	r3, #1
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80071aa:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	061b      	lsls	r3, r3, #24
 80071b6:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071c2:	3307      	adds	r3, #7
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071ce:	3306      	adds	r3, #6
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	021b      	lsls	r3, r3, #8
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	4313      	orrs	r3, r2
 80071da:	b29a      	uxth	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	809a      	strh	r2, [r3, #4]
      break;
 80071e0:	bf00      	nop
  }

  return error;
 80071e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3718      	adds	r7, #24
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b086      	sub	sp, #24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	460b      	mov	r3, r1
 80071f6:	607a      	str	r2, [r7, #4]
 80071f8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 80071fa:	2302      	movs	r3, #2
 80071fc:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800720e:	2b01      	cmp	r3, #1
 8007210:	d002      	beq.n	8007218 <USBH_MSC_SCSI_Inquiry+0x2c>
 8007212:	2b02      	cmp	r3, #2
 8007214:	d03d      	beq.n	8007292 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8007216:	e089      	b.n	800732c <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	2224      	movs	r2, #36	; 0x24
 800721c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	2280      	movs	r2, #128	; 0x80
 8007222:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	220a      	movs	r2, #10
 800722a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	3363      	adds	r3, #99	; 0x63
 8007232:	220a      	movs	r2, #10
 8007234:	2100      	movs	r1, #0
 8007236:	4618      	mov	r0, r3
 8007238:	f006 ff2f 	bl	800e09a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	2212      	movs	r2, #18
 8007240:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8007244:	7afb      	ldrb	r3, [r7, #11]
 8007246:	015b      	lsls	r3, r3, #5
 8007248:	b2da      	uxtb	r2, r3
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	2224      	movs	r2, #36	; 0x24
 8007264:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	2202      	movs	r2, #2
 800727c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	f103 0210 	add.w	r2, r3, #16
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800728c:	2301      	movs	r3, #1
 800728e:	75fb      	strb	r3, [r7, #23]
      break;
 8007290:	e04c      	b.n	800732c <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007292:	7afb      	ldrb	r3, [r7, #11]
 8007294:	4619      	mov	r1, r3
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f7ff fca8 	bl	8006bec <USBH_MSC_BOT_Process>
 800729c:	4603      	mov	r3, r0
 800729e:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80072a0:	7dfb      	ldrb	r3, [r7, #23]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d141      	bne.n	800732a <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 80072a6:	2222      	movs	r2, #34	; 0x22
 80072a8:	2100      	movs	r1, #0
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f006 fef5 	bl	800e09a <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	f003 031f 	and.w	r3, r3, #31
 80072bc:	b2da      	uxtb	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	095b      	lsrs	r3, r3, #5
 80072cc:	b2da      	uxtb	r2, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072d8:	3301      	adds	r3, #1
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	b25b      	sxtb	r3, r3
 80072de:	2b00      	cmp	r3, #0
 80072e0:	da03      	bge.n	80072ea <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2201      	movs	r2, #1
 80072e6:	709a      	strb	r2, [r3, #2]
 80072e8:	e002      	b.n	80072f0 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	1cd8      	adds	r0, r3, #3
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072fa:	3308      	adds	r3, #8
 80072fc:	2208      	movs	r2, #8
 80072fe:	4619      	mov	r1, r3
 8007300:	f006 fec0 	bl	800e084 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f103 000c 	add.w	r0, r3, #12
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007310:	3310      	adds	r3, #16
 8007312:	2210      	movs	r2, #16
 8007314:	4619      	mov	r1, r3
 8007316:	f006 feb5 	bl	800e084 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	331d      	adds	r3, #29
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8007324:	3220      	adds	r2, #32
 8007326:	6812      	ldr	r2, [r2, #0]
 8007328:	601a      	str	r2, [r3, #0]
      break;
 800732a:	bf00      	nop
  }

  return error;
 800732c:	7dfb      	ldrb	r3, [r7, #23]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3718      	adds	r7, #24
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b086      	sub	sp, #24
 800733a:	af00      	add	r7, sp, #0
 800733c:	60f8      	str	r0, [r7, #12]
 800733e:	460b      	mov	r3, r1
 8007340:	607a      	str	r2, [r7, #4]
 8007342:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007344:	2302      	movs	r3, #2
 8007346:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800734e:	69db      	ldr	r3, [r3, #28]
 8007350:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007358:	2b01      	cmp	r3, #1
 800735a:	d002      	beq.n	8007362 <USBH_MSC_SCSI_RequestSense+0x2c>
 800735c:	2b02      	cmp	r3, #2
 800735e:	d03d      	beq.n	80073dc <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8007360:	e05d      	b.n	800741e <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	220e      	movs	r2, #14
 8007366:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	2280      	movs	r2, #128	; 0x80
 800736c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	220a      	movs	r2, #10
 8007374:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	3363      	adds	r3, #99	; 0x63
 800737c:	2210      	movs	r2, #16
 800737e:	2100      	movs	r1, #0
 8007380:	4618      	mov	r0, r3
 8007382:	f006 fe8a 	bl	800e09a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	2203      	movs	r2, #3
 800738a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800738e:	7afb      	ldrb	r3, [r7, #11]
 8007390:	015b      	lsls	r3, r3, #5
 8007392:	b2da      	uxtb	r2, r3
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	220e      	movs	r2, #14
 80073ae:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	2202      	movs	r2, #2
 80073c6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	f103 0210 	add.w	r2, r3, #16
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80073d6:	2301      	movs	r3, #1
 80073d8:	75fb      	strb	r3, [r7, #23]
      break;
 80073da:	e020      	b.n	800741e <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 80073dc:	7afb      	ldrb	r3, [r7, #11]
 80073de:	4619      	mov	r1, r3
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f7ff fc03 	bl	8006bec <USBH_MSC_BOT_Process>
 80073e6:	4603      	mov	r3, r0
 80073e8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80073ea:	7dfb      	ldrb	r3, [r7, #23]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d115      	bne.n	800741c <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073f6:	3302      	adds	r3, #2
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	f003 030f 	and.w	r3, r3, #15
 80073fe:	b2da      	uxtb	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800740a:	7b1a      	ldrb	r2, [r3, #12]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007416:	7b5a      	ldrb	r2, [r3, #13]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	709a      	strb	r2, [r3, #2]
      break;
 800741c:	bf00      	nop
  }

  return error;
 800741e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3718      	adds	r7, #24
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b086      	sub	sp, #24
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	607a      	str	r2, [r7, #4]
 8007432:	603b      	str	r3, [r7, #0]
 8007434:	460b      	mov	r3, r1
 8007436:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007438:	2302      	movs	r3, #2
 800743a:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007442:	69db      	ldr	r3, [r3, #28]
 8007444:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800744c:	2b01      	cmp	r3, #1
 800744e:	d002      	beq.n	8007456 <USBH_MSC_SCSI_Write+0x2e>
 8007450:	2b02      	cmp	r3, #2
 8007452:	d047      	beq.n	80074e4 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007454:	e04e      	b.n	80074f4 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800745c:	461a      	mov	r2, r3
 800745e:	6a3b      	ldr	r3, [r7, #32]
 8007460:	fb03 f202 	mul.w	r2, r3, r2
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	220a      	movs	r2, #10
 8007474:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	3363      	adds	r3, #99	; 0x63
 800747c:	2210      	movs	r2, #16
 800747e:	2100      	movs	r1, #0
 8007480:	4618      	mov	r0, r3
 8007482:	f006 fe0a 	bl	800e09a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	222a      	movs	r2, #42	; 0x2a
 800748a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800748e:	79fa      	ldrb	r2, [r7, #7]
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8007496:	79ba      	ldrb	r2, [r7, #6]
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800749e:	797a      	ldrb	r2, [r7, #5]
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80074a6:	1d3b      	adds	r3, r7, #4
 80074a8:	781a      	ldrb	r2, [r3, #0]
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80074b0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80074ba:	f107 0320 	add.w	r3, r7, #32
 80074be:	781a      	ldrb	r2, [r3, #0]
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	2202      	movs	r2, #2
 80074d2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	683a      	ldr	r2, [r7, #0]
 80074da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80074de:	2301      	movs	r3, #1
 80074e0:	75fb      	strb	r3, [r7, #23]
      break;
 80074e2:	e007      	b.n	80074f4 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 80074e4:	7afb      	ldrb	r3, [r7, #11]
 80074e6:	4619      	mov	r1, r3
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f7ff fb7f 	bl	8006bec <USBH_MSC_BOT_Process>
 80074ee:	4603      	mov	r3, r0
 80074f0:	75fb      	strb	r3, [r7, #23]
      break;
 80074f2:	bf00      	nop
  }

  return error;
 80074f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3718      	adds	r7, #24
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b086      	sub	sp, #24
 8007502:	af00      	add	r7, sp, #0
 8007504:	60f8      	str	r0, [r7, #12]
 8007506:	607a      	str	r2, [r7, #4]
 8007508:	603b      	str	r3, [r7, #0]
 800750a:	460b      	mov	r3, r1
 800750c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800750e:	2302      	movs	r3, #2
 8007510:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007518:	69db      	ldr	r3, [r3, #28]
 800751a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007522:	2b01      	cmp	r3, #1
 8007524:	d002      	beq.n	800752c <USBH_MSC_SCSI_Read+0x2e>
 8007526:	2b02      	cmp	r3, #2
 8007528:	d047      	beq.n	80075ba <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800752a:	e04e      	b.n	80075ca <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8007532:	461a      	mov	r2, r3
 8007534:	6a3b      	ldr	r3, [r7, #32]
 8007536:	fb03 f202 	mul.w	r2, r3, r2
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	2280      	movs	r2, #128	; 0x80
 8007542:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	220a      	movs	r2, #10
 800754a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	3363      	adds	r3, #99	; 0x63
 8007552:	2210      	movs	r2, #16
 8007554:	2100      	movs	r1, #0
 8007556:	4618      	mov	r0, r3
 8007558:	f006 fd9f 	bl	800e09a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	2228      	movs	r2, #40	; 0x28
 8007560:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8007564:	79fa      	ldrb	r2, [r7, #7]
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800756c:	79ba      	ldrb	r2, [r7, #6]
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8007574:	797a      	ldrb	r2, [r7, #5]
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800757c:	1d3b      	adds	r3, r7, #4
 800757e:	781a      	ldrb	r2, [r3, #0]
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8007586:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8007590:	f107 0320 	add.w	r3, r7, #32
 8007594:	781a      	ldrb	r2, [r3, #0]
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	2202      	movs	r2, #2
 80075a8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	683a      	ldr	r2, [r7, #0]
 80075b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80075b4:	2301      	movs	r3, #1
 80075b6:	75fb      	strb	r3, [r7, #23]
      break;
 80075b8:	e007      	b.n	80075ca <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 80075ba:	7afb      	ldrb	r3, [r7, #11]
 80075bc:	4619      	mov	r1, r3
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	f7ff fb14 	bl	8006bec <USBH_MSC_BOT_Process>
 80075c4:	4603      	mov	r3, r0
 80075c6:	75fb      	strb	r3, [r7, #23]
      break;
 80075c8:	bf00      	nop
  }

  return error;
 80075ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3718      	adds	r7, #24
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	4613      	mov	r3, r2
 80075e0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d101      	bne.n	80075ec <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80075e8:	2302      	movs	r3, #2
 80075ea:	e029      	b.n	8007640 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	79fa      	ldrb	r2, [r7, #7]
 80075f0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f000 f81f 	bl	8007648 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d003      	beq.n	8007638 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f006 fac1 	bl	800dbc0 <USBH_LL_Init>

  return USBH_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007650:	2300      	movs	r3, #0
 8007652:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007654:	2300      	movs	r3, #0
 8007656:	60fb      	str	r3, [r7, #12]
 8007658:	e009      	b.n	800766e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	33e0      	adds	r3, #224	; 0xe0
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4413      	add	r3, r2
 8007664:	2200      	movs	r2, #0
 8007666:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	3301      	adds	r3, #1
 800766c:	60fb      	str	r3, [r7, #12]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2b0e      	cmp	r3, #14
 8007672:	d9f2      	bls.n	800765a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007674:	2300      	movs	r3, #0
 8007676:	60fb      	str	r3, [r7, #12]
 8007678:	e009      	b.n	800768e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	4413      	add	r3, r2
 8007680:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007684:	2200      	movs	r2, #0
 8007686:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	3301      	adds	r3, #1
 800768c:	60fb      	str	r3, [r7, #12]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007694:	d3f1      	bcc.n	800767a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2201      	movs	r2, #1
 80076a6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2240      	movs	r2, #64	; 0x40
 80076ba:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3714      	adds	r7, #20
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80076fa:	2300      	movs	r3, #0
 80076fc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d016      	beq.n	8007732 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10e      	bne.n	800772c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007714:	1c59      	adds	r1, r3, #1
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	33de      	adds	r3, #222	; 0xde
 8007720:	6839      	ldr	r1, [r7, #0]
 8007722:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007726:	2300      	movs	r3, #0
 8007728:	73fb      	strb	r3, [r7, #15]
 800772a:	e004      	b.n	8007736 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800772c:	2302      	movs	r3, #2
 800772e:	73fb      	strb	r3, [r7, #15]
 8007730:	e001      	b.n	8007736 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007732:	2302      	movs	r3, #2
 8007734:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007736:	7bfb      	ldrb	r3, [r7, #15]
}
 8007738:	4618      	mov	r0, r3
 800773a:	3714      	adds	r7, #20
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	460b      	mov	r3, r1
 800774e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007750:	2300      	movs	r3, #0
 8007752:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800775a:	78fa      	ldrb	r2, [r7, #3]
 800775c:	429a      	cmp	r2, r3
 800775e:	d204      	bcs.n	800776a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	78fa      	ldrb	r2, [r7, #3]
 8007764:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007768:	e001      	b.n	800776e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800776a:	2302      	movs	r3, #2
 800776c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800776e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007770:	4618      	mov	r0, r3
 8007772:	3714      	adds	r7, #20
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800777c:	b480      	push	{r7}
 800777e:	b087      	sub	sp, #28
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	4608      	mov	r0, r1
 8007786:	4611      	mov	r1, r2
 8007788:	461a      	mov	r2, r3
 800778a:	4603      	mov	r3, r0
 800778c:	70fb      	strb	r3, [r7, #3]
 800778e:	460b      	mov	r3, r1
 8007790:	70bb      	strb	r3, [r7, #2]
 8007792:	4613      	mov	r3, r2
 8007794:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007796:	2300      	movs	r3, #0
 8007798:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800779a:	2300      	movs	r3, #0
 800779c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80077a4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80077a6:	e025      	b.n	80077f4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80077a8:	7dfb      	ldrb	r3, [r7, #23]
 80077aa:	221a      	movs	r2, #26
 80077ac:	fb02 f303 	mul.w	r3, r2, r3
 80077b0:	3308      	adds	r3, #8
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	4413      	add	r3, r2
 80077b6:	3302      	adds	r3, #2
 80077b8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	795b      	ldrb	r3, [r3, #5]
 80077be:	78fa      	ldrb	r2, [r7, #3]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d002      	beq.n	80077ca <USBH_FindInterface+0x4e>
 80077c4:	78fb      	ldrb	r3, [r7, #3]
 80077c6:	2bff      	cmp	r3, #255	; 0xff
 80077c8:	d111      	bne.n	80077ee <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80077ce:	78ba      	ldrb	r2, [r7, #2]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d002      	beq.n	80077da <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80077d4:	78bb      	ldrb	r3, [r7, #2]
 80077d6:	2bff      	cmp	r3, #255	; 0xff
 80077d8:	d109      	bne.n	80077ee <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80077de:	787a      	ldrb	r2, [r7, #1]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d002      	beq.n	80077ea <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80077e4:	787b      	ldrb	r3, [r7, #1]
 80077e6:	2bff      	cmp	r3, #255	; 0xff
 80077e8:	d101      	bne.n	80077ee <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80077ea:	7dfb      	ldrb	r3, [r7, #23]
 80077ec:	e006      	b.n	80077fc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80077ee:	7dfb      	ldrb	r3, [r7, #23]
 80077f0:	3301      	adds	r3, #1
 80077f2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80077f4:	7dfb      	ldrb	r3, [r7, #23]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d9d6      	bls.n	80077a8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80077fa:	23ff      	movs	r3, #255	; 0xff
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	371c      	adds	r7, #28
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f006 fa11 	bl	800dc38 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007816:	2101      	movs	r1, #1
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f006 fb28 	bl	800de6e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b088      	sub	sp, #32
 800782c:	af04      	add	r7, sp, #16
 800782e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007830:	2302      	movs	r3, #2
 8007832:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007834:	2300      	movs	r3, #0
 8007836:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800783e:	b2db      	uxtb	r3, r3
 8007840:	2b01      	cmp	r3, #1
 8007842:	d102      	bne.n	800784a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2203      	movs	r2, #3
 8007848:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b0b      	cmp	r3, #11
 8007852:	f200 81b3 	bhi.w	8007bbc <USBH_Process+0x394>
 8007856:	a201      	add	r2, pc, #4	; (adr r2, 800785c <USBH_Process+0x34>)
 8007858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785c:	0800788d 	.word	0x0800788d
 8007860:	080078bf 	.word	0x080078bf
 8007864:	08007927 	.word	0x08007927
 8007868:	08007b57 	.word	0x08007b57
 800786c:	08007bbd 	.word	0x08007bbd
 8007870:	080079cb 	.word	0x080079cb
 8007874:	08007afd 	.word	0x08007afd
 8007878:	08007a01 	.word	0x08007a01
 800787c:	08007a21 	.word	0x08007a21
 8007880:	08007a41 	.word	0x08007a41
 8007884:	08007a6f 	.word	0x08007a6f
 8007888:	08007b3f 	.word	0x08007b3f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b00      	cmp	r3, #0
 8007896:	f000 8193 	beq.w	8007bc0 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2201      	movs	r2, #1
 800789e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80078a0:	20c8      	movs	r0, #200	; 0xc8
 80078a2:	f006 fb61 	bl	800df68 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f006 fa21 	bl	800dcee <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80078bc:	e180      	b.n	8007bc0 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d107      	bne.n	80078d8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2202      	movs	r2, #2
 80078d4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80078d6:	e182      	b.n	8007bde <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80078de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078e2:	d914      	bls.n	800790e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80078ea:	3301      	adds	r3, #1
 80078ec:	b2da      	uxtb	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80078fa:	2b03      	cmp	r3, #3
 80078fc:	d903      	bls.n	8007906 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	220d      	movs	r2, #13
 8007902:	701a      	strb	r2, [r3, #0]
      break;
 8007904:	e16b      	b.n	8007bde <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	701a      	strb	r2, [r3, #0]
      break;
 800790c:	e167      	b.n	8007bde <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007914:	f103 020a 	add.w	r2, r3, #10
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800791e:	200a      	movs	r0, #10
 8007920:	f006 fb22 	bl	800df68 <USBH_Delay>
      break;
 8007924:	e15b      	b.n	8007bde <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800792c:	2b00      	cmp	r3, #0
 800792e:	d005      	beq.n	800793c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007936:	2104      	movs	r1, #4
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800793c:	2064      	movs	r0, #100	; 0x64
 800793e:	f006 fb13 	bl	800df68 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f006 f9ae 	bl	800dca4 <USBH_LL_GetSpeed>
 8007948:	4603      	mov	r3, r0
 800794a:	461a      	mov	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2205      	movs	r2, #5
 8007956:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007958:	2100      	movs	r1, #0
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f001 f931 	bl	8008bc2 <USBH_AllocPipe>
 8007960:	4603      	mov	r3, r0
 8007962:	461a      	mov	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007968:	2180      	movs	r1, #128	; 0x80
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f001 f929 	bl	8008bc2 <USBH_AllocPipe>
 8007970:	4603      	mov	r3, r0
 8007972:	461a      	mov	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	7919      	ldrb	r1, [r3, #4]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800798c:	b292      	uxth	r2, r2
 800798e:	9202      	str	r2, [sp, #8]
 8007990:	2200      	movs	r2, #0
 8007992:	9201      	str	r2, [sp, #4]
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	4603      	mov	r3, r0
 8007998:	2280      	movs	r2, #128	; 0x80
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f001 f8e2 	bl	8008b64 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	7959      	ldrb	r1, [r3, #5]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80079b4:	b292      	uxth	r2, r2
 80079b6:	9202      	str	r2, [sp, #8]
 80079b8:	2200      	movs	r2, #0
 80079ba:	9201      	str	r2, [sp, #4]
 80079bc:	9300      	str	r3, [sp, #0]
 80079be:	4603      	mov	r3, r0
 80079c0:	2200      	movs	r2, #0
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f001 f8ce 	bl	8008b64 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80079c8:	e109      	b.n	8007bde <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 f90c 	bl	8007be8 <USBH_HandleEnum>
 80079d0:	4603      	mov	r3, r0
 80079d2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f040 80f3 	bne.w	8007bc4 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d103      	bne.n	80079f8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2208      	movs	r2, #8
 80079f4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80079f6:	e0e5      	b.n	8007bc4 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2207      	movs	r2, #7
 80079fc:	701a      	strb	r2, [r3, #0]
      break;
 80079fe:	e0e1      	b.n	8007bc4 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f000 80de 	beq.w	8007bc8 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a12:	2101      	movs	r1, #1
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2208      	movs	r2, #8
 8007a1c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007a1e:	e0d3      	b.n	8007bc8 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	4619      	mov	r1, r3
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 fc20 	bl	8008270 <USBH_SetCfg>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f040 80ca 	bne.w	8007bcc <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2209      	movs	r2, #9
 8007a3c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007a3e:	e0c5      	b.n	8007bcc <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007a46:	f003 0320 	and.w	r3, r3, #32
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00b      	beq.n	8007a66 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007a4e:	2101      	movs	r1, #1
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 fc30 	bl	80082b6 <USBH_SetFeature>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f040 80b9 	bne.w	8007bd0 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	220a      	movs	r2, #10
 8007a62:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007a64:	e0b4      	b.n	8007bd0 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	220a      	movs	r2, #10
 8007a6a:	701a      	strb	r2, [r3, #0]
      break;
 8007a6c:	e0b0      	b.n	8007bd0 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f000 80ad 	beq.w	8007bd4 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007a82:	2300      	movs	r3, #0
 8007a84:	73fb      	strb	r3, [r7, #15]
 8007a86:	e016      	b.n	8007ab6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007a88:	7bfa      	ldrb	r2, [r7, #15]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	32de      	adds	r2, #222	; 0xde
 8007a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a92:	791a      	ldrb	r2, [r3, #4]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d108      	bne.n	8007ab0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007a9e:	7bfa      	ldrb	r2, [r7, #15]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	32de      	adds	r2, #222	; 0xde
 8007aa4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007aae:	e005      	b.n	8007abc <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007ab0:	7bfb      	ldrb	r3, [r7, #15]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	73fb      	strb	r3, [r7, #15]
 8007ab6:	7bfb      	ldrb	r3, [r7, #15]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d0e5      	beq.n	8007a88 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d016      	beq.n	8007af4 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	4798      	blx	r3
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d109      	bne.n	8007aec <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2206      	movs	r2, #6
 8007adc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ae4:	2103      	movs	r1, #3
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007aea:	e073      	b.n	8007bd4 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	220d      	movs	r2, #13
 8007af0:	701a      	strb	r2, [r3, #0]
      break;
 8007af2:	e06f      	b.n	8007bd4 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	220d      	movs	r2, #13
 8007af8:	701a      	strb	r2, [r3, #0]
      break;
 8007afa:	e06b      	b.n	8007bd4 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d017      	beq.n	8007b36 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	4798      	blx	r3
 8007b12:	4603      	mov	r3, r0
 8007b14:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007b16:	7bbb      	ldrb	r3, [r7, #14]
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d103      	bne.n	8007b26 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	220b      	movs	r2, #11
 8007b22:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007b24:	e058      	b.n	8007bd8 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007b26:	7bbb      	ldrb	r3, [r7, #14]
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d154      	bne.n	8007bd8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	220d      	movs	r2, #13
 8007b32:	701a      	strb	r2, [r3, #0]
      break;
 8007b34:	e050      	b.n	8007bd8 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	220d      	movs	r2, #13
 8007b3a:	701a      	strb	r2, [r3, #0]
      break;
 8007b3c:	e04c      	b.n	8007bd8 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d049      	beq.n	8007bdc <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	4798      	blx	r3
      }
      break;
 8007b54:	e042      	b.n	8007bdc <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f7ff fd72 	bl	8007648 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d009      	beq.n	8007b82 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d005      	beq.n	8007b98 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b92:	2105      	movs	r1, #5
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d107      	bne.n	8007bb4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f7ff fe2b 	bl	8007808 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007bb2:	e014      	b.n	8007bde <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f006 f83f 	bl	800dc38 <USBH_LL_Start>
      break;
 8007bba:	e010      	b.n	8007bde <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007bbc:	bf00      	nop
 8007bbe:	e00e      	b.n	8007bde <USBH_Process+0x3b6>
      break;
 8007bc0:	bf00      	nop
 8007bc2:	e00c      	b.n	8007bde <USBH_Process+0x3b6>
      break;
 8007bc4:	bf00      	nop
 8007bc6:	e00a      	b.n	8007bde <USBH_Process+0x3b6>
    break;
 8007bc8:	bf00      	nop
 8007bca:	e008      	b.n	8007bde <USBH_Process+0x3b6>
      break;
 8007bcc:	bf00      	nop
 8007bce:	e006      	b.n	8007bde <USBH_Process+0x3b6>
      break;
 8007bd0:	bf00      	nop
 8007bd2:	e004      	b.n	8007bde <USBH_Process+0x3b6>
      break;
 8007bd4:	bf00      	nop
 8007bd6:	e002      	b.n	8007bde <USBH_Process+0x3b6>
      break;
 8007bd8:	bf00      	nop
 8007bda:	e000      	b.n	8007bde <USBH_Process+0x3b6>
      break;
 8007bdc:	bf00      	nop
  }
  return USBH_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b088      	sub	sp, #32
 8007bec:	af04      	add	r7, sp, #16
 8007bee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	785b      	ldrb	r3, [r3, #1]
 8007bfc:	2b07      	cmp	r3, #7
 8007bfe:	f200 81c1 	bhi.w	8007f84 <USBH_HandleEnum+0x39c>
 8007c02:	a201      	add	r2, pc, #4	; (adr r2, 8007c08 <USBH_HandleEnum+0x20>)
 8007c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c08:	08007c29 	.word	0x08007c29
 8007c0c:	08007ce7 	.word	0x08007ce7
 8007c10:	08007d51 	.word	0x08007d51
 8007c14:	08007ddf 	.word	0x08007ddf
 8007c18:	08007e49 	.word	0x08007e49
 8007c1c:	08007eb9 	.word	0x08007eb9
 8007c20:	08007eff 	.word	0x08007eff
 8007c24:	08007f45 	.word	0x08007f45
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007c28:	2108      	movs	r1, #8
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 fa50 	bl	80080d0 <USBH_Get_DevDesc>
 8007c30:	4603      	mov	r3, r0
 8007c32:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c34:	7bbb      	ldrb	r3, [r7, #14]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d130      	bne.n	8007c9c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	7919      	ldrb	r1, [r3, #4]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007c5e:	b292      	uxth	r2, r2
 8007c60:	9202      	str	r2, [sp, #8]
 8007c62:	2200      	movs	r2, #0
 8007c64:	9201      	str	r2, [sp, #4]
 8007c66:	9300      	str	r3, [sp, #0]
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2280      	movs	r2, #128	; 0x80
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 ff79 	bl	8008b64 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	7959      	ldrb	r1, [r3, #5]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c86:	b292      	uxth	r2, r2
 8007c88:	9202      	str	r2, [sp, #8]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	9201      	str	r2, [sp, #4]
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	4603      	mov	r3, r0
 8007c92:	2200      	movs	r2, #0
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 ff65 	bl	8008b64 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007c9a:	e175      	b.n	8007f88 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c9c:	7bbb      	ldrb	r3, [r7, #14]
 8007c9e:	2b03      	cmp	r3, #3
 8007ca0:	f040 8172 	bne.w	8007f88 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007caa:	3301      	adds	r3, #1
 8007cac:	b2da      	uxtb	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007cba:	2b03      	cmp	r3, #3
 8007cbc:	d903      	bls.n	8007cc6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	220d      	movs	r2, #13
 8007cc2:	701a      	strb	r2, [r3, #0]
      break;
 8007cc4:	e160      	b.n	8007f88 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	795b      	ldrb	r3, [r3, #5]
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 ff99 	bl	8008c04 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	791b      	ldrb	r3, [r3, #4]
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 ff93 	bl	8008c04 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	701a      	strb	r2, [r3, #0]
      break;
 8007ce4:	e150      	b.n	8007f88 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007ce6:	2112      	movs	r1, #18
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f9f1 	bl	80080d0 <USBH_Get_DevDesc>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007cf2:	7bbb      	ldrb	r3, [r7, #14]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d103      	bne.n	8007d00 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007cfe:	e145      	b.n	8007f8c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d00:	7bbb      	ldrb	r3, [r7, #14]
 8007d02:	2b03      	cmp	r3, #3
 8007d04:	f040 8142 	bne.w	8007f8c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d0e:	3301      	adds	r3, #1
 8007d10:	b2da      	uxtb	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d1e:	2b03      	cmp	r3, #3
 8007d20:	d903      	bls.n	8007d2a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	220d      	movs	r2, #13
 8007d26:	701a      	strb	r2, [r3, #0]
      break;
 8007d28:	e130      	b.n	8007f8c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	795b      	ldrb	r3, [r3, #5]
 8007d2e:	4619      	mov	r1, r3
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 ff67 	bl	8008c04 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	791b      	ldrb	r3, [r3, #4]
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 ff61 	bl	8008c04 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	701a      	strb	r2, [r3, #0]
      break;
 8007d4e:	e11d      	b.n	8007f8c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007d50:	2101      	movs	r1, #1
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fa68 	bl	8008228 <USBH_SetAddress>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d5c:	7bbb      	ldrb	r3, [r7, #14]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d132      	bne.n	8007dc8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007d62:	2002      	movs	r0, #2
 8007d64:	f006 f900 	bl	800df68 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2203      	movs	r2, #3
 8007d74:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	7919      	ldrb	r1, [r3, #4]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007d8a:	b292      	uxth	r2, r2
 8007d8c:	9202      	str	r2, [sp, #8]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	9201      	str	r2, [sp, #4]
 8007d92:	9300      	str	r3, [sp, #0]
 8007d94:	4603      	mov	r3, r0
 8007d96:	2280      	movs	r2, #128	; 0x80
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fee3 	bl	8008b64 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	7959      	ldrb	r1, [r3, #5]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007db2:	b292      	uxth	r2, r2
 8007db4:	9202      	str	r2, [sp, #8]
 8007db6:	2200      	movs	r2, #0
 8007db8:	9201      	str	r2, [sp, #4]
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 fecf 	bl	8008b64 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007dc6:	e0e3      	b.n	8007f90 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007dc8:	7bbb      	ldrb	r3, [r7, #14]
 8007dca:	2b03      	cmp	r3, #3
 8007dcc:	f040 80e0 	bne.w	8007f90 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	220d      	movs	r2, #13
 8007dd4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	705a      	strb	r2, [r3, #1]
      break;
 8007ddc:	e0d8      	b.n	8007f90 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007dde:	2109      	movs	r1, #9
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 f99d 	bl	8008120 <USBH_Get_CfgDesc>
 8007de6:	4603      	mov	r3, r0
 8007de8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007dea:	7bbb      	ldrb	r3, [r7, #14]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d103      	bne.n	8007df8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2204      	movs	r2, #4
 8007df4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007df6:	e0cd      	b.n	8007f94 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007df8:	7bbb      	ldrb	r3, [r7, #14]
 8007dfa:	2b03      	cmp	r3, #3
 8007dfc:	f040 80ca 	bne.w	8007f94 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e06:	3301      	adds	r3, #1
 8007e08:	b2da      	uxtb	r2, r3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e16:	2b03      	cmp	r3, #3
 8007e18:	d903      	bls.n	8007e22 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	220d      	movs	r2, #13
 8007e1e:	701a      	strb	r2, [r3, #0]
      break;
 8007e20:	e0b8      	b.n	8007f94 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	795b      	ldrb	r3, [r3, #5]
 8007e26:	4619      	mov	r1, r3
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 feeb 	bl	8008c04 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	791b      	ldrb	r3, [r3, #4]
 8007e32:	4619      	mov	r1, r3
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 fee5 	bl	8008c04 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	701a      	strb	r2, [r3, #0]
      break;
 8007e46:	e0a5      	b.n	8007f94 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 f965 	bl	8008120 <USBH_Get_CfgDesc>
 8007e56:	4603      	mov	r3, r0
 8007e58:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e5a:	7bbb      	ldrb	r3, [r7, #14]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d103      	bne.n	8007e68 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2205      	movs	r2, #5
 8007e64:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007e66:	e097      	b.n	8007f98 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e68:	7bbb      	ldrb	r3, [r7, #14]
 8007e6a:	2b03      	cmp	r3, #3
 8007e6c:	f040 8094 	bne.w	8007f98 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e76:	3301      	adds	r3, #1
 8007e78:	b2da      	uxtb	r2, r3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e86:	2b03      	cmp	r3, #3
 8007e88:	d903      	bls.n	8007e92 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	220d      	movs	r2, #13
 8007e8e:	701a      	strb	r2, [r3, #0]
      break;
 8007e90:	e082      	b.n	8007f98 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	795b      	ldrb	r3, [r3, #5]
 8007e96:	4619      	mov	r1, r3
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 feb3 	bl	8008c04 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	791b      	ldrb	r3, [r3, #4]
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fead 	bl	8008c04 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	701a      	strb	r2, [r3, #0]
      break;
 8007eb6:	e06f      	b.n	8007f98 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d019      	beq.n	8007ef6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007ece:	23ff      	movs	r3, #255	; 0xff
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 f949 	bl	8008168 <USBH_Get_StringDesc>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007eda:	7bbb      	ldrb	r3, [r7, #14]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d103      	bne.n	8007ee8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2206      	movs	r2, #6
 8007ee4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007ee6:	e059      	b.n	8007f9c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ee8:	7bbb      	ldrb	r3, [r7, #14]
 8007eea:	2b03      	cmp	r3, #3
 8007eec:	d156      	bne.n	8007f9c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2206      	movs	r2, #6
 8007ef2:	705a      	strb	r2, [r3, #1]
      break;
 8007ef4:	e052      	b.n	8007f9c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2206      	movs	r2, #6
 8007efa:	705a      	strb	r2, [r3, #1]
      break;
 8007efc:	e04e      	b.n	8007f9c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d019      	beq.n	8007f3c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007f14:	23ff      	movs	r3, #255	; 0xff
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f926 	bl	8008168 <USBH_Get_StringDesc>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007f20:	7bbb      	ldrb	r3, [r7, #14]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d103      	bne.n	8007f2e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2207      	movs	r2, #7
 8007f2a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007f2c:	e038      	b.n	8007fa0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f2e:	7bbb      	ldrb	r3, [r7, #14]
 8007f30:	2b03      	cmp	r3, #3
 8007f32:	d135      	bne.n	8007fa0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2207      	movs	r2, #7
 8007f38:	705a      	strb	r2, [r3, #1]
      break;
 8007f3a:	e031      	b.n	8007fa0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2207      	movs	r2, #7
 8007f40:	705a      	strb	r2, [r3, #1]
      break;
 8007f42:	e02d      	b.n	8007fa0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d017      	beq.n	8007f7e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007f5a:	23ff      	movs	r3, #255	; 0xff
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 f903 	bl	8008168 <USBH_Get_StringDesc>
 8007f62:	4603      	mov	r3, r0
 8007f64:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007f66:	7bbb      	ldrb	r3, [r7, #14]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d102      	bne.n	8007f72 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007f70:	e018      	b.n	8007fa4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f72:	7bbb      	ldrb	r3, [r7, #14]
 8007f74:	2b03      	cmp	r3, #3
 8007f76:	d115      	bne.n	8007fa4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f7c:	e012      	b.n	8007fa4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	73fb      	strb	r3, [r7, #15]
      break;
 8007f82:	e00f      	b.n	8007fa4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007f84:	bf00      	nop
 8007f86:	e00e      	b.n	8007fa6 <USBH_HandleEnum+0x3be>
      break;
 8007f88:	bf00      	nop
 8007f8a:	e00c      	b.n	8007fa6 <USBH_HandleEnum+0x3be>
      break;
 8007f8c:	bf00      	nop
 8007f8e:	e00a      	b.n	8007fa6 <USBH_HandleEnum+0x3be>
      break;
 8007f90:	bf00      	nop
 8007f92:	e008      	b.n	8007fa6 <USBH_HandleEnum+0x3be>
      break;
 8007f94:	bf00      	nop
 8007f96:	e006      	b.n	8007fa6 <USBH_HandleEnum+0x3be>
      break;
 8007f98:	bf00      	nop
 8007f9a:	e004      	b.n	8007fa6 <USBH_HandleEnum+0x3be>
      break;
 8007f9c:	bf00      	nop
 8007f9e:	e002      	b.n	8007fa6 <USBH_HandleEnum+0x3be>
      break;
 8007fa0:	bf00      	nop
 8007fa2:	e000      	b.n	8007fa6 <USBH_HandleEnum+0x3be>
      break;
 8007fa4:	bf00      	nop
  }
  return Status;
 8007fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	683a      	ldr	r2, [r7, #0]
 8007fbe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007fc2:	bf00      	nop
 8007fc4:	370c      	adds	r7, #12
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr

08007fce <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b082      	sub	sp, #8
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007fdc:	1c5a      	adds	r2, r3, #1
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 f804 	bl	8007ff2 <USBH_HandleSof>
}
 8007fea:	bf00      	nop
 8007fec:	3708      	adds	r7, #8
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b082      	sub	sp, #8
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	2b0b      	cmp	r3, #11
 8008002:	d10a      	bne.n	800801a <USBH_HandleSof+0x28>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800800a:	2b00      	cmp	r3, #0
 800800c:	d005      	beq.n	800801a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008014:	699b      	ldr	r3, [r3, #24]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	4798      	blx	r3
  }
}
 800801a:	bf00      	nop
 800801c:	3708      	adds	r7, #8
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008022:	b480      	push	{r7}
 8008024:	b083      	sub	sp, #12
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008032:	bf00      	nop
}
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800803e:	b480      	push	{r7}
 8008040:	b083      	sub	sp, #12
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800804e:	bf00      	nop
}
 8008050:	370c      	adds	r7, #12
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr

0800805a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800805a:	b480      	push	{r7}
 800805c:	b083      	sub	sp, #12
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f005 fde0 	bl	800dc6e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	791b      	ldrb	r3, [r3, #4]
 80080b2:	4619      	mov	r1, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fda5 	bl	8008c04 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	795b      	ldrb	r3, [r3, #5]
 80080be:	4619      	mov	r1, r3
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fd9f 	bl	8008c04 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3708      	adds	r7, #8
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af02      	add	r7, sp, #8
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	460b      	mov	r3, r1
 80080da:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80080e2:	78fb      	ldrb	r3, [r7, #3]
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	9300      	str	r3, [sp, #0]
 80080e8:	4613      	mov	r3, r2
 80080ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080ee:	2100      	movs	r1, #0
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f864 	bl	80081be <USBH_GetDescriptor>
 80080f6:	4603      	mov	r3, r0
 80080f8:	73fb      	strb	r3, [r7, #15]
 80080fa:	7bfb      	ldrb	r3, [r7, #15]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10a      	bne.n	8008116 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800810c:	78fa      	ldrb	r2, [r7, #3]
 800810e:	b292      	uxth	r2, r2
 8008110:	4619      	mov	r1, r3
 8008112:	f000 f918 	bl	8008346 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008116:	7bfb      	ldrb	r3, [r7, #15]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af02      	add	r7, sp, #8
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	460b      	mov	r3, r1
 800812a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	331c      	adds	r3, #28
 8008130:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008132:	887b      	ldrh	r3, [r7, #2]
 8008134:	9300      	str	r3, [sp, #0]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800813c:	2100      	movs	r1, #0
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 f83d 	bl	80081be <USBH_GetDescriptor>
 8008144:	4603      	mov	r3, r0
 8008146:	72fb      	strb	r3, [r7, #11]
 8008148:	7afb      	ldrb	r3, [r7, #11]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d107      	bne.n	800815e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008154:	887a      	ldrh	r2, [r7, #2]
 8008156:	68f9      	ldr	r1, [r7, #12]
 8008158:	4618      	mov	r0, r3
 800815a:	f000 f964 	bl	8008426 <USBH_ParseCfgDesc>
  }

  return status;
 800815e:	7afb      	ldrb	r3, [r7, #11]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b088      	sub	sp, #32
 800816c:	af02      	add	r7, sp, #8
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	607a      	str	r2, [r7, #4]
 8008172:	461a      	mov	r2, r3
 8008174:	460b      	mov	r3, r1
 8008176:	72fb      	strb	r3, [r7, #11]
 8008178:	4613      	mov	r3, r2
 800817a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800817c:	7afb      	ldrb	r3, [r7, #11]
 800817e:	b29b      	uxth	r3, r3
 8008180:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008184:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800818c:	893b      	ldrh	r3, [r7, #8]
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	460b      	mov	r3, r1
 8008192:	2100      	movs	r1, #0
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f000 f812 	bl	80081be <USBH_GetDescriptor>
 800819a:	4603      	mov	r3, r0
 800819c:	75fb      	strb	r3, [r7, #23]
 800819e:	7dfb      	ldrb	r3, [r7, #23]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d107      	bne.n	80081b4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80081aa:	893a      	ldrh	r2, [r7, #8]
 80081ac:	6879      	ldr	r1, [r7, #4]
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 fa37 	bl	8008622 <USBH_ParseStringDesc>
  }

  return status;
 80081b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3718      	adds	r7, #24
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b084      	sub	sp, #16
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	60f8      	str	r0, [r7, #12]
 80081c6:	607b      	str	r3, [r7, #4]
 80081c8:	460b      	mov	r3, r1
 80081ca:	72fb      	strb	r3, [r7, #11]
 80081cc:	4613      	mov	r3, r2
 80081ce:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	789b      	ldrb	r3, [r3, #2]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d11c      	bne.n	8008212 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80081d8:	7afb      	ldrb	r3, [r7, #11]
 80081da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80081de:	b2da      	uxtb	r2, r3
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2206      	movs	r2, #6
 80081e8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	893a      	ldrh	r2, [r7, #8]
 80081ee:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80081f0:	893b      	ldrh	r3, [r7, #8]
 80081f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80081f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081fa:	d104      	bne.n	8008206 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f240 4209 	movw	r2, #1033	; 0x409
 8008202:	829a      	strh	r2, [r3, #20]
 8008204:	e002      	b.n	800820c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2200      	movs	r2, #0
 800820a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	8b3a      	ldrh	r2, [r7, #24]
 8008210:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008212:	8b3b      	ldrh	r3, [r7, #24]
 8008214:	461a      	mov	r2, r3
 8008216:	6879      	ldr	r1, [r7, #4]
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f000 fa50 	bl	80086be <USBH_CtlReq>
 800821e:	4603      	mov	r3, r0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	460b      	mov	r3, r1
 8008232:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	789b      	ldrb	r3, [r3, #2]
 8008238:	2b01      	cmp	r3, #1
 800823a:	d10f      	bne.n	800825c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2205      	movs	r2, #5
 8008246:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008248:	78fb      	ldrb	r3, [r7, #3]
 800824a:	b29a      	uxth	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800825c:	2200      	movs	r2, #0
 800825e:	2100      	movs	r1, #0
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 fa2c 	bl	80086be <USBH_CtlReq>
 8008266:	4603      	mov	r3, r0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3708      	adds	r7, #8
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	460b      	mov	r3, r1
 800827a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	789b      	ldrb	r3, [r3, #2]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d10e      	bne.n	80082a2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2209      	movs	r2, #9
 800828e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	887a      	ldrh	r2, [r7, #2]
 8008294:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80082a2:	2200      	movs	r2, #0
 80082a4:	2100      	movs	r1, #0
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fa09 	bl	80086be <USBH_CtlReq>
 80082ac:	4603      	mov	r3, r0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3708      	adds	r7, #8
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b082      	sub	sp, #8
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
 80082be:	460b      	mov	r3, r1
 80082c0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	789b      	ldrb	r3, [r3, #2]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d10f      	bne.n	80082ea <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2203      	movs	r2, #3
 80082d4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80082d6:	78fb      	ldrb	r3, [r7, #3]
 80082d8:	b29a      	uxth	r2, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80082ea:	2200      	movs	r2, #0
 80082ec:	2100      	movs	r1, #0
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 f9e5 	bl	80086be <USBH_CtlReq>
 80082f4:	4603      	mov	r3, r0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b082      	sub	sp, #8
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
 8008306:	460b      	mov	r3, r1
 8008308:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	789b      	ldrb	r3, [r3, #2]
 800830e:	2b01      	cmp	r3, #1
 8008310:	d10f      	bne.n	8008332 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2202      	movs	r2, #2
 8008316:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008324:	78fb      	ldrb	r3, [r7, #3]
 8008326:	b29a      	uxth	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008332:	2200      	movs	r2, #0
 8008334:	2100      	movs	r1, #0
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 f9c1 	bl	80086be <USBH_CtlReq>
 800833c:	4603      	mov	r3, r0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008346:	b480      	push	{r7}
 8008348:	b085      	sub	sp, #20
 800834a:	af00      	add	r7, sp, #0
 800834c:	60f8      	str	r0, [r7, #12]
 800834e:	60b9      	str	r1, [r7, #8]
 8008350:	4613      	mov	r3, r2
 8008352:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	781a      	ldrb	r2, [r3, #0]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	785a      	ldrb	r2, [r3, #1]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	3302      	adds	r3, #2
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	b29a      	uxth	r2, r3
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	3303      	adds	r3, #3
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	b29b      	uxth	r3, r3
 8008374:	021b      	lsls	r3, r3, #8
 8008376:	b29b      	uxth	r3, r3
 8008378:	4313      	orrs	r3, r2
 800837a:	b29a      	uxth	r2, r3
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	791a      	ldrb	r2, [r3, #4]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	795a      	ldrb	r2, [r3, #5]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	799a      	ldrb	r2, [r3, #6]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	79da      	ldrb	r2, [r3, #7]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80083a0:	88fb      	ldrh	r3, [r7, #6]
 80083a2:	2b08      	cmp	r3, #8
 80083a4:	d939      	bls.n	800841a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	3308      	adds	r3, #8
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	b29a      	uxth	r2, r3
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	3309      	adds	r3, #9
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	021b      	lsls	r3, r3, #8
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	4313      	orrs	r3, r2
 80083bc:	b29a      	uxth	r2, r3
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	330a      	adds	r3, #10
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	330b      	adds	r3, #11
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	021b      	lsls	r3, r3, #8
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	4313      	orrs	r3, r2
 80083d8:	b29a      	uxth	r2, r3
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	330c      	adds	r3, #12
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	b29a      	uxth	r2, r3
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	330d      	adds	r3, #13
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	021b      	lsls	r3, r3, #8
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	4313      	orrs	r3, r2
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	7b9a      	ldrb	r2, [r3, #14]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	7bda      	ldrb	r2, [r3, #15]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	7c1a      	ldrb	r2, [r3, #16]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	7c5a      	ldrb	r2, [r3, #17]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	745a      	strb	r2, [r3, #17]
  }
}
 800841a:	bf00      	nop
 800841c:	3714      	adds	r7, #20
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr

08008426 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b08a      	sub	sp, #40	; 0x28
 800842a:	af00      	add	r7, sp, #0
 800842c:	60f8      	str	r0, [r7, #12]
 800842e:	60b9      	str	r1, [r7, #8]
 8008430:	4613      	mov	r3, r2
 8008432:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008438:	2300      	movs	r3, #0
 800843a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800843e:	2300      	movs	r3, #0
 8008440:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	781a      	ldrb	r2, [r3, #0]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	785a      	ldrb	r2, [r3, #1]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	3302      	adds	r3, #2
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	b29a      	uxth	r2, r3
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	3303      	adds	r3, #3
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	b29b      	uxth	r3, r3
 8008468:	021b      	lsls	r3, r3, #8
 800846a:	b29b      	uxth	r3, r3
 800846c:	4313      	orrs	r3, r2
 800846e:	b29a      	uxth	r2, r3
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	791a      	ldrb	r2, [r3, #4]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	795a      	ldrb	r2, [r3, #5]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	799a      	ldrb	r2, [r3, #6]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	79da      	ldrb	r2, [r3, #7]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	7a1a      	ldrb	r2, [r3, #8]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800849c:	88fb      	ldrh	r3, [r7, #6]
 800849e:	2b09      	cmp	r3, #9
 80084a0:	d95f      	bls.n	8008562 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80084a2:	2309      	movs	r3, #9
 80084a4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80084a6:	2300      	movs	r3, #0
 80084a8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80084aa:	e051      	b.n	8008550 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80084ac:	f107 0316 	add.w	r3, r7, #22
 80084b0:	4619      	mov	r1, r3
 80084b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084b4:	f000 f8e8 	bl	8008688 <USBH_GetNextDesc>
 80084b8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80084ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084bc:	785b      	ldrb	r3, [r3, #1]
 80084be:	2b04      	cmp	r3, #4
 80084c0:	d146      	bne.n	8008550 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80084c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084c6:	221a      	movs	r2, #26
 80084c8:	fb02 f303 	mul.w	r3, r2, r3
 80084cc:	3308      	adds	r3, #8
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	4413      	add	r3, r2
 80084d2:	3302      	adds	r3, #2
 80084d4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80084d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084d8:	69f8      	ldr	r0, [r7, #28]
 80084da:	f000 f846 	bl	800856a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80084de:	2300      	movs	r3, #0
 80084e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80084e4:	2300      	movs	r3, #0
 80084e6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80084e8:	e022      	b.n	8008530 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80084ea:	f107 0316 	add.w	r3, r7, #22
 80084ee:	4619      	mov	r1, r3
 80084f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084f2:	f000 f8c9 	bl	8008688 <USBH_GetNextDesc>
 80084f6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80084f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fa:	785b      	ldrb	r3, [r3, #1]
 80084fc:	2b05      	cmp	r3, #5
 80084fe:	d117      	bne.n	8008530 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008500:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008504:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008508:	3201      	adds	r2, #1
 800850a:	00d2      	lsls	r2, r2, #3
 800850c:	211a      	movs	r1, #26
 800850e:	fb01 f303 	mul.w	r3, r1, r3
 8008512:	4413      	add	r3, r2
 8008514:	3308      	adds	r3, #8
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	4413      	add	r3, r2
 800851a:	3304      	adds	r3, #4
 800851c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800851e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008520:	69b8      	ldr	r0, [r7, #24]
 8008522:	f000 f851 	bl	80085c8 <USBH_ParseEPDesc>
            ep_ix++;
 8008526:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800852a:	3301      	adds	r3, #1
 800852c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	791b      	ldrb	r3, [r3, #4]
 8008534:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008538:	429a      	cmp	r2, r3
 800853a:	d204      	bcs.n	8008546 <USBH_ParseCfgDesc+0x120>
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	885a      	ldrh	r2, [r3, #2]
 8008540:	8afb      	ldrh	r3, [r7, #22]
 8008542:	429a      	cmp	r2, r3
 8008544:	d8d1      	bhi.n	80084ea <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008546:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800854a:	3301      	adds	r3, #1
 800854c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008550:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008554:	2b01      	cmp	r3, #1
 8008556:	d804      	bhi.n	8008562 <USBH_ParseCfgDesc+0x13c>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	885a      	ldrh	r2, [r3, #2]
 800855c:	8afb      	ldrh	r3, [r7, #22]
 800855e:	429a      	cmp	r2, r3
 8008560:	d8a4      	bhi.n	80084ac <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008562:	bf00      	nop
 8008564:	3728      	adds	r7, #40	; 0x28
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800856a:	b480      	push	{r7}
 800856c:	b083      	sub	sp, #12
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
 8008572:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	781a      	ldrb	r2, [r3, #0]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	785a      	ldrb	r2, [r3, #1]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	789a      	ldrb	r2, [r3, #2]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	78da      	ldrb	r2, [r3, #3]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	791a      	ldrb	r2, [r3, #4]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	795a      	ldrb	r2, [r3, #5]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	799a      	ldrb	r2, [r3, #6]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	79da      	ldrb	r2, [r3, #7]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	7a1a      	ldrb	r2, [r3, #8]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	721a      	strb	r2, [r3, #8]
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	781a      	ldrb	r2, [r3, #0]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	785a      	ldrb	r2, [r3, #1]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	789a      	ldrb	r2, [r3, #2]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	78da      	ldrb	r2, [r3, #3]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	3304      	adds	r3, #4
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	3305      	adds	r3, #5
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	b29b      	uxth	r3, r3
 8008602:	021b      	lsls	r3, r3, #8
 8008604:	b29b      	uxth	r3, r3
 8008606:	4313      	orrs	r3, r2
 8008608:	b29a      	uxth	r2, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	799a      	ldrb	r2, [r3, #6]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	719a      	strb	r2, [r3, #6]
}
 8008616:	bf00      	nop
 8008618:	370c      	adds	r7, #12
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008622:	b480      	push	{r7}
 8008624:	b087      	sub	sp, #28
 8008626:	af00      	add	r7, sp, #0
 8008628:	60f8      	str	r0, [r7, #12]
 800862a:	60b9      	str	r1, [r7, #8]
 800862c:	4613      	mov	r3, r2
 800862e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	3301      	adds	r3, #1
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	2b03      	cmp	r3, #3
 8008638:	d120      	bne.n	800867c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	1e9a      	subs	r2, r3, #2
 8008640:	88fb      	ldrh	r3, [r7, #6]
 8008642:	4293      	cmp	r3, r2
 8008644:	bf28      	it	cs
 8008646:	4613      	movcs	r3, r2
 8008648:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	3302      	adds	r3, #2
 800864e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008650:	2300      	movs	r3, #0
 8008652:	82fb      	strh	r3, [r7, #22]
 8008654:	e00b      	b.n	800866e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008656:	8afb      	ldrh	r3, [r7, #22]
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	4413      	add	r3, r2
 800865c:	781a      	ldrb	r2, [r3, #0]
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	3301      	adds	r3, #1
 8008666:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008668:	8afb      	ldrh	r3, [r7, #22]
 800866a:	3302      	adds	r3, #2
 800866c:	82fb      	strh	r3, [r7, #22]
 800866e:	8afa      	ldrh	r2, [r7, #22]
 8008670:	8abb      	ldrh	r3, [r7, #20]
 8008672:	429a      	cmp	r2, r3
 8008674:	d3ef      	bcc.n	8008656 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	2200      	movs	r2, #0
 800867a:	701a      	strb	r2, [r3, #0]
  }
}
 800867c:	bf00      	nop
 800867e:	371c      	adds	r7, #28
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	881a      	ldrh	r2, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	b29b      	uxth	r3, r3
 800869c:	4413      	add	r3, r2
 800869e:	b29a      	uxth	r2, r3
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4413      	add	r3, r2
 80086ae:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80086b0:	68fb      	ldr	r3, [r7, #12]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3714      	adds	r7, #20
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr

080086be <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b086      	sub	sp, #24
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	60f8      	str	r0, [r7, #12]
 80086c6:	60b9      	str	r1, [r7, #8]
 80086c8:	4613      	mov	r3, r2
 80086ca:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80086cc:	2301      	movs	r3, #1
 80086ce:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	789b      	ldrb	r3, [r3, #2]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d002      	beq.n	80086de <USBH_CtlReq+0x20>
 80086d8:	2b02      	cmp	r3, #2
 80086da:	d00f      	beq.n	80086fc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80086dc:	e027      	b.n	800872e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	68ba      	ldr	r2, [r7, #8]
 80086e2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	88fa      	ldrh	r2, [r7, #6]
 80086e8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2201      	movs	r2, #1
 80086ee:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2202      	movs	r2, #2
 80086f4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80086f6:	2301      	movs	r3, #1
 80086f8:	75fb      	strb	r3, [r7, #23]
      break;
 80086fa:	e018      	b.n	800872e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f000 f81b 	bl	8008738 <USBH_HandleControl>
 8008702:	4603      	mov	r3, r0
 8008704:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008706:	7dfb      	ldrb	r3, [r7, #23]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d002      	beq.n	8008712 <USBH_CtlReq+0x54>
 800870c:	7dfb      	ldrb	r3, [r7, #23]
 800870e:	2b03      	cmp	r3, #3
 8008710:	d106      	bne.n	8008720 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2201      	movs	r2, #1
 8008716:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2200      	movs	r2, #0
 800871c:	761a      	strb	r2, [r3, #24]
      break;
 800871e:	e005      	b.n	800872c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008720:	7dfb      	ldrb	r3, [r7, #23]
 8008722:	2b02      	cmp	r3, #2
 8008724:	d102      	bne.n	800872c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2201      	movs	r2, #1
 800872a:	709a      	strb	r2, [r3, #2]
      break;
 800872c:	bf00      	nop
  }
  return status;
 800872e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008730:	4618      	mov	r0, r3
 8008732:	3718      	adds	r7, #24
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b086      	sub	sp, #24
 800873c:	af02      	add	r7, sp, #8
 800873e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008740:	2301      	movs	r3, #1
 8008742:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008744:	2300      	movs	r3, #0
 8008746:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	7e1b      	ldrb	r3, [r3, #24]
 800874c:	3b01      	subs	r3, #1
 800874e:	2b0a      	cmp	r3, #10
 8008750:	f200 8158 	bhi.w	8008a04 <USBH_HandleControl+0x2cc>
 8008754:	a201      	add	r2, pc, #4	; (adr r2, 800875c <USBH_HandleControl+0x24>)
 8008756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800875a:	bf00      	nop
 800875c:	08008789 	.word	0x08008789
 8008760:	080087a3 	.word	0x080087a3
 8008764:	0800880d 	.word	0x0800880d
 8008768:	08008833 	.word	0x08008833
 800876c:	0800886b 	.word	0x0800886b
 8008770:	08008897 	.word	0x08008897
 8008774:	080088e9 	.word	0x080088e9
 8008778:	0800890b 	.word	0x0800890b
 800877c:	08008947 	.word	0x08008947
 8008780:	0800896f 	.word	0x0800896f
 8008784:	080089ad 	.word	0x080089ad
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f103 0110 	add.w	r1, r3, #16
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	795b      	ldrb	r3, [r3, #5]
 8008792:	461a      	mov	r2, r3
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 f945 	bl	8008a24 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2202      	movs	r2, #2
 800879e:	761a      	strb	r2, [r3, #24]
      break;
 80087a0:	e13b      	b.n	8008a1a <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	795b      	ldrb	r3, [r3, #5]
 80087a6:	4619      	mov	r1, r3
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f005 fb4d 	bl	800de48 <USBH_LL_GetURBState>
 80087ae:	4603      	mov	r3, r0
 80087b0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80087b2:	7bbb      	ldrb	r3, [r7, #14]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d11e      	bne.n	80087f6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	7c1b      	ldrb	r3, [r3, #16]
 80087bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80087c0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	8adb      	ldrh	r3, [r3, #22]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00a      	beq.n	80087e0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80087ca:	7b7b      	ldrb	r3, [r7, #13]
 80087cc:	2b80      	cmp	r3, #128	; 0x80
 80087ce:	d103      	bne.n	80087d8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2203      	movs	r2, #3
 80087d4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80087d6:	e117      	b.n	8008a08 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2205      	movs	r2, #5
 80087dc:	761a      	strb	r2, [r3, #24]
      break;
 80087de:	e113      	b.n	8008a08 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 80087e0:	7b7b      	ldrb	r3, [r7, #13]
 80087e2:	2b80      	cmp	r3, #128	; 0x80
 80087e4:	d103      	bne.n	80087ee <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2209      	movs	r2, #9
 80087ea:	761a      	strb	r2, [r3, #24]
      break;
 80087ec:	e10c      	b.n	8008a08 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2207      	movs	r2, #7
 80087f2:	761a      	strb	r2, [r3, #24]
      break;
 80087f4:	e108      	b.n	8008a08 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80087f6:	7bbb      	ldrb	r3, [r7, #14]
 80087f8:	2b04      	cmp	r3, #4
 80087fa:	d003      	beq.n	8008804 <USBH_HandleControl+0xcc>
 80087fc:	7bbb      	ldrb	r3, [r7, #14]
 80087fe:	2b02      	cmp	r3, #2
 8008800:	f040 8102 	bne.w	8008a08 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	220b      	movs	r2, #11
 8008808:	761a      	strb	r2, [r3, #24]
      break;
 800880a:	e0fd      	b.n	8008a08 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008812:	b29a      	uxth	r2, r3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6899      	ldr	r1, [r3, #8]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	899a      	ldrh	r2, [r3, #12]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	791b      	ldrb	r3, [r3, #4]
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 f93c 	bl	8008aa2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2204      	movs	r2, #4
 800882e:	761a      	strb	r2, [r3, #24]
      break;
 8008830:	e0f3      	b.n	8008a1a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	791b      	ldrb	r3, [r3, #4]
 8008836:	4619      	mov	r1, r3
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f005 fb05 	bl	800de48 <USBH_LL_GetURBState>
 800883e:	4603      	mov	r3, r0
 8008840:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008842:	7bbb      	ldrb	r3, [r7, #14]
 8008844:	2b01      	cmp	r3, #1
 8008846:	d102      	bne.n	800884e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2209      	movs	r2, #9
 800884c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800884e:	7bbb      	ldrb	r3, [r7, #14]
 8008850:	2b05      	cmp	r3, #5
 8008852:	d102      	bne.n	800885a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008854:	2303      	movs	r3, #3
 8008856:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008858:	e0d8      	b.n	8008a0c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800885a:	7bbb      	ldrb	r3, [r7, #14]
 800885c:	2b04      	cmp	r3, #4
 800885e:	f040 80d5 	bne.w	8008a0c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	220b      	movs	r2, #11
 8008866:	761a      	strb	r2, [r3, #24]
      break;
 8008868:	e0d0      	b.n	8008a0c <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6899      	ldr	r1, [r3, #8]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	899a      	ldrh	r2, [r3, #12]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	7958      	ldrb	r0, [r3, #5]
 8008876:	2301      	movs	r3, #1
 8008878:	9300      	str	r3, [sp, #0]
 800887a:	4603      	mov	r3, r0
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f8eb 	bl	8008a58 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008888:	b29a      	uxth	r2, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2206      	movs	r2, #6
 8008892:	761a      	strb	r2, [r3, #24]
      break;
 8008894:	e0c1      	b.n	8008a1a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	795b      	ldrb	r3, [r3, #5]
 800889a:	4619      	mov	r1, r3
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f005 fad3 	bl	800de48 <USBH_LL_GetURBState>
 80088a2:	4603      	mov	r3, r0
 80088a4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80088a6:	7bbb      	ldrb	r3, [r7, #14]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d103      	bne.n	80088b4 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2207      	movs	r2, #7
 80088b0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80088b2:	e0ad      	b.n	8008a10 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 80088b4:	7bbb      	ldrb	r3, [r7, #14]
 80088b6:	2b05      	cmp	r3, #5
 80088b8:	d105      	bne.n	80088c6 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	220c      	movs	r2, #12
 80088be:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80088c0:	2303      	movs	r3, #3
 80088c2:	73fb      	strb	r3, [r7, #15]
      break;
 80088c4:	e0a4      	b.n	8008a10 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 80088c6:	7bbb      	ldrb	r3, [r7, #14]
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d103      	bne.n	80088d4 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2205      	movs	r2, #5
 80088d0:	761a      	strb	r2, [r3, #24]
      break;
 80088d2:	e09d      	b.n	8008a10 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 80088d4:	7bbb      	ldrb	r3, [r7, #14]
 80088d6:	2b04      	cmp	r3, #4
 80088d8:	f040 809a 	bne.w	8008a10 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	220b      	movs	r2, #11
 80088e0:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80088e2:	2302      	movs	r3, #2
 80088e4:	73fb      	strb	r3, [r7, #15]
      break;
 80088e6:	e093      	b.n	8008a10 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	791b      	ldrb	r3, [r3, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	2100      	movs	r1, #0
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 f8d6 	bl	8008aa2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80088fc:	b29a      	uxth	r2, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2208      	movs	r2, #8
 8008906:	761a      	strb	r2, [r3, #24]

      break;
 8008908:	e087      	b.n	8008a1a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	791b      	ldrb	r3, [r3, #4]
 800890e:	4619      	mov	r1, r3
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f005 fa99 	bl	800de48 <USBH_LL_GetURBState>
 8008916:	4603      	mov	r3, r0
 8008918:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800891a:	7bbb      	ldrb	r3, [r7, #14]
 800891c:	2b01      	cmp	r3, #1
 800891e:	d105      	bne.n	800892c <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	220d      	movs	r2, #13
 8008924:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008926:	2300      	movs	r3, #0
 8008928:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800892a:	e073      	b.n	8008a14 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800892c:	7bbb      	ldrb	r3, [r7, #14]
 800892e:	2b04      	cmp	r3, #4
 8008930:	d103      	bne.n	800893a <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	220b      	movs	r2, #11
 8008936:	761a      	strb	r2, [r3, #24]
      break;
 8008938:	e06c      	b.n	8008a14 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800893a:	7bbb      	ldrb	r3, [r7, #14]
 800893c:	2b05      	cmp	r3, #5
 800893e:	d169      	bne.n	8008a14 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8008940:	2303      	movs	r3, #3
 8008942:	73fb      	strb	r3, [r7, #15]
      break;
 8008944:	e066      	b.n	8008a14 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	795a      	ldrb	r2, [r3, #5]
 800894a:	2301      	movs	r3, #1
 800894c:	9300      	str	r3, [sp, #0]
 800894e:	4613      	mov	r3, r2
 8008950:	2200      	movs	r2, #0
 8008952:	2100      	movs	r1, #0
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f87f 	bl	8008a58 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008960:	b29a      	uxth	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	220a      	movs	r2, #10
 800896a:	761a      	strb	r2, [r3, #24]
      break;
 800896c:	e055      	b.n	8008a1a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	795b      	ldrb	r3, [r3, #5]
 8008972:	4619      	mov	r1, r3
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f005 fa67 	bl	800de48 <USBH_LL_GetURBState>
 800897a:	4603      	mov	r3, r0
 800897c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800897e:	7bbb      	ldrb	r3, [r7, #14]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d105      	bne.n	8008990 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8008984:	2300      	movs	r3, #0
 8008986:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	220d      	movs	r2, #13
 800898c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800898e:	e043      	b.n	8008a18 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008990:	7bbb      	ldrb	r3, [r7, #14]
 8008992:	2b02      	cmp	r3, #2
 8008994:	d103      	bne.n	800899e <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2209      	movs	r2, #9
 800899a:	761a      	strb	r2, [r3, #24]
      break;
 800899c:	e03c      	b.n	8008a18 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800899e:	7bbb      	ldrb	r3, [r7, #14]
 80089a0:	2b04      	cmp	r3, #4
 80089a2:	d139      	bne.n	8008a18 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	220b      	movs	r2, #11
 80089a8:	761a      	strb	r2, [r3, #24]
      break;
 80089aa:	e035      	b.n	8008a18 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	7e5b      	ldrb	r3, [r3, #25]
 80089b0:	3301      	adds	r3, #1
 80089b2:	b2da      	uxtb	r2, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	765a      	strb	r2, [r3, #25]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	7e5b      	ldrb	r3, [r3, #25]
 80089bc:	2b02      	cmp	r3, #2
 80089be:	d806      	bhi.n	80089ce <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2201      	movs	r2, #1
 80089c4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2201      	movs	r2, #1
 80089ca:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80089cc:	e025      	b.n	8008a1a <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80089d4:	2106      	movs	r1, #6
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	795b      	ldrb	r3, [r3, #5]
 80089e4:	4619      	mov	r1, r3
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 f90c 	bl	8008c04 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	791b      	ldrb	r3, [r3, #4]
 80089f0:	4619      	mov	r1, r3
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f906 	bl	8008c04 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80089fe:	2302      	movs	r3, #2
 8008a00:	73fb      	strb	r3, [r7, #15]
      break;
 8008a02:	e00a      	b.n	8008a1a <USBH_HandleControl+0x2e2>

    default:
      break;
 8008a04:	bf00      	nop
 8008a06:	e008      	b.n	8008a1a <USBH_HandleControl+0x2e2>
      break;
 8008a08:	bf00      	nop
 8008a0a:	e006      	b.n	8008a1a <USBH_HandleControl+0x2e2>
      break;
 8008a0c:	bf00      	nop
 8008a0e:	e004      	b.n	8008a1a <USBH_HandleControl+0x2e2>
      break;
 8008a10:	bf00      	nop
 8008a12:	e002      	b.n	8008a1a <USBH_HandleControl+0x2e2>
      break;
 8008a14:	bf00      	nop
 8008a16:	e000      	b.n	8008a1a <USBH_HandleControl+0x2e2>
      break;
 8008a18:	bf00      	nop
  }

  return status;
 8008a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b088      	sub	sp, #32
 8008a28:	af04      	add	r7, sp, #16
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	4613      	mov	r3, r2
 8008a30:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008a32:	79f9      	ldrb	r1, [r7, #7]
 8008a34:	2300      	movs	r3, #0
 8008a36:	9303      	str	r3, [sp, #12]
 8008a38:	2308      	movs	r3, #8
 8008a3a:	9302      	str	r3, [sp, #8]
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	9301      	str	r3, [sp, #4]
 8008a40:	2300      	movs	r3, #0
 8008a42:	9300      	str	r3, [sp, #0]
 8008a44:	2300      	movs	r3, #0
 8008a46:	2200      	movs	r2, #0
 8008a48:	68f8      	ldr	r0, [r7, #12]
 8008a4a:	f005 f9cc 	bl	800dde6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008a4e:	2300      	movs	r3, #0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3710      	adds	r7, #16
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b088      	sub	sp, #32
 8008a5c:	af04      	add	r7, sp, #16
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	4611      	mov	r1, r2
 8008a64:	461a      	mov	r2, r3
 8008a66:	460b      	mov	r3, r1
 8008a68:	80fb      	strh	r3, [r7, #6]
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d001      	beq.n	8008a7c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008a7c:	7979      	ldrb	r1, [r7, #5]
 8008a7e:	7e3b      	ldrb	r3, [r7, #24]
 8008a80:	9303      	str	r3, [sp, #12]
 8008a82:	88fb      	ldrh	r3, [r7, #6]
 8008a84:	9302      	str	r3, [sp, #8]
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	9301      	str	r3, [sp, #4]
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	9300      	str	r3, [sp, #0]
 8008a8e:	2300      	movs	r3, #0
 8008a90:	2200      	movs	r2, #0
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	f005 f9a7 	bl	800dde6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b088      	sub	sp, #32
 8008aa6:	af04      	add	r7, sp, #16
 8008aa8:	60f8      	str	r0, [r7, #12]
 8008aaa:	60b9      	str	r1, [r7, #8]
 8008aac:	4611      	mov	r1, r2
 8008aae:	461a      	mov	r2, r3
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	80fb      	strh	r3, [r7, #6]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008ab8:	7979      	ldrb	r1, [r7, #5]
 8008aba:	2300      	movs	r3, #0
 8008abc:	9303      	str	r3, [sp, #12]
 8008abe:	88fb      	ldrh	r3, [r7, #6]
 8008ac0:	9302      	str	r3, [sp, #8]
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	9301      	str	r3, [sp, #4]
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	9300      	str	r3, [sp, #0]
 8008aca:	2300      	movs	r3, #0
 8008acc:	2201      	movs	r2, #1
 8008ace:	68f8      	ldr	r0, [r7, #12]
 8008ad0:	f005 f989 	bl	800dde6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008ad4:	2300      	movs	r3, #0

}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b088      	sub	sp, #32
 8008ae2:	af04      	add	r7, sp, #16
 8008ae4:	60f8      	str	r0, [r7, #12]
 8008ae6:	60b9      	str	r1, [r7, #8]
 8008ae8:	4611      	mov	r1, r2
 8008aea:	461a      	mov	r2, r3
 8008aec:	460b      	mov	r3, r1
 8008aee:	80fb      	strh	r3, [r7, #6]
 8008af0:	4613      	mov	r3, r2
 8008af2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d001      	beq.n	8008b02 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008afe:	2300      	movs	r3, #0
 8008b00:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008b02:	7979      	ldrb	r1, [r7, #5]
 8008b04:	7e3b      	ldrb	r3, [r7, #24]
 8008b06:	9303      	str	r3, [sp, #12]
 8008b08:	88fb      	ldrh	r3, [r7, #6]
 8008b0a:	9302      	str	r3, [sp, #8]
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	9301      	str	r3, [sp, #4]
 8008b10:	2301      	movs	r3, #1
 8008b12:	9300      	str	r3, [sp, #0]
 8008b14:	2302      	movs	r3, #2
 8008b16:	2200      	movs	r2, #0
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f005 f964 	bl	800dde6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b088      	sub	sp, #32
 8008b2c:	af04      	add	r7, sp, #16
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	4611      	mov	r1, r2
 8008b34:	461a      	mov	r2, r3
 8008b36:	460b      	mov	r3, r1
 8008b38:	80fb      	strh	r3, [r7, #6]
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008b3e:	7979      	ldrb	r1, [r7, #5]
 8008b40:	2300      	movs	r3, #0
 8008b42:	9303      	str	r3, [sp, #12]
 8008b44:	88fb      	ldrh	r3, [r7, #6]
 8008b46:	9302      	str	r3, [sp, #8]
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	9301      	str	r3, [sp, #4]
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	9300      	str	r3, [sp, #0]
 8008b50:	2302      	movs	r3, #2
 8008b52:	2201      	movs	r2, #1
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	f005 f946 	bl	800dde6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3710      	adds	r7, #16
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b086      	sub	sp, #24
 8008b68:	af04      	add	r7, sp, #16
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	4608      	mov	r0, r1
 8008b6e:	4611      	mov	r1, r2
 8008b70:	461a      	mov	r2, r3
 8008b72:	4603      	mov	r3, r0
 8008b74:	70fb      	strb	r3, [r7, #3]
 8008b76:	460b      	mov	r3, r1
 8008b78:	70bb      	strb	r3, [r7, #2]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008b7e:	7878      	ldrb	r0, [r7, #1]
 8008b80:	78ba      	ldrb	r2, [r7, #2]
 8008b82:	78f9      	ldrb	r1, [r7, #3]
 8008b84:	8b3b      	ldrh	r3, [r7, #24]
 8008b86:	9302      	str	r3, [sp, #8]
 8008b88:	7d3b      	ldrb	r3, [r7, #20]
 8008b8a:	9301      	str	r3, [sp, #4]
 8008b8c:	7c3b      	ldrb	r3, [r7, #16]
 8008b8e:	9300      	str	r3, [sp, #0]
 8008b90:	4603      	mov	r3, r0
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f005 f8d9 	bl	800dd4a <USBH_LL_OpenPipe>

  return USBH_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3708      	adds	r7, #8
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b082      	sub	sp, #8
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
 8008baa:	460b      	mov	r3, r1
 8008bac:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008bae:	78fb      	ldrb	r3, [r7, #3]
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f005 f8f8 	bl	800dda8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b084      	sub	sp, #16
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
 8008bca:	460b      	mov	r3, r1
 8008bcc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 f836 	bl	8008c40 <USBH_GetFreePipe>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008bd8:	89fb      	ldrh	r3, [r7, #14]
 8008bda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d00a      	beq.n	8008bf8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008be2:	78fa      	ldrb	r2, [r7, #3]
 8008be4:	89fb      	ldrh	r3, [r7, #14]
 8008be6:	f003 030f 	and.w	r3, r3, #15
 8008bea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008bee:	6879      	ldr	r1, [r7, #4]
 8008bf0:	33e0      	adds	r3, #224	; 0xe0
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	440b      	add	r3, r1
 8008bf6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008bf8:	89fb      	ldrh	r3, [r7, #14]
 8008bfa:	b2db      	uxtb	r3, r3
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008c10:	78fb      	ldrb	r3, [r7, #3]
 8008c12:	2b0a      	cmp	r3, #10
 8008c14:	d80d      	bhi.n	8008c32 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008c16:	78fb      	ldrb	r3, [r7, #3]
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	33e0      	adds	r3, #224	; 0xe0
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	4413      	add	r3, r2
 8008c20:	685a      	ldr	r2, [r3, #4]
 8008c22:	78fb      	ldrb	r3, [r7, #3]
 8008c24:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008c28:	6879      	ldr	r1, [r7, #4]
 8008c2a:	33e0      	adds	r3, #224	; 0xe0
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	440b      	add	r3, r1
 8008c30:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	73fb      	strb	r3, [r7, #15]
 8008c50:	e00f      	b.n	8008c72 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008c52:	7bfb      	ldrb	r3, [r7, #15]
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	33e0      	adds	r3, #224	; 0xe0
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4413      	add	r3, r2
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d102      	bne.n	8008c6c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008c66:	7bfb      	ldrb	r3, [r7, #15]
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	e007      	b.n	8008c7c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008c6c:	7bfb      	ldrb	r3, [r7, #15]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	73fb      	strb	r3, [r7, #15]
 8008c72:	7bfb      	ldrb	r3, [r7, #15]
 8008c74:	2b0a      	cmp	r3, #10
 8008c76:	d9ec      	bls.n	8008c52 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008c78:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3714      	adds	r7, #20
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	4603      	mov	r3, r0
 8008c90:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008c92:	79fb      	ldrb	r3, [r7, #7]
 8008c94:	4a08      	ldr	r2, [pc, #32]	; (8008cb8 <disk_status+0x30>)
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	4413      	add	r3, r2
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	79fa      	ldrb	r2, [r7, #7]
 8008ca0:	4905      	ldr	r1, [pc, #20]	; (8008cb8 <disk_status+0x30>)
 8008ca2:	440a      	add	r2, r1
 8008ca4:	7a12      	ldrb	r2, [r2, #8]
 8008ca6:	4610      	mov	r0, r2
 8008ca8:	4798      	blx	r3
 8008caa:	4603      	mov	r3, r0
 8008cac:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	20000544 	.word	0x20000544

08008cbc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008cca:	79fb      	ldrb	r3, [r7, #7]
 8008ccc:	4a0d      	ldr	r2, [pc, #52]	; (8008d04 <disk_initialize+0x48>)
 8008cce:	5cd3      	ldrb	r3, [r2, r3]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d111      	bne.n	8008cf8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008cd4:	79fb      	ldrb	r3, [r7, #7]
 8008cd6:	4a0b      	ldr	r2, [pc, #44]	; (8008d04 <disk_initialize+0x48>)
 8008cd8:	2101      	movs	r1, #1
 8008cda:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008cdc:	79fb      	ldrb	r3, [r7, #7]
 8008cde:	4a09      	ldr	r2, [pc, #36]	; (8008d04 <disk_initialize+0x48>)
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4413      	add	r3, r2
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	79fa      	ldrb	r2, [r7, #7]
 8008cea:	4906      	ldr	r1, [pc, #24]	; (8008d04 <disk_initialize+0x48>)
 8008cec:	440a      	add	r2, r1
 8008cee:	7a12      	ldrb	r2, [r2, #8]
 8008cf0:	4610      	mov	r0, r2
 8008cf2:	4798      	blx	r3
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	20000544 	.word	0x20000544

08008d08 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008d08:	b590      	push	{r4, r7, lr}
 8008d0a:	b087      	sub	sp, #28
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60b9      	str	r1, [r7, #8]
 8008d10:	607a      	str	r2, [r7, #4]
 8008d12:	603b      	str	r3, [r7, #0]
 8008d14:	4603      	mov	r3, r0
 8008d16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008d18:	7bfb      	ldrb	r3, [r7, #15]
 8008d1a:	4a0a      	ldr	r2, [pc, #40]	; (8008d44 <disk_read+0x3c>)
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	4413      	add	r3, r2
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	689c      	ldr	r4, [r3, #8]
 8008d24:	7bfb      	ldrb	r3, [r7, #15]
 8008d26:	4a07      	ldr	r2, [pc, #28]	; (8008d44 <disk_read+0x3c>)
 8008d28:	4413      	add	r3, r2
 8008d2a:	7a18      	ldrb	r0, [r3, #8]
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	68b9      	ldr	r1, [r7, #8]
 8008d32:	47a0      	blx	r4
 8008d34:	4603      	mov	r3, r0
 8008d36:	75fb      	strb	r3, [r7, #23]
  return res;
 8008d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	371c      	adds	r7, #28
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd90      	pop	{r4, r7, pc}
 8008d42:	bf00      	nop
 8008d44:	20000544 	.word	0x20000544

08008d48 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008d48:	b590      	push	{r4, r7, lr}
 8008d4a:	b087      	sub	sp, #28
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60b9      	str	r1, [r7, #8]
 8008d50:	607a      	str	r2, [r7, #4]
 8008d52:	603b      	str	r3, [r7, #0]
 8008d54:	4603      	mov	r3, r0
 8008d56:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008d58:	7bfb      	ldrb	r3, [r7, #15]
 8008d5a:	4a0a      	ldr	r2, [pc, #40]	; (8008d84 <disk_write+0x3c>)
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	4413      	add	r3, r2
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	68dc      	ldr	r4, [r3, #12]
 8008d64:	7bfb      	ldrb	r3, [r7, #15]
 8008d66:	4a07      	ldr	r2, [pc, #28]	; (8008d84 <disk_write+0x3c>)
 8008d68:	4413      	add	r3, r2
 8008d6a:	7a18      	ldrb	r0, [r3, #8]
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	68b9      	ldr	r1, [r7, #8]
 8008d72:	47a0      	blx	r4
 8008d74:	4603      	mov	r3, r0
 8008d76:	75fb      	strb	r3, [r7, #23]
  return res;
 8008d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	371c      	adds	r7, #28
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd90      	pop	{r4, r7, pc}
 8008d82:	bf00      	nop
 8008d84:	20000544 	.word	0x20000544

08008d88 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	4603      	mov	r3, r0
 8008d90:	603a      	str	r2, [r7, #0]
 8008d92:	71fb      	strb	r3, [r7, #7]
 8008d94:	460b      	mov	r3, r1
 8008d96:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008d98:	79fb      	ldrb	r3, [r7, #7]
 8008d9a:	4a09      	ldr	r2, [pc, #36]	; (8008dc0 <disk_ioctl+0x38>)
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	4413      	add	r3, r2
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	79fa      	ldrb	r2, [r7, #7]
 8008da6:	4906      	ldr	r1, [pc, #24]	; (8008dc0 <disk_ioctl+0x38>)
 8008da8:	440a      	add	r2, r1
 8008daa:	7a10      	ldrb	r0, [r2, #8]
 8008dac:	79b9      	ldrb	r1, [r7, #6]
 8008dae:	683a      	ldr	r2, [r7, #0]
 8008db0:	4798      	blx	r3
 8008db2:	4603      	mov	r3, r0
 8008db4:	73fb      	strb	r3, [r7, #15]
  return res;
 8008db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3710      	adds	r7, #16
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	20000544 	.word	0x20000544

08008dc4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b085      	sub	sp, #20
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008dd4:	89fb      	ldrh	r3, [r7, #14]
 8008dd6:	021b      	lsls	r3, r3, #8
 8008dd8:	b21a      	sxth	r2, r3
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	b21b      	sxth	r3, r3
 8008de0:	4313      	orrs	r3, r2
 8008de2:	b21b      	sxth	r3, r3
 8008de4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008de6:	89fb      	ldrh	r3, [r7, #14]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3714      	adds	r7, #20
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008df4:	b480      	push	{r7}
 8008df6:	b085      	sub	sp, #20
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	3303      	adds	r3, #3
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	021b      	lsls	r3, r3, #8
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	3202      	adds	r2, #2
 8008e0c:	7812      	ldrb	r2, [r2, #0]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	021b      	lsls	r3, r3, #8
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	3201      	adds	r2, #1
 8008e1a:	7812      	ldrb	r2, [r2, #0]
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	021b      	lsls	r3, r3, #8
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	7812      	ldrb	r2, [r2, #0]
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	60fb      	str	r3, [r7, #12]
	return rv;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3714      	adds	r7, #20
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr

08008e3a <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8008e3a:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
	QWORD rv;

	rv = ptr[7];
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	3307      	adds	r3, #7
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	f04f 0400 	mov.w	r4, #0
 8008e50:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[6];
 8008e54:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008e58:	f04f 0b00 	mov.w	fp, #0
 8008e5c:	f04f 0c00 	mov.w	ip, #0
 8008e60:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8008e64:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8008e68:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	3206      	adds	r2, #6
 8008e70:	7812      	ldrb	r2, [r2, #0]
 8008e72:	b2d1      	uxtb	r1, r2
 8008e74:	f04f 0200 	mov.w	r2, #0
 8008e78:	ea4b 0301 	orr.w	r3, fp, r1
 8008e7c:	ea4c 0402 	orr.w	r4, ip, r2
 8008e80:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[5];
 8008e84:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008e88:	f04f 0b00 	mov.w	fp, #0
 8008e8c:	f04f 0c00 	mov.w	ip, #0
 8008e90:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8008e94:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8008e98:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	3205      	adds	r2, #5
 8008ea0:	7812      	ldrb	r2, [r2, #0]
 8008ea2:	b2d1      	uxtb	r1, r2
 8008ea4:	f04f 0200 	mov.w	r2, #0
 8008ea8:	ea4b 0301 	orr.w	r3, fp, r1
 8008eac:	ea4c 0402 	orr.w	r4, ip, r2
 8008eb0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[4];
 8008eb4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008eb8:	f04f 0b00 	mov.w	fp, #0
 8008ebc:	f04f 0c00 	mov.w	ip, #0
 8008ec0:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8008ec4:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8008ec8:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	3204      	adds	r2, #4
 8008ed0:	7812      	ldrb	r2, [r2, #0]
 8008ed2:	b2d1      	uxtb	r1, r2
 8008ed4:	f04f 0200 	mov.w	r2, #0
 8008ed8:	ea4b 0301 	orr.w	r3, fp, r1
 8008edc:	ea4c 0402 	orr.w	r4, ip, r2
 8008ee0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[3];
 8008ee4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008ee8:	f04f 0b00 	mov.w	fp, #0
 8008eec:	f04f 0c00 	mov.w	ip, #0
 8008ef0:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8008ef4:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8008ef8:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	3203      	adds	r2, #3
 8008f00:	7812      	ldrb	r2, [r2, #0]
 8008f02:	b2d1      	uxtb	r1, r2
 8008f04:	f04f 0200 	mov.w	r2, #0
 8008f08:	ea4b 0301 	orr.w	r3, fp, r1
 8008f0c:	ea4c 0402 	orr.w	r4, ip, r2
 8008f10:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[2];
 8008f14:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008f18:	f04f 0b00 	mov.w	fp, #0
 8008f1c:	f04f 0c00 	mov.w	ip, #0
 8008f20:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8008f24:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8008f28:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	3202      	adds	r2, #2
 8008f30:	7812      	ldrb	r2, [r2, #0]
 8008f32:	b2d1      	uxtb	r1, r2
 8008f34:	f04f 0200 	mov.w	r2, #0
 8008f38:	ea4b 0301 	orr.w	r3, fp, r1
 8008f3c:	ea4c 0402 	orr.w	r4, ip, r2
 8008f40:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[1];
 8008f44:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008f48:	f04f 0b00 	mov.w	fp, #0
 8008f4c:	f04f 0c00 	mov.w	ip, #0
 8008f50:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8008f54:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8008f58:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	3201      	adds	r2, #1
 8008f60:	7812      	ldrb	r2, [r2, #0]
 8008f62:	b2d1      	uxtb	r1, r2
 8008f64:	f04f 0200 	mov.w	r2, #0
 8008f68:	ea4b 0301 	orr.w	r3, fp, r1
 8008f6c:	ea4c 0402 	orr.w	r4, ip, r2
 8008f70:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[0];
 8008f74:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008f78:	f04f 0b00 	mov.w	fp, #0
 8008f7c:	f04f 0c00 	mov.w	ip, #0
 8008f80:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8008f84:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8008f88:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	7812      	ldrb	r2, [r2, #0]
 8008f90:	b2d1      	uxtb	r1, r2
 8008f92:	f04f 0200 	mov.w	r2, #0
 8008f96:	ea4b 0301 	orr.w	r3, fp, r1
 8008f9a:	ea4c 0402 	orr.w	r4, ip, r2
 8008f9e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return rv;
 8008fa2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	4621      	mov	r1, r4
 8008faa:	3714      	adds	r7, #20
 8008fac:	46bd      	mov	sp, r7
 8008fae:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8008fb2:	4770      	bx	lr

08008fb4 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	1c5a      	adds	r2, r3, #1
 8008fc4:	607a      	str	r2, [r7, #4]
 8008fc6:	887a      	ldrh	r2, [r7, #2]
 8008fc8:	b2d2      	uxtb	r2, r2
 8008fca:	701a      	strb	r2, [r3, #0]
 8008fcc:	887b      	ldrh	r3, [r7, #2]
 8008fce:	0a1b      	lsrs	r3, r3, #8
 8008fd0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	1c5a      	adds	r2, r3, #1
 8008fd6:	607a      	str	r2, [r7, #4]
 8008fd8:	887a      	ldrh	r2, [r7, #2]
 8008fda:	b2d2      	uxtb	r2, r2
 8008fdc:	701a      	strb	r2, [r3, #0]
}
 8008fde:	bf00      	nop
 8008fe0:	370c      	adds	r7, #12
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr

08008fea <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008fea:	b480      	push	{r7}
 8008fec:	b083      	sub	sp, #12
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
 8008ff2:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	1c5a      	adds	r2, r3, #1
 8008ff8:	607a      	str	r2, [r7, #4]
 8008ffa:	683a      	ldr	r2, [r7, #0]
 8008ffc:	b2d2      	uxtb	r2, r2
 8008ffe:	701a      	strb	r2, [r3, #0]
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	0a1b      	lsrs	r3, r3, #8
 8009004:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	1c5a      	adds	r2, r3, #1
 800900a:	607a      	str	r2, [r7, #4]
 800900c:	683a      	ldr	r2, [r7, #0]
 800900e:	b2d2      	uxtb	r2, r2
 8009010:	701a      	strb	r2, [r3, #0]
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	0a1b      	lsrs	r3, r3, #8
 8009016:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	1c5a      	adds	r2, r3, #1
 800901c:	607a      	str	r2, [r7, #4]
 800901e:	683a      	ldr	r2, [r7, #0]
 8009020:	b2d2      	uxtb	r2, r2
 8009022:	701a      	strb	r2, [r3, #0]
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	0a1b      	lsrs	r3, r3, #8
 8009028:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	1c5a      	adds	r2, r3, #1
 800902e:	607a      	str	r2, [r7, #4]
 8009030:	683a      	ldr	r2, [r7, #0]
 8009032:	b2d2      	uxtb	r2, r2
 8009034:	701a      	strb	r2, [r3, #0]
}
 8009036:	bf00      	nop
 8009038:	370c      	adds	r7, #12
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr

08009042 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8009042:	b490      	push	{r4, r7}
 8009044:	b084      	sub	sp, #16
 8009046:	af00      	add	r7, sp, #0
 8009048:	60f8      	str	r0, [r7, #12]
 800904a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	1c5a      	adds	r2, r3, #1
 8009052:	60fa      	str	r2, [r7, #12]
 8009054:	783a      	ldrb	r2, [r7, #0]
 8009056:	701a      	strb	r2, [r3, #0]
 8009058:	e9d7 1200 	ldrd	r1, r2, [r7]
 800905c:	f04f 0300 	mov.w	r3, #0
 8009060:	f04f 0400 	mov.w	r4, #0
 8009064:	0a0b      	lsrs	r3, r1, #8
 8009066:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800906a:	0a14      	lsrs	r4, r2, #8
 800906c:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	1c5a      	adds	r2, r3, #1
 8009074:	60fa      	str	r2, [r7, #12]
 8009076:	783a      	ldrb	r2, [r7, #0]
 8009078:	701a      	strb	r2, [r3, #0]
 800907a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800907e:	f04f 0300 	mov.w	r3, #0
 8009082:	f04f 0400 	mov.w	r4, #0
 8009086:	0a0b      	lsrs	r3, r1, #8
 8009088:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800908c:	0a14      	lsrs	r4, r2, #8
 800908e:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	1c5a      	adds	r2, r3, #1
 8009096:	60fa      	str	r2, [r7, #12]
 8009098:	783a      	ldrb	r2, [r7, #0]
 800909a:	701a      	strb	r2, [r3, #0]
 800909c:	e9d7 1200 	ldrd	r1, r2, [r7]
 80090a0:	f04f 0300 	mov.w	r3, #0
 80090a4:	f04f 0400 	mov.w	r4, #0
 80090a8:	0a0b      	lsrs	r3, r1, #8
 80090aa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80090ae:	0a14      	lsrs	r4, r2, #8
 80090b0:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	1c5a      	adds	r2, r3, #1
 80090b8:	60fa      	str	r2, [r7, #12]
 80090ba:	783a      	ldrb	r2, [r7, #0]
 80090bc:	701a      	strb	r2, [r3, #0]
 80090be:	e9d7 1200 	ldrd	r1, r2, [r7]
 80090c2:	f04f 0300 	mov.w	r3, #0
 80090c6:	f04f 0400 	mov.w	r4, #0
 80090ca:	0a0b      	lsrs	r3, r1, #8
 80090cc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80090d0:	0a14      	lsrs	r4, r2, #8
 80090d2:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	1c5a      	adds	r2, r3, #1
 80090da:	60fa      	str	r2, [r7, #12]
 80090dc:	783a      	ldrb	r2, [r7, #0]
 80090de:	701a      	strb	r2, [r3, #0]
 80090e0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80090e4:	f04f 0300 	mov.w	r3, #0
 80090e8:	f04f 0400 	mov.w	r4, #0
 80090ec:	0a0b      	lsrs	r3, r1, #8
 80090ee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80090f2:	0a14      	lsrs	r4, r2, #8
 80090f4:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	1c5a      	adds	r2, r3, #1
 80090fc:	60fa      	str	r2, [r7, #12]
 80090fe:	783a      	ldrb	r2, [r7, #0]
 8009100:	701a      	strb	r2, [r3, #0]
 8009102:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009106:	f04f 0300 	mov.w	r3, #0
 800910a:	f04f 0400 	mov.w	r4, #0
 800910e:	0a0b      	lsrs	r3, r1, #8
 8009110:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009114:	0a14      	lsrs	r4, r2, #8
 8009116:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	1c5a      	adds	r2, r3, #1
 800911e:	60fa      	str	r2, [r7, #12]
 8009120:	783a      	ldrb	r2, [r7, #0]
 8009122:	701a      	strb	r2, [r3, #0]
 8009124:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009128:	f04f 0300 	mov.w	r3, #0
 800912c:	f04f 0400 	mov.w	r4, #0
 8009130:	0a0b      	lsrs	r3, r1, #8
 8009132:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009136:	0a14      	lsrs	r4, r2, #8
 8009138:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	1c5a      	adds	r2, r3, #1
 8009140:	60fa      	str	r2, [r7, #12]
 8009142:	783a      	ldrb	r2, [r7, #0]
 8009144:	701a      	strb	r2, [r3, #0]
}
 8009146:	bf00      	nop
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bc90      	pop	{r4, r7}
 800914e:	4770      	bx	lr

08009150 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009150:	b480      	push	{r7}
 8009152:	b087      	sub	sp, #28
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00d      	beq.n	8009186 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800916a:	693a      	ldr	r2, [r7, #16]
 800916c:	1c53      	adds	r3, r2, #1
 800916e:	613b      	str	r3, [r7, #16]
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	1c59      	adds	r1, r3, #1
 8009174:	6179      	str	r1, [r7, #20]
 8009176:	7812      	ldrb	r2, [r2, #0]
 8009178:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	3b01      	subs	r3, #1
 800917e:	607b      	str	r3, [r7, #4]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d1f1      	bne.n	800916a <mem_cpy+0x1a>
	}
}
 8009186:	bf00      	nop
 8009188:	371c      	adds	r7, #28
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr

08009192 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009192:	b480      	push	{r7}
 8009194:	b087      	sub	sp, #28
 8009196:	af00      	add	r7, sp, #0
 8009198:	60f8      	str	r0, [r7, #12]
 800919a:	60b9      	str	r1, [r7, #8]
 800919c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	1c5a      	adds	r2, r3, #1
 80091a6:	617a      	str	r2, [r7, #20]
 80091a8:	68ba      	ldr	r2, [r7, #8]
 80091aa:	b2d2      	uxtb	r2, r2
 80091ac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	3b01      	subs	r3, #1
 80091b2:	607b      	str	r3, [r7, #4]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d1f3      	bne.n	80091a2 <mem_set+0x10>
}
 80091ba:	bf00      	nop
 80091bc:	371c      	adds	r7, #28
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr

080091c6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80091c6:	b480      	push	{r7}
 80091c8:	b089      	sub	sp, #36	; 0x24
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	60f8      	str	r0, [r7, #12]
 80091ce:	60b9      	str	r1, [r7, #8]
 80091d0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	61fb      	str	r3, [r7, #28]
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80091da:	2300      	movs	r3, #0
 80091dc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	1c5a      	adds	r2, r3, #1
 80091e2:	61fa      	str	r2, [r7, #28]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	4619      	mov	r1, r3
 80091e8:	69bb      	ldr	r3, [r7, #24]
 80091ea:	1c5a      	adds	r2, r3, #1
 80091ec:	61ba      	str	r2, [r7, #24]
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	1acb      	subs	r3, r1, r3
 80091f2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	3b01      	subs	r3, #1
 80091f8:	607b      	str	r3, [r7, #4]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d002      	beq.n	8009206 <mem_cmp+0x40>
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d0eb      	beq.n	80091de <mem_cmp+0x18>

	return r;
 8009206:	697b      	ldr	r3, [r7, #20]
}
 8009208:	4618      	mov	r0, r3
 800920a:	3724      	adds	r7, #36	; 0x24
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800921e:	e002      	b.n	8009226 <chk_chr+0x12>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	3301      	adds	r3, #1
 8009224:	607b      	str	r3, [r7, #4]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d005      	beq.n	800923a <chk_chr+0x26>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	461a      	mov	r2, r3
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	4293      	cmp	r3, r2
 8009238:	d1f2      	bne.n	8009220 <chk_chr+0xc>
	return *str;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	781b      	ldrb	r3, [r3, #0]
}
 800923e:	4618      	mov	r0, r3
 8009240:	370c      	adds	r7, #12
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
	...

0800924c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800924c:	b480      	push	{r7}
 800924e:	b085      	sub	sp, #20
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009256:	2300      	movs	r3, #0
 8009258:	60bb      	str	r3, [r7, #8]
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	60fb      	str	r3, [r7, #12]
 800925e:	e029      	b.n	80092b4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009260:	4a27      	ldr	r2, [pc, #156]	; (8009300 <chk_lock+0xb4>)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	011b      	lsls	r3, r3, #4
 8009266:	4413      	add	r3, r2
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d01d      	beq.n	80092aa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800926e:	4a24      	ldr	r2, [pc, #144]	; (8009300 <chk_lock+0xb4>)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	011b      	lsls	r3, r3, #4
 8009274:	4413      	add	r3, r2
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	429a      	cmp	r2, r3
 800927e:	d116      	bne.n	80092ae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009280:	4a1f      	ldr	r2, [pc, #124]	; (8009300 <chk_lock+0xb4>)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	011b      	lsls	r3, r3, #4
 8009286:	4413      	add	r3, r2
 8009288:	3304      	adds	r3, #4
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009290:	429a      	cmp	r2, r3
 8009292:	d10c      	bne.n	80092ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009294:	4a1a      	ldr	r2, [pc, #104]	; (8009300 <chk_lock+0xb4>)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	011b      	lsls	r3, r3, #4
 800929a:	4413      	add	r3, r2
 800929c:	3308      	adds	r3, #8
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d102      	bne.n	80092ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80092a8:	e007      	b.n	80092ba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80092aa:	2301      	movs	r3, #1
 80092ac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	3301      	adds	r3, #1
 80092b2:	60fb      	str	r3, [r7, #12]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d9d2      	bls.n	8009260 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2b02      	cmp	r3, #2
 80092be:	d109      	bne.n	80092d4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d102      	bne.n	80092cc <chk_lock+0x80>
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	2b02      	cmp	r3, #2
 80092ca:	d101      	bne.n	80092d0 <chk_lock+0x84>
 80092cc:	2300      	movs	r3, #0
 80092ce:	e010      	b.n	80092f2 <chk_lock+0xa6>
 80092d0:	2312      	movs	r3, #18
 80092d2:	e00e      	b.n	80092f2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d108      	bne.n	80092ec <chk_lock+0xa0>
 80092da:	4a09      	ldr	r2, [pc, #36]	; (8009300 <chk_lock+0xb4>)
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	011b      	lsls	r3, r3, #4
 80092e0:	4413      	add	r3, r2
 80092e2:	330c      	adds	r3, #12
 80092e4:	881b      	ldrh	r3, [r3, #0]
 80092e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092ea:	d101      	bne.n	80092f0 <chk_lock+0xa4>
 80092ec:	2310      	movs	r3, #16
 80092ee:	e000      	b.n	80092f2 <chk_lock+0xa6>
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3714      	adds	r7, #20
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr
 80092fe:	bf00      	nop
 8009300:	200000c4 	.word	0x200000c4

08009304 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800930a:	2300      	movs	r3, #0
 800930c:	607b      	str	r3, [r7, #4]
 800930e:	e002      	b.n	8009316 <enq_lock+0x12>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	3301      	adds	r3, #1
 8009314:	607b      	str	r3, [r7, #4]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2b01      	cmp	r3, #1
 800931a:	d806      	bhi.n	800932a <enq_lock+0x26>
 800931c:	4a09      	ldr	r2, [pc, #36]	; (8009344 <enq_lock+0x40>)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	011b      	lsls	r3, r3, #4
 8009322:	4413      	add	r3, r2
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d1f2      	bne.n	8009310 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2b02      	cmp	r3, #2
 800932e:	bf14      	ite	ne
 8009330:	2301      	movne	r3, #1
 8009332:	2300      	moveq	r3, #0
 8009334:	b2db      	uxtb	r3, r3
}
 8009336:	4618      	mov	r0, r3
 8009338:	370c      	adds	r7, #12
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop
 8009344:	200000c4 	.word	0x200000c4

08009348 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009348:	b480      	push	{r7}
 800934a:	b085      	sub	sp, #20
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009352:	2300      	movs	r3, #0
 8009354:	60fb      	str	r3, [r7, #12]
 8009356:	e01f      	b.n	8009398 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009358:	4a41      	ldr	r2, [pc, #260]	; (8009460 <inc_lock+0x118>)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	011b      	lsls	r3, r3, #4
 800935e:	4413      	add	r3, r2
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	429a      	cmp	r2, r3
 8009368:	d113      	bne.n	8009392 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800936a:	4a3d      	ldr	r2, [pc, #244]	; (8009460 <inc_lock+0x118>)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	011b      	lsls	r3, r3, #4
 8009370:	4413      	add	r3, r2
 8009372:	3304      	adds	r3, #4
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800937a:	429a      	cmp	r2, r3
 800937c:	d109      	bne.n	8009392 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800937e:	4a38      	ldr	r2, [pc, #224]	; (8009460 <inc_lock+0x118>)
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	011b      	lsls	r3, r3, #4
 8009384:	4413      	add	r3, r2
 8009386:	3308      	adds	r3, #8
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800938e:	429a      	cmp	r2, r3
 8009390:	d006      	beq.n	80093a0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	3301      	adds	r3, #1
 8009396:	60fb      	str	r3, [r7, #12]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2b01      	cmp	r3, #1
 800939c:	d9dc      	bls.n	8009358 <inc_lock+0x10>
 800939e:	e000      	b.n	80093a2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80093a0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2b02      	cmp	r3, #2
 80093a6:	d132      	bne.n	800940e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80093a8:	2300      	movs	r3, #0
 80093aa:	60fb      	str	r3, [r7, #12]
 80093ac:	e002      	b.n	80093b4 <inc_lock+0x6c>
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	3301      	adds	r3, #1
 80093b2:	60fb      	str	r3, [r7, #12]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d806      	bhi.n	80093c8 <inc_lock+0x80>
 80093ba:	4a29      	ldr	r2, [pc, #164]	; (8009460 <inc_lock+0x118>)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	011b      	lsls	r3, r3, #4
 80093c0:	4413      	add	r3, r2
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1f2      	bne.n	80093ae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d101      	bne.n	80093d2 <inc_lock+0x8a>
 80093ce:	2300      	movs	r3, #0
 80093d0:	e040      	b.n	8009454 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	4922      	ldr	r1, [pc, #136]	; (8009460 <inc_lock+0x118>)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	011b      	lsls	r3, r3, #4
 80093dc:	440b      	add	r3, r1
 80093de:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	689a      	ldr	r2, [r3, #8]
 80093e4:	491e      	ldr	r1, [pc, #120]	; (8009460 <inc_lock+0x118>)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	011b      	lsls	r3, r3, #4
 80093ea:	440b      	add	r3, r1
 80093ec:	3304      	adds	r3, #4
 80093ee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093f4:	491a      	ldr	r1, [pc, #104]	; (8009460 <inc_lock+0x118>)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	011b      	lsls	r3, r3, #4
 80093fa:	440b      	add	r3, r1
 80093fc:	3308      	adds	r3, #8
 80093fe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009400:	4a17      	ldr	r2, [pc, #92]	; (8009460 <inc_lock+0x118>)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	011b      	lsls	r3, r3, #4
 8009406:	4413      	add	r3, r2
 8009408:	330c      	adds	r3, #12
 800940a:	2200      	movs	r2, #0
 800940c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d009      	beq.n	8009428 <inc_lock+0xe0>
 8009414:	4a12      	ldr	r2, [pc, #72]	; (8009460 <inc_lock+0x118>)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	011b      	lsls	r3, r3, #4
 800941a:	4413      	add	r3, r2
 800941c:	330c      	adds	r3, #12
 800941e:	881b      	ldrh	r3, [r3, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d001      	beq.n	8009428 <inc_lock+0xe0>
 8009424:	2300      	movs	r3, #0
 8009426:	e015      	b.n	8009454 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d108      	bne.n	8009440 <inc_lock+0xf8>
 800942e:	4a0c      	ldr	r2, [pc, #48]	; (8009460 <inc_lock+0x118>)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	011b      	lsls	r3, r3, #4
 8009434:	4413      	add	r3, r2
 8009436:	330c      	adds	r3, #12
 8009438:	881b      	ldrh	r3, [r3, #0]
 800943a:	3301      	adds	r3, #1
 800943c:	b29a      	uxth	r2, r3
 800943e:	e001      	b.n	8009444 <inc_lock+0xfc>
 8009440:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009444:	4906      	ldr	r1, [pc, #24]	; (8009460 <inc_lock+0x118>)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	011b      	lsls	r3, r3, #4
 800944a:	440b      	add	r3, r1
 800944c:	330c      	adds	r3, #12
 800944e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	3301      	adds	r3, #1
}
 8009454:	4618      	mov	r0, r3
 8009456:	3714      	adds	r7, #20
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr
 8009460:	200000c4 	.word	0x200000c4

08009464 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	3b01      	subs	r3, #1
 8009470:	607b      	str	r3, [r7, #4]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2b01      	cmp	r3, #1
 8009476:	d825      	bhi.n	80094c4 <dec_lock+0x60>
		n = Files[i].ctr;
 8009478:	4a17      	ldr	r2, [pc, #92]	; (80094d8 <dec_lock+0x74>)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	011b      	lsls	r3, r3, #4
 800947e:	4413      	add	r3, r2
 8009480:	330c      	adds	r3, #12
 8009482:	881b      	ldrh	r3, [r3, #0]
 8009484:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009486:	89fb      	ldrh	r3, [r7, #14]
 8009488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800948c:	d101      	bne.n	8009492 <dec_lock+0x2e>
 800948e:	2300      	movs	r3, #0
 8009490:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009492:	89fb      	ldrh	r3, [r7, #14]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d002      	beq.n	800949e <dec_lock+0x3a>
 8009498:	89fb      	ldrh	r3, [r7, #14]
 800949a:	3b01      	subs	r3, #1
 800949c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800949e:	4a0e      	ldr	r2, [pc, #56]	; (80094d8 <dec_lock+0x74>)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	011b      	lsls	r3, r3, #4
 80094a4:	4413      	add	r3, r2
 80094a6:	330c      	adds	r3, #12
 80094a8:	89fa      	ldrh	r2, [r7, #14]
 80094aa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80094ac:	89fb      	ldrh	r3, [r7, #14]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d105      	bne.n	80094be <dec_lock+0x5a>
 80094b2:	4a09      	ldr	r2, [pc, #36]	; (80094d8 <dec_lock+0x74>)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	011b      	lsls	r3, r3, #4
 80094b8:	4413      	add	r3, r2
 80094ba:	2200      	movs	r2, #0
 80094bc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80094be:	2300      	movs	r3, #0
 80094c0:	737b      	strb	r3, [r7, #13]
 80094c2:	e001      	b.n	80094c8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80094c4:	2302      	movs	r3, #2
 80094c6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80094c8:	7b7b      	ldrb	r3, [r7, #13]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3714      	adds	r7, #20
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr
 80094d6:	bf00      	nop
 80094d8:	200000c4 	.word	0x200000c4

080094dc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80094dc:	b480      	push	{r7}
 80094de:	b085      	sub	sp, #20
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80094e4:	2300      	movs	r3, #0
 80094e6:	60fb      	str	r3, [r7, #12]
 80094e8:	e010      	b.n	800950c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80094ea:	4a0d      	ldr	r2, [pc, #52]	; (8009520 <clear_lock+0x44>)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	011b      	lsls	r3, r3, #4
 80094f0:	4413      	add	r3, r2
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d105      	bne.n	8009506 <clear_lock+0x2a>
 80094fa:	4a09      	ldr	r2, [pc, #36]	; (8009520 <clear_lock+0x44>)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	011b      	lsls	r3, r3, #4
 8009500:	4413      	add	r3, r2
 8009502:	2200      	movs	r2, #0
 8009504:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	3301      	adds	r3, #1
 800950a:	60fb      	str	r3, [r7, #12]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2b01      	cmp	r3, #1
 8009510:	d9eb      	bls.n	80094ea <clear_lock+0xe>
	}
}
 8009512:	bf00      	nop
 8009514:	3714      	adds	r7, #20
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	200000c4 	.word	0x200000c4

08009524 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b086      	sub	sp, #24
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800952c:	2300      	movs	r3, #0
 800952e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	78db      	ldrb	r3, [r3, #3]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d034      	beq.n	80095a2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	7858      	ldrb	r0, [r3, #1]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009548:	2301      	movs	r3, #1
 800954a:	697a      	ldr	r2, [r7, #20]
 800954c:	f7ff fbfc 	bl	8008d48 <disk_write>
 8009550:	4603      	mov	r3, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	d002      	beq.n	800955c <sync_window+0x38>
			res = FR_DISK_ERR;
 8009556:	2301      	movs	r3, #1
 8009558:	73fb      	strb	r3, [r7, #15]
 800955a:	e022      	b.n	80095a2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009566:	697a      	ldr	r2, [r7, #20]
 8009568:	1ad2      	subs	r2, r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800956e:	429a      	cmp	r2, r3
 8009570:	d217      	bcs.n	80095a2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	789b      	ldrb	r3, [r3, #2]
 8009576:	613b      	str	r3, [r7, #16]
 8009578:	e010      	b.n	800959c <sync_window+0x78>
					wsect += fs->fsize;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957e:	697a      	ldr	r2, [r7, #20]
 8009580:	4413      	add	r3, r2
 8009582:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	7858      	ldrb	r0, [r3, #1]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800958e:	2301      	movs	r3, #1
 8009590:	697a      	ldr	r2, [r7, #20]
 8009592:	f7ff fbd9 	bl	8008d48 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	3b01      	subs	r3, #1
 800959a:	613b      	str	r3, [r7, #16]
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d8eb      	bhi.n	800957a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80095a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3718      	adds	r7, #24
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80095b6:	2300      	movs	r3, #0
 80095b8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095be:	683a      	ldr	r2, [r7, #0]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d01b      	beq.n	80095fc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f7ff ffad 	bl	8009524 <sync_window>
 80095ca:	4603      	mov	r3, r0
 80095cc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80095ce:	7bfb      	ldrb	r3, [r7, #15]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d113      	bne.n	80095fc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	7858      	ldrb	r0, [r3, #1]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80095de:	2301      	movs	r3, #1
 80095e0:	683a      	ldr	r2, [r7, #0]
 80095e2:	f7ff fb91 	bl	8008d08 <disk_read>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d004      	beq.n	80095f6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80095ec:	f04f 33ff 	mov.w	r3, #4294967295
 80095f0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	683a      	ldr	r2, [r7, #0]
 80095fa:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 80095fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
	...

08009608 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f7ff ff87 	bl	8009524 <sync_window>
 8009616:	4603      	mov	r3, r0
 8009618:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800961a:	7bfb      	ldrb	r3, [r7, #15]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d159      	bne.n	80096d4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	2b03      	cmp	r3, #3
 8009626:	d149      	bne.n	80096bc <sync_fs+0xb4>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	791b      	ldrb	r3, [r3, #4]
 800962c:	2b01      	cmp	r3, #1
 800962e:	d145      	bne.n	80096bc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	899b      	ldrh	r3, [r3, #12]
 800963a:	461a      	mov	r2, r3
 800963c:	2100      	movs	r1, #0
 800963e:	f7ff fda8 	bl	8009192 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	333c      	adds	r3, #60	; 0x3c
 8009646:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800964a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800964e:	4618      	mov	r0, r3
 8009650:	f7ff fcb0 	bl	8008fb4 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	333c      	adds	r3, #60	; 0x3c
 8009658:	4921      	ldr	r1, [pc, #132]	; (80096e0 <sync_fs+0xd8>)
 800965a:	4618      	mov	r0, r3
 800965c:	f7ff fcc5 	bl	8008fea <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	333c      	adds	r3, #60	; 0x3c
 8009664:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009668:	491e      	ldr	r1, [pc, #120]	; (80096e4 <sync_fs+0xdc>)
 800966a:	4618      	mov	r0, r3
 800966c:	f7ff fcbd 	bl	8008fea <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	333c      	adds	r3, #60	; 0x3c
 8009674:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	69db      	ldr	r3, [r3, #28]
 800967c:	4619      	mov	r1, r3
 800967e:	4610      	mov	r0, r2
 8009680:	f7ff fcb3 	bl	8008fea <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	333c      	adds	r3, #60	; 0x3c
 8009688:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	699b      	ldr	r3, [r3, #24]
 8009690:	4619      	mov	r1, r3
 8009692:	4610      	mov	r0, r2
 8009694:	f7ff fca9 	bl	8008fea <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800969c:	1c5a      	adds	r2, r3, #1
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	7858      	ldrb	r0, [r3, #1]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096b0:	2301      	movs	r3, #1
 80096b2:	f7ff fb49 	bl	8008d48 <disk_write>
			fs->fsi_flag = 0;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	785b      	ldrb	r3, [r3, #1]
 80096c0:	2200      	movs	r2, #0
 80096c2:	2100      	movs	r1, #0
 80096c4:	4618      	mov	r0, r3
 80096c6:	f7ff fb5f 	bl	8008d88 <disk_ioctl>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d001      	beq.n	80096d4 <sync_fs+0xcc>
 80096d0:	2301      	movs	r3, #1
 80096d2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80096d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	41615252 	.word	0x41615252
 80096e4:	61417272 	.word	0x61417272

080096e8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	3b02      	subs	r3, #2
 80096f6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6a1b      	ldr	r3, [r3, #32]
 80096fc:	3b02      	subs	r3, #2
 80096fe:	683a      	ldr	r2, [r7, #0]
 8009700:	429a      	cmp	r2, r3
 8009702:	d301      	bcc.n	8009708 <clust2sect+0x20>
 8009704:	2300      	movs	r3, #0
 8009706:	e008      	b.n	800971a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	895b      	ldrh	r3, [r3, #10]
 800970c:	461a      	mov	r2, r3
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	fb03 f202 	mul.w	r2, r3, r2
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009718:	4413      	add	r3, r2
}
 800971a:	4618      	mov	r0, r3
 800971c:	370c      	adds	r7, #12
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr
	...

08009728 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009728:	b590      	push	{r4, r7, lr}
 800972a:	b089      	sub	sp, #36	; 0x24
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	2b01      	cmp	r3, #1
 800973c:	d904      	bls.n	8009748 <get_fat+0x20>
 800973e:	69bb      	ldr	r3, [r7, #24]
 8009740:	6a1b      	ldr	r3, [r3, #32]
 8009742:	683a      	ldr	r2, [r7, #0]
 8009744:	429a      	cmp	r2, r3
 8009746:	d302      	bcc.n	800974e <get_fat+0x26>
		val = 1;	/* Internal error */
 8009748:	2301      	movs	r3, #1
 800974a:	61fb      	str	r3, [r7, #28]
 800974c:	e13a      	b.n	80099c4 <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800974e:	f04f 33ff 	mov.w	r3, #4294967295
 8009752:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	3b01      	subs	r3, #1
 800975a:	2b03      	cmp	r3, #3
 800975c:	f200 8126 	bhi.w	80099ac <get_fat+0x284>
 8009760:	a201      	add	r2, pc, #4	; (adr r2, 8009768 <get_fat+0x40>)
 8009762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009766:	bf00      	nop
 8009768:	08009779 	.word	0x08009779
 800976c:	08009827 	.word	0x08009827
 8009770:	08009873 	.word	0x08009873
 8009774:	080098c3 	.word	0x080098c3
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	60fb      	str	r3, [r7, #12]
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	085b      	lsrs	r3, r3, #1
 8009780:	68fa      	ldr	r2, [r7, #12]
 8009782:	4413      	add	r3, r2
 8009784:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009786:	69bb      	ldr	r3, [r7, #24]
 8009788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800978a:	69bb      	ldr	r3, [r7, #24]
 800978c:	899b      	ldrh	r3, [r3, #12]
 800978e:	4619      	mov	r1, r3
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	fbb3 f3f1 	udiv	r3, r3, r1
 8009796:	4413      	add	r3, r2
 8009798:	4619      	mov	r1, r3
 800979a:	69b8      	ldr	r0, [r7, #24]
 800979c:	f7ff ff06 	bl	80095ac <move_window>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	f040 8105 	bne.w	80099b2 <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	1c5a      	adds	r2, r3, #1
 80097ac:	60fa      	str	r2, [r7, #12]
 80097ae:	69ba      	ldr	r2, [r7, #24]
 80097b0:	8992      	ldrh	r2, [r2, #12]
 80097b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80097b6:	fb02 f201 	mul.w	r2, r2, r1
 80097ba:	1a9b      	subs	r3, r3, r2
 80097bc:	69ba      	ldr	r2, [r7, #24]
 80097be:	4413      	add	r3, r2
 80097c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097c4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80097c6:	69bb      	ldr	r3, [r7, #24]
 80097c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	899b      	ldrh	r3, [r3, #12]
 80097ce:	4619      	mov	r1, r3
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80097d6:	4413      	add	r3, r2
 80097d8:	4619      	mov	r1, r3
 80097da:	69b8      	ldr	r0, [r7, #24]
 80097dc:	f7ff fee6 	bl	80095ac <move_window>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	f040 80e7 	bne.w	80099b6 <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 80097e8:	69bb      	ldr	r3, [r7, #24]
 80097ea:	899b      	ldrh	r3, [r3, #12]
 80097ec:	461a      	mov	r2, r3
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80097f4:	fb02 f201 	mul.w	r2, r2, r1
 80097f8:	1a9b      	subs	r3, r3, r2
 80097fa:	69ba      	ldr	r2, [r7, #24]
 80097fc:	4413      	add	r3, r2
 80097fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009802:	021b      	lsls	r3, r3, #8
 8009804:	461a      	mov	r2, r3
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	4313      	orrs	r3, r2
 800980a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	f003 0301 	and.w	r3, r3, #1
 8009812:	2b00      	cmp	r3, #0
 8009814:	d002      	beq.n	800981c <get_fat+0xf4>
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	091b      	lsrs	r3, r3, #4
 800981a:	e002      	b.n	8009822 <get_fat+0xfa>
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009822:	61fb      	str	r3, [r7, #28]
			break;
 8009824:	e0ce      	b.n	80099c4 <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009826:	69bb      	ldr	r3, [r7, #24]
 8009828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	899b      	ldrh	r3, [r3, #12]
 800982e:	085b      	lsrs	r3, r3, #1
 8009830:	b29b      	uxth	r3, r3
 8009832:	4619      	mov	r1, r3
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	fbb3 f3f1 	udiv	r3, r3, r1
 800983a:	4413      	add	r3, r2
 800983c:	4619      	mov	r1, r3
 800983e:	69b8      	ldr	r0, [r7, #24]
 8009840:	f7ff feb4 	bl	80095ac <move_window>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	f040 80b7 	bne.w	80099ba <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	005b      	lsls	r3, r3, #1
 8009856:	69ba      	ldr	r2, [r7, #24]
 8009858:	8992      	ldrh	r2, [r2, #12]
 800985a:	fbb3 f0f2 	udiv	r0, r3, r2
 800985e:	fb02 f200 	mul.w	r2, r2, r0
 8009862:	1a9b      	subs	r3, r3, r2
 8009864:	440b      	add	r3, r1
 8009866:	4618      	mov	r0, r3
 8009868:	f7ff faac 	bl	8008dc4 <ld_word>
 800986c:	4603      	mov	r3, r0
 800986e:	61fb      	str	r3, [r7, #28]
			break;
 8009870:	e0a8      	b.n	80099c4 <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	899b      	ldrh	r3, [r3, #12]
 800987a:	089b      	lsrs	r3, r3, #2
 800987c:	b29b      	uxth	r3, r3
 800987e:	4619      	mov	r1, r3
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	fbb3 f3f1 	udiv	r3, r3, r1
 8009886:	4413      	add	r3, r2
 8009888:	4619      	mov	r1, r3
 800988a:	69b8      	ldr	r0, [r7, #24]
 800988c:	f7ff fe8e 	bl	80095ac <move_window>
 8009890:	4603      	mov	r3, r0
 8009892:	2b00      	cmp	r3, #0
 8009894:	f040 8093 	bne.w	80099be <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	69ba      	ldr	r2, [r7, #24]
 80098a4:	8992      	ldrh	r2, [r2, #12]
 80098a6:	fbb3 f0f2 	udiv	r0, r3, r2
 80098aa:	fb02 f200 	mul.w	r2, r2, r0
 80098ae:	1a9b      	subs	r3, r3, r2
 80098b0:	440b      	add	r3, r1
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7ff fa9e 	bl	8008df4 <ld_dword>
 80098b8:	4603      	mov	r3, r0
 80098ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80098be:	61fb      	str	r3, [r7, #28]
			break;
 80098c0:	e080      	b.n	80099c4 <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80098c8:	4323      	orrs	r3, r4
 80098ca:	d06f      	beq.n	80099ac <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	683a      	ldr	r2, [r7, #0]
 80098d2:	1ad3      	subs	r3, r2, r3
 80098d4:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80098dc:	f113 30ff 	adds.w	r0, r3, #4294967295
 80098e0:	f144 31ff 	adc.w	r1, r4, #4294967295
 80098e4:	69bb      	ldr	r3, [r7, #24]
 80098e6:	899b      	ldrh	r3, [r3, #12]
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	f04f 0400 	mov.w	r4, #0
 80098ee:	461a      	mov	r2, r3
 80098f0:	4623      	mov	r3, r4
 80098f2:	f7f7 f8cb 	bl	8000a8c <__aeabi_uldivmod>
 80098f6:	4603      	mov	r3, r0
 80098f8:	460c      	mov	r4, r1
 80098fa:	461a      	mov	r2, r3
 80098fc:	69bb      	ldr	r3, [r7, #24]
 80098fe:	895b      	ldrh	r3, [r3, #10]
 8009900:	fbb2 f3f3 	udiv	r3, r2, r3
 8009904:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	79db      	ldrb	r3, [r3, #7]
 800990a:	2b02      	cmp	r3, #2
 800990c:	d10e      	bne.n	800992c <get_fat+0x204>
					if (cofs <= clen) {
 800990e:	697a      	ldr	r2, [r7, #20]
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	429a      	cmp	r2, r3
 8009914:	d80a      	bhi.n	800992c <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8009916:	697a      	ldr	r2, [r7, #20]
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	429a      	cmp	r2, r3
 800991c:	d002      	beq.n	8009924 <get_fat+0x1fc>
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	3301      	adds	r3, #1
 8009922:	e001      	b.n	8009928 <get_fat+0x200>
 8009924:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009928:	61fb      	str	r3, [r7, #28]
						break;
 800992a:	e04b      	b.n	80099c4 <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	79db      	ldrb	r3, [r3, #7]
 8009930:	2b03      	cmp	r3, #3
 8009932:	d108      	bne.n	8009946 <get_fat+0x21e>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	699b      	ldr	r3, [r3, #24]
 8009938:	697a      	ldr	r2, [r7, #20]
 800993a:	429a      	cmp	r2, r3
 800993c:	d203      	bcs.n	8009946 <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	3301      	adds	r3, #1
 8009942:	61fb      	str	r3, [r7, #28]
					break;
 8009944:	e03e      	b.n	80099c4 <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	79db      	ldrb	r3, [r3, #7]
 800994a:	2b02      	cmp	r3, #2
 800994c:	d02e      	beq.n	80099ac <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	69db      	ldr	r3, [r3, #28]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d003      	beq.n	800995e <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8009956:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800995a:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800995c:	e032      	b.n	80099c4 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	899b      	ldrh	r3, [r3, #12]
 8009966:	089b      	lsrs	r3, r3, #2
 8009968:	b29b      	uxth	r3, r3
 800996a:	4619      	mov	r1, r3
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009972:	4413      	add	r3, r2
 8009974:	4619      	mov	r1, r3
 8009976:	69b8      	ldr	r0, [r7, #24]
 8009978:	f7ff fe18 	bl	80095ac <move_window>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d11f      	bne.n	80099c2 <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8009982:	69bb      	ldr	r3, [r7, #24]
 8009984:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	69ba      	ldr	r2, [r7, #24]
 800998e:	8992      	ldrh	r2, [r2, #12]
 8009990:	fbb3 f0f2 	udiv	r0, r3, r2
 8009994:	fb02 f200 	mul.w	r2, r2, r0
 8009998:	1a9b      	subs	r3, r3, r2
 800999a:	440b      	add	r3, r1
 800999c:	4618      	mov	r0, r3
 800999e:	f7ff fa29 	bl	8008df4 <ld_dword>
 80099a2:	4603      	mov	r3, r0
 80099a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80099a8:	61fb      	str	r3, [r7, #28]
					break;
 80099aa:	e00b      	b.n	80099c4 <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80099ac:	2301      	movs	r3, #1
 80099ae:	61fb      	str	r3, [r7, #28]
 80099b0:	e008      	b.n	80099c4 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80099b2:	bf00      	nop
 80099b4:	e006      	b.n	80099c4 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80099b6:	bf00      	nop
 80099b8:	e004      	b.n	80099c4 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80099ba:	bf00      	nop
 80099bc:	e002      	b.n	80099c4 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80099be:	bf00      	nop
 80099c0:	e000      	b.n	80099c4 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80099c2:	bf00      	nop
		}
	}

	return val;
 80099c4:	69fb      	ldr	r3, [r7, #28]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3724      	adds	r7, #36	; 0x24
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd90      	pop	{r4, r7, pc}
 80099ce:	bf00      	nop

080099d0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80099d0:	b590      	push	{r4, r7, lr}
 80099d2:	b089      	sub	sp, #36	; 0x24
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	60f8      	str	r0, [r7, #12]
 80099d8:	60b9      	str	r1, [r7, #8]
 80099da:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80099dc:	2302      	movs	r3, #2
 80099de:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	f240 8111 	bls.w	8009c0a <put_fat+0x23a>
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6a1b      	ldr	r3, [r3, #32]
 80099ec:	68ba      	ldr	r2, [r7, #8]
 80099ee:	429a      	cmp	r2, r3
 80099f0:	f080 810b 	bcs.w	8009c0a <put_fat+0x23a>
		switch (fs->fs_type) {
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	3b01      	subs	r3, #1
 80099fa:	2b03      	cmp	r3, #3
 80099fc:	f200 8105 	bhi.w	8009c0a <put_fat+0x23a>
 8009a00:	a201      	add	r2, pc, #4	; (adr r2, 8009a08 <put_fat+0x38>)
 8009a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a06:	bf00      	nop
 8009a08:	08009a19 	.word	0x08009a19
 8009a0c:	08009b1d 	.word	0x08009b1d
 8009a10:	08009b73 	.word	0x08009b73
 8009a14:	08009b73 	.word	0x08009b73
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	61bb      	str	r3, [r7, #24]
 8009a1c:	69bb      	ldr	r3, [r7, #24]
 8009a1e:	085b      	lsrs	r3, r3, #1
 8009a20:	69ba      	ldr	r2, [r7, #24]
 8009a22:	4413      	add	r3, r2
 8009a24:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	899b      	ldrh	r3, [r3, #12]
 8009a2e:	4619      	mov	r1, r3
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8009a36:	4413      	add	r3, r2
 8009a38:	4619      	mov	r1, r3
 8009a3a:	68f8      	ldr	r0, [r7, #12]
 8009a3c:	f7ff fdb6 	bl	80095ac <move_window>
 8009a40:	4603      	mov	r3, r0
 8009a42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009a44:	7ffb      	ldrb	r3, [r7, #31]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	f040 80d8 	bne.w	8009bfc <put_fat+0x22c>
			p = fs->win + bc++ % SS(fs);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009a52:	69bb      	ldr	r3, [r7, #24]
 8009a54:	1c5a      	adds	r2, r3, #1
 8009a56:	61ba      	str	r2, [r7, #24]
 8009a58:	68fa      	ldr	r2, [r7, #12]
 8009a5a:	8992      	ldrh	r2, [r2, #12]
 8009a5c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009a60:	fb02 f200 	mul.w	r2, r2, r0
 8009a64:	1a9b      	subs	r3, r3, r2
 8009a66:	440b      	add	r3, r1
 8009a68:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	f003 0301 	and.w	r3, r3, #1
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d00d      	beq.n	8009a90 <put_fat+0xc0>
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	b25b      	sxtb	r3, r3
 8009a7a:	f003 030f 	and.w	r3, r3, #15
 8009a7e:	b25a      	sxtb	r2, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	011b      	lsls	r3, r3, #4
 8009a86:	b25b      	sxtb	r3, r3
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	b25b      	sxtb	r3, r3
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	e001      	b.n	8009a94 <put_fat+0xc4>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	697a      	ldr	r2, [r7, #20]
 8009a96:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	899b      	ldrh	r3, [r3, #12]
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	69bb      	ldr	r3, [r7, #24]
 8009aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8009aae:	4413      	add	r3, r2
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	68f8      	ldr	r0, [r7, #12]
 8009ab4:	f7ff fd7a 	bl	80095ac <move_window>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009abc:	7ffb      	ldrb	r3, [r7, #31]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	f040 809e 	bne.w	8009c00 <put_fat+0x230>
			p = fs->win + bc % SS(fs);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	899b      	ldrh	r3, [r3, #12]
 8009ace:	461a      	mov	r2, r3
 8009ad0:	69bb      	ldr	r3, [r7, #24]
 8009ad2:	fbb3 f0f2 	udiv	r0, r3, r2
 8009ad6:	fb02 f200 	mul.w	r2, r2, r0
 8009ada:	1a9b      	subs	r3, r3, r2
 8009adc:	440b      	add	r3, r1
 8009ade:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	f003 0301 	and.w	r3, r3, #1
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d003      	beq.n	8009af2 <put_fat+0x122>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	091b      	lsrs	r3, r3, #4
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	e00e      	b.n	8009b10 <put_fat+0x140>
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	b25b      	sxtb	r3, r3
 8009af8:	f023 030f 	bic.w	r3, r3, #15
 8009afc:	b25a      	sxtb	r2, r3
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	0a1b      	lsrs	r3, r3, #8
 8009b02:	b25b      	sxtb	r3, r3
 8009b04:	f003 030f 	and.w	r3, r3, #15
 8009b08:	b25b      	sxtb	r3, r3
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	b25b      	sxtb	r3, r3
 8009b0e:	b2db      	uxtb	r3, r3
 8009b10:	697a      	ldr	r2, [r7, #20]
 8009b12:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2201      	movs	r2, #1
 8009b18:	70da      	strb	r2, [r3, #3]
			break;
 8009b1a:	e076      	b.n	8009c0a <put_fat+0x23a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	899b      	ldrh	r3, [r3, #12]
 8009b24:	085b      	lsrs	r3, r3, #1
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	4619      	mov	r1, r3
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009b30:	4413      	add	r3, r2
 8009b32:	4619      	mov	r1, r3
 8009b34:	68f8      	ldr	r0, [r7, #12]
 8009b36:	f7ff fd39 	bl	80095ac <move_window>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009b3e:	7ffb      	ldrb	r3, [r7, #31]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d15f      	bne.n	8009c04 <put_fat+0x234>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	005b      	lsls	r3, r3, #1
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	8992      	ldrh	r2, [r2, #12]
 8009b52:	fbb3 f0f2 	udiv	r0, r3, r2
 8009b56:	fb02 f200 	mul.w	r2, r2, r0
 8009b5a:	1a9b      	subs	r3, r3, r2
 8009b5c:	440b      	add	r3, r1
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	b292      	uxth	r2, r2
 8009b62:	4611      	mov	r1, r2
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7ff fa25 	bl	8008fb4 <st_word>
			fs->wflag = 1;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	70da      	strb	r2, [r3, #3]
			break;
 8009b70:	e04b      	b.n	8009c0a <put_fat+0x23a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	899b      	ldrh	r3, [r3, #12]
 8009b7a:	089b      	lsrs	r3, r3, #2
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	4619      	mov	r1, r3
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8009b86:	4413      	add	r3, r2
 8009b88:	4619      	mov	r1, r3
 8009b8a:	68f8      	ldr	r0, [r7, #12]
 8009b8c:	f7ff fd0e 	bl	80095ac <move_window>
 8009b90:	4603      	mov	r3, r0
 8009b92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009b94:	7ffb      	ldrb	r3, [r7, #31]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d136      	bne.n	8009c08 <put_fat+0x238>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	2b04      	cmp	r3, #4
 8009ba0:	d017      	beq.n	8009bd2 <put_fat+0x202>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	68fa      	ldr	r2, [r7, #12]
 8009bb4:	8992      	ldrh	r2, [r2, #12]
 8009bb6:	fbb3 f0f2 	udiv	r0, r3, r2
 8009bba:	fb02 f200 	mul.w	r2, r2, r0
 8009bbe:	1a9b      	subs	r3, r3, r2
 8009bc0:	440b      	add	r3, r1
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7ff f916 	bl	8008df4 <ld_dword>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009bce:	4323      	orrs	r3, r4
 8009bd0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	68fa      	ldr	r2, [r7, #12]
 8009bde:	8992      	ldrh	r2, [r2, #12]
 8009be0:	fbb3 f0f2 	udiv	r0, r3, r2
 8009be4:	fb02 f200 	mul.w	r2, r2, r0
 8009be8:	1a9b      	subs	r3, r3, r2
 8009bea:	440b      	add	r3, r1
 8009bec:	6879      	ldr	r1, [r7, #4]
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7ff f9fb 	bl	8008fea <st_dword>
			fs->wflag = 1;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	70da      	strb	r2, [r3, #3]
			break;
 8009bfa:	e006      	b.n	8009c0a <put_fat+0x23a>
			if (res != FR_OK) break;
 8009bfc:	bf00      	nop
 8009bfe:	e004      	b.n	8009c0a <put_fat+0x23a>
			if (res != FR_OK) break;
 8009c00:	bf00      	nop
 8009c02:	e002      	b.n	8009c0a <put_fat+0x23a>
			if (res != FR_OK) break;
 8009c04:	bf00      	nop
 8009c06:	e000      	b.n	8009c0a <put_fat+0x23a>
			if (res != FR_OK) break;
 8009c08:	bf00      	nop
		}
	}
	return res;
 8009c0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3724      	adds	r7, #36	; 0x24
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd90      	pop	{r4, r7, pc}

08009c14 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b08a      	sub	sp, #40	; 0x28
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	3b02      	subs	r3, #2
 8009c24:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6a1b      	ldr	r3, [r3, #32]
 8009c2a:	3b02      	subs	r3, #2
 8009c2c:	68ba      	ldr	r2, [r7, #8]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d301      	bcc.n	8009c36 <find_bitmap+0x22>
 8009c32:	2300      	movs	r3, #0
 8009c34:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	61fb      	str	r3, [r7, #28]
 8009c3a:	69fb      	ldr	r3, [r7, #28]
 8009c3c:	61bb      	str	r3, [r7, #24]
 8009c3e:	2300      	movs	r3, #0
 8009c40:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	08db      	lsrs	r3, r3, #3
 8009c4a:	68f9      	ldr	r1, [r7, #12]
 8009c4c:	8989      	ldrh	r1, [r1, #12]
 8009c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c52:	4413      	add	r3, r2
 8009c54:	4619      	mov	r1, r3
 8009c56:	68f8      	ldr	r0, [r7, #12]
 8009c58:	f7ff fca8 	bl	80095ac <move_window>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d002      	beq.n	8009c68 <find_bitmap+0x54>
 8009c62:	f04f 33ff 	mov.w	r3, #4294967295
 8009c66:	e058      	b.n	8009d1a <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8009c68:	69fb      	ldr	r3, [r7, #28]
 8009c6a:	08db      	lsrs	r3, r3, #3
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	8992      	ldrh	r2, [r2, #12]
 8009c70:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c74:	fb02 f201 	mul.w	r2, r2, r1
 8009c78:	1a9b      	subs	r3, r3, r2
 8009c7a:	623b      	str	r3, [r7, #32]
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	f003 0307 	and.w	r3, r3, #7
 8009c82:	2201      	movs	r2, #1
 8009c84:	fa02 f303 	lsl.w	r3, r2, r3
 8009c88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	6a3b      	ldr	r3, [r7, #32]
 8009c90:	4413      	add	r3, r2
 8009c92:	333c      	adds	r3, #60	; 0x3c
 8009c94:	781a      	ldrb	r2, [r3, #0]
 8009c96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c9a:	4013      	ands	r3, r2
 8009c9c:	74fb      	strb	r3, [r7, #19]
 8009c9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ca2:	005b      	lsls	r3, r3, #1
 8009ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	3301      	adds	r3, #1
 8009cac:	61fb      	str	r3, [r7, #28]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	6a1b      	ldr	r3, [r3, #32]
 8009cb2:	3b02      	subs	r3, #2
 8009cb4:	69fa      	ldr	r2, [r7, #28]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d307      	bcc.n	8009cca <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 8009cba:	2300      	movs	r3, #0
 8009cbc:	61fb      	str	r3, [r7, #28]
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	899b      	ldrh	r3, [r3, #12]
 8009cc8:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 8009cca:	7cfb      	ldrb	r3, [r7, #19]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d109      	bne.n	8009ce4 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	617b      	str	r3, [r7, #20]
 8009cd6:	697a      	ldr	r2, [r7, #20]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d106      	bne.n	8009cec <find_bitmap+0xd8>
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	3302      	adds	r3, #2
 8009ce2:	e01a      	b.n	8009d1a <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	61bb      	str	r3, [r7, #24]
 8009ce8:	2300      	movs	r3, #0
 8009cea:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8009cec:	69fa      	ldr	r2, [r7, #28]
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d101      	bne.n	8009cf8 <find_bitmap+0xe4>
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	e010      	b.n	8009d1a <find_bitmap+0x106>
			} while (bm);
 8009cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d1c5      	bne.n	8009c8c <find_bitmap+0x78>
			bm = 1;
 8009d00:	2301      	movs	r3, #1
 8009d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 8009d06:	6a3b      	ldr	r3, [r7, #32]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	623b      	str	r3, [r7, #32]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	899b      	ldrh	r3, [r3, #12]
 8009d10:	461a      	mov	r2, r3
 8009d12:	6a3b      	ldr	r3, [r7, #32]
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d3b9      	bcc.n	8009c8c <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8009d18:	e793      	b.n	8009c42 <find_bitmap+0x2e>
	}
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3728      	adds	r7, #40	; 0x28
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b088      	sub	sp, #32
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	60f8      	str	r0, [r7, #12]
 8009d2a:	60b9      	str	r1, [r7, #8]
 8009d2c:	607a      	str	r2, [r7, #4]
 8009d2e:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	3b02      	subs	r3, #2
 8009d34:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	08db      	lsrs	r3, r3, #3
 8009d3e:	68f9      	ldr	r1, [r7, #12]
 8009d40:	8989      	ldrh	r1, [r1, #12]
 8009d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d46:	4413      	add	r3, r2
 8009d48:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	08db      	lsrs	r3, r3, #3
 8009d4e:	68fa      	ldr	r2, [r7, #12]
 8009d50:	8992      	ldrh	r2, [r2, #12]
 8009d52:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d56:	fb02 f201 	mul.w	r2, r2, r1
 8009d5a:	1a9b      	subs	r3, r3, r2
 8009d5c:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	f003 0307 	and.w	r3, r3, #7
 8009d64:	2201      	movs	r2, #1
 8009d66:	fa02 f303 	lsl.w	r3, r2, r3
 8009d6a:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	1c5a      	adds	r2, r3, #1
 8009d70:	617a      	str	r2, [r7, #20]
 8009d72:	4619      	mov	r1, r3
 8009d74:	68f8      	ldr	r0, [r7, #12]
 8009d76:	f7ff fc19 	bl	80095ac <move_window>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d001      	beq.n	8009d84 <change_bitmap+0x62>
 8009d80:	2301      	movs	r3, #1
 8009d82:	e03f      	b.n	8009e04 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8009d84:	68fa      	ldr	r2, [r7, #12]
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	4413      	add	r3, r2
 8009d8a:	333c      	adds	r3, #60	; 0x3c
 8009d8c:	781a      	ldrb	r2, [r3, #0]
 8009d8e:	7ffb      	ldrb	r3, [r7, #31]
 8009d90:	4013      	ands	r3, r2
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	bf14      	ite	ne
 8009d98:	2301      	movne	r3, #1
 8009d9a:	2300      	moveq	r3, #0
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	461a      	mov	r2, r3
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d101      	bne.n	8009daa <change_bitmap+0x88>
 8009da6:	2302      	movs	r3, #2
 8009da8:	e02c      	b.n	8009e04 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 8009daa:	68fa      	ldr	r2, [r7, #12]
 8009dac:	69bb      	ldr	r3, [r7, #24]
 8009dae:	4413      	add	r3, r2
 8009db0:	333c      	adds	r3, #60	; 0x3c
 8009db2:	781a      	ldrb	r2, [r3, #0]
 8009db4:	7ffb      	ldrb	r3, [r7, #31]
 8009db6:	4053      	eors	r3, r2
 8009db8:	b2d9      	uxtb	r1, r3
 8009dba:	68fa      	ldr	r2, [r7, #12]
 8009dbc:	69bb      	ldr	r3, [r7, #24]
 8009dbe:	4413      	add	r3, r2
 8009dc0:	333c      	adds	r3, #60	; 0x3c
 8009dc2:	460a      	mov	r2, r1
 8009dc4:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	3b01      	subs	r3, #1
 8009dd0:	607b      	str	r3, [r7, #4]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d101      	bne.n	8009ddc <change_bitmap+0xba>
 8009dd8:	2300      	movs	r3, #0
 8009dda:	e013      	b.n	8009e04 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 8009ddc:	7ffb      	ldrb	r3, [r7, #31]
 8009dde:	005b      	lsls	r3, r3, #1
 8009de0:	77fb      	strb	r3, [r7, #31]
 8009de2:	7ffb      	ldrb	r3, [r7, #31]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d1cd      	bne.n	8009d84 <change_bitmap+0x62>
			bm = 1;
 8009de8:	2301      	movs	r3, #1
 8009dea:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8009dec:	69bb      	ldr	r3, [r7, #24]
 8009dee:	3301      	adds	r3, #1
 8009df0:	61bb      	str	r3, [r7, #24]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	899b      	ldrh	r3, [r3, #12]
 8009df6:	461a      	mov	r2, r3
 8009df8:	69bb      	ldr	r3, [r7, #24]
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d3c2      	bcc.n	8009d84 <change_bitmap+0x62>
		i = 0;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8009e02:	e7b3      	b.n	8009d6c <change_bitmap+0x4a>
	}
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3720      	adds	r7, #32
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b086      	sub	sp, #24
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	79db      	ldrb	r3, [r3, #7]
 8009e18:	2b03      	cmp	r3, #3
 8009e1a:	d121      	bne.n	8009e60 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	617b      	str	r3, [r7, #20]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	699b      	ldr	r3, [r3, #24]
 8009e26:	613b      	str	r3, [r7, #16]
 8009e28:	e014      	b.n	8009e54 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6818      	ldr	r0, [r3, #0]
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	3301      	adds	r3, #1
 8009e32:	461a      	mov	r2, r3
 8009e34:	6979      	ldr	r1, [r7, #20]
 8009e36:	f7ff fdcb 	bl	80099d0 <put_fat>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8009e3e:	7bfb      	ldrb	r3, [r7, #15]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d001      	beq.n	8009e48 <fill_first_frag+0x3c>
 8009e44:	7bfb      	ldrb	r3, [r7, #15]
 8009e46:	e00c      	b.n	8009e62 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	617b      	str	r3, [r7, #20]
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	3b01      	subs	r3, #1
 8009e52:	613b      	str	r3, [r7, #16]
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d1e7      	bne.n	8009e2a <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8009e60:	2300      	movs	r3, #0
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3718      	adds	r7, #24
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}

08009e6a <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8009e6a:	b580      	push	{r7, lr}
 8009e6c:	b086      	sub	sp, #24
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	60f8      	str	r0, [r7, #12]
 8009e72:	60b9      	str	r1, [r7, #8]
 8009e74:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8009e76:	e020      	b.n	8009eba <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6818      	ldr	r0, [r3, #0]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	69db      	ldr	r3, [r3, #28]
 8009e80:	68ba      	ldr	r2, [r7, #8]
 8009e82:	1ad3      	subs	r3, r2, r3
 8009e84:	1c59      	adds	r1, r3, #1
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	69db      	ldr	r3, [r3, #28]
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d905      	bls.n	8009e9a <fill_last_frag+0x30>
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	69db      	ldr	r3, [r3, #28]
 8009e92:	68ba      	ldr	r2, [r7, #8]
 8009e94:	1ad3      	subs	r3, r2, r3
 8009e96:	3302      	adds	r3, #2
 8009e98:	e000      	b.n	8009e9c <fill_last_frag+0x32>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	f7ff fd97 	bl	80099d0 <put_fat>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8009ea6:	7dfb      	ldrb	r3, [r7, #23]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d001      	beq.n	8009eb0 <fill_last_frag+0x46>
 8009eac:	7dfb      	ldrb	r3, [r7, #23]
 8009eae:	e009      	b.n	8009ec4 <fill_last_frag+0x5a>
		obj->n_frag--;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	69db      	ldr	r3, [r3, #28]
 8009eb4:	1e5a      	subs	r2, r3, #1
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	69db      	ldr	r3, [r3, #28]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d1da      	bne.n	8009e78 <fill_last_frag+0xe>
	}
	return FR_OK;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3718      	adds	r7, #24
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b08a      	sub	sp, #40	; 0x28
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	60f8      	str	r0, [r7, #12]
 8009ed4:	60b9      	str	r1, [r7, #8]
 8009ed6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d904      	bls.n	8009efa <remove_chain+0x2e>
 8009ef0:	69bb      	ldr	r3, [r7, #24]
 8009ef2:	6a1b      	ldr	r3, [r3, #32]
 8009ef4:	68ba      	ldr	r2, [r7, #8]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d301      	bcc.n	8009efe <remove_chain+0x32>
 8009efa:	2302      	movs	r3, #2
 8009efc:	e096      	b.n	800a02c <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d014      	beq.n	8009f2e <remove_chain+0x62>
 8009f04:	69bb      	ldr	r3, [r7, #24]
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	2b04      	cmp	r3, #4
 8009f0a:	d103      	bne.n	8009f14 <remove_chain+0x48>
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	79db      	ldrb	r3, [r3, #7]
 8009f10:	2b02      	cmp	r3, #2
 8009f12:	d00c      	beq.n	8009f2e <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009f14:	f04f 32ff 	mov.w	r2, #4294967295
 8009f18:	6879      	ldr	r1, [r7, #4]
 8009f1a:	69b8      	ldr	r0, [r7, #24]
 8009f1c:	f7ff fd58 	bl	80099d0 <put_fat>
 8009f20:	4603      	mov	r3, r0
 8009f22:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009f24:	7ffb      	ldrb	r3, [r7, #31]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d001      	beq.n	8009f2e <remove_chain+0x62>
 8009f2a:	7ffb      	ldrb	r3, [r7, #31]
 8009f2c:	e07e      	b.n	800a02c <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009f2e:	68b9      	ldr	r1, [r7, #8]
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f7ff fbf9 	bl	8009728 <get_fat>
 8009f36:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d055      	beq.n	8009fea <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d101      	bne.n	8009f48 <remove_chain+0x7c>
 8009f44:	2302      	movs	r3, #2
 8009f46:	e071      	b.n	800a02c <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f4e:	d101      	bne.n	8009f54 <remove_chain+0x88>
 8009f50:	2301      	movs	r3, #1
 8009f52:	e06b      	b.n	800a02c <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	2b04      	cmp	r3, #4
 8009f5a:	d00b      	beq.n	8009f74 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	68b9      	ldr	r1, [r7, #8]
 8009f60:	69b8      	ldr	r0, [r7, #24]
 8009f62:	f7ff fd35 	bl	80099d0 <put_fat>
 8009f66:	4603      	mov	r3, r0
 8009f68:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009f6a:	7ffb      	ldrb	r3, [r7, #31]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d001      	beq.n	8009f74 <remove_chain+0xa8>
 8009f70:	7ffb      	ldrb	r3, [r7, #31]
 8009f72:	e05b      	b.n	800a02c <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	69da      	ldr	r2, [r3, #28]
 8009f78:	69bb      	ldr	r3, [r7, #24]
 8009f7a:	6a1b      	ldr	r3, [r3, #32]
 8009f7c:	3b02      	subs	r3, #2
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d20b      	bcs.n	8009f9a <remove_chain+0xce>
			fs->free_clst++;
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	69db      	ldr	r3, [r3, #28]
 8009f86:	1c5a      	adds	r2, r3, #1
 8009f88:	69bb      	ldr	r3, [r7, #24]
 8009f8a:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8009f8c:	69bb      	ldr	r3, [r7, #24]
 8009f8e:	791b      	ldrb	r3, [r3, #4]
 8009f90:	f043 0301 	orr.w	r3, r3, #1
 8009f94:	b2da      	uxtb	r2, r3
 8009f96:	69bb      	ldr	r3, [r7, #24]
 8009f98:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8009f9a:	6a3b      	ldr	r3, [r7, #32]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	697a      	ldr	r2, [r7, #20]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d102      	bne.n	8009faa <remove_chain+0xde>
			ecl = nxt;
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	623b      	str	r3, [r7, #32]
 8009fa8:	e017      	b.n	8009fda <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	2b04      	cmp	r3, #4
 8009fb0:	d10f      	bne.n	8009fd2 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8009fb2:	6a3a      	ldr	r2, [r7, #32]
 8009fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb6:	1ad3      	subs	r3, r2, r3
 8009fb8:	1c5a      	adds	r2, r3, #1
 8009fba:	2300      	movs	r3, #0
 8009fbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009fbe:	69b8      	ldr	r0, [r7, #24]
 8009fc0:	f7ff feaf 	bl	8009d22 <change_bitmap>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8009fc8:	7ffb      	ldrb	r3, [r7, #31]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d001      	beq.n	8009fd2 <remove_chain+0x106>
 8009fce:	7ffb      	ldrb	r3, [r7, #31]
 8009fd0:	e02c      	b.n	800a02c <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	623b      	str	r3, [r7, #32]
 8009fd6:	6a3b      	ldr	r3, [r7, #32]
 8009fd8:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	6a1b      	ldr	r3, [r3, #32]
 8009fe2:	68ba      	ldr	r2, [r7, #8]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d3a2      	bcc.n	8009f2e <remove_chain+0x62>
 8009fe8:	e000      	b.n	8009fec <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8009fea:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	2b04      	cmp	r3, #4
 8009ff2:	d11a      	bne.n	800a02a <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d103      	bne.n	800a002 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	71da      	strb	r2, [r3, #7]
 800a000:	e013      	b.n	800a02a <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	79db      	ldrb	r3, [r3, #7]
 800a006:	2b03      	cmp	r3, #3
 800a008:	d10f      	bne.n	800a02a <remove_chain+0x15e>
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	429a      	cmp	r2, r3
 800a012:	d30a      	bcc.n	800a02a <remove_chain+0x15e>
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	689a      	ldr	r2, [r3, #8]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	699b      	ldr	r3, [r3, #24]
 800a01c:	4413      	add	r3, r2
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	429a      	cmp	r2, r3
 800a022:	d802      	bhi.n	800a02a <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2202      	movs	r2, #2
 800a028:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800a02a:	2300      	movs	r3, #0
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3728      	adds	r7, #40	; 0x28
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b088      	sub	sp, #32
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d10d      	bne.n	800a066 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	699b      	ldr	r3, [r3, #24]
 800a04e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a050:	69bb      	ldr	r3, [r7, #24]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d004      	beq.n	800a060 <create_chain+0x2c>
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	6a1b      	ldr	r3, [r3, #32]
 800a05a:	69ba      	ldr	r2, [r7, #24]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d31b      	bcc.n	800a098 <create_chain+0x64>
 800a060:	2301      	movs	r3, #1
 800a062:	61bb      	str	r3, [r7, #24]
 800a064:	e018      	b.n	800a098 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a066:	6839      	ldr	r1, [r7, #0]
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f7ff fb5d 	bl	8009728 <get_fat>
 800a06e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2b01      	cmp	r3, #1
 800a074:	d801      	bhi.n	800a07a <create_chain+0x46>
 800a076:	2301      	movs	r3, #1
 800a078:	e0d9      	b.n	800a22e <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a080:	d101      	bne.n	800a086 <create_chain+0x52>
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	e0d3      	b.n	800a22e <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	6a1b      	ldr	r3, [r3, #32]
 800a08a:	68fa      	ldr	r2, [r7, #12]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d201      	bcs.n	800a094 <create_chain+0x60>
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	e0cc      	b.n	800a22e <create_chain+0x1fa>
		scl = clst;
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	2b04      	cmp	r3, #4
 800a09e:	d164      	bne.n	800a16a <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	69b9      	ldr	r1, [r7, #24]
 800a0a4:	6938      	ldr	r0, [r7, #16]
 800a0a6:	f7ff fdb5 	bl	8009c14 <find_bitmap>
 800a0aa:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d003      	beq.n	800a0ba <create_chain+0x86>
 800a0b2:	69fb      	ldr	r3, [r7, #28]
 800a0b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0b8:	d101      	bne.n	800a0be <create_chain+0x8a>
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	e0b7      	b.n	800a22e <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800a0be:	2301      	movs	r3, #1
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	69f9      	ldr	r1, [r7, #28]
 800a0c4:	6938      	ldr	r0, [r7, #16]
 800a0c6:	f7ff fe2c 	bl	8009d22 <change_bitmap>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800a0ce:	7dfb      	ldrb	r3, [r7, #23]
 800a0d0:	2b02      	cmp	r3, #2
 800a0d2:	d101      	bne.n	800a0d8 <create_chain+0xa4>
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	e0aa      	b.n	800a22e <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800a0d8:	7dfb      	ldrb	r3, [r7, #23]
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d102      	bne.n	800a0e4 <create_chain+0xb0>
 800a0de:	f04f 33ff 	mov.w	r3, #4294967295
 800a0e2:	e0a4      	b.n	800a22e <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d103      	bne.n	800a0f2 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2202      	movs	r2, #2
 800a0ee:	71da      	strb	r2, [r3, #7]
 800a0f0:	e011      	b.n	800a116 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	79db      	ldrb	r3, [r3, #7]
 800a0f6:	2b02      	cmp	r3, #2
 800a0f8:	d10d      	bne.n	800a116 <create_chain+0xe2>
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	69fa      	ldr	r2, [r7, #28]
 800a100:	429a      	cmp	r2, r3
 800a102:	d008      	beq.n	800a116 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	69ba      	ldr	r2, [r7, #24]
 800a10a:	1ad2      	subs	r2, r2, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2203      	movs	r2, #3
 800a114:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	79db      	ldrb	r3, [r3, #7]
 800a11a:	2b02      	cmp	r3, #2
 800a11c:	d064      	beq.n	800a1e8 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	3301      	adds	r3, #1
 800a122:	69fa      	ldr	r2, [r7, #28]
 800a124:	429a      	cmp	r2, r3
 800a126:	d10b      	bne.n	800a140 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	69db      	ldr	r3, [r3, #28]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d003      	beq.n	800a138 <create_chain+0x104>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	69db      	ldr	r3, [r3, #28]
 800a134:	3301      	adds	r3, #1
 800a136:	e000      	b.n	800a13a <create_chain+0x106>
 800a138:	2302      	movs	r3, #2
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	61d3      	str	r3, [r2, #28]
 800a13e:	e053      	b.n	800a1e8 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	69db      	ldr	r3, [r3, #28]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d102      	bne.n	800a14e <create_chain+0x11a>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2201      	movs	r2, #1
 800a14c:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800a14e:	69fa      	ldr	r2, [r7, #28]
 800a150:	6839      	ldr	r1, [r7, #0]
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f7ff fe89 	bl	8009e6a <fill_last_frag>
 800a158:	4603      	mov	r3, r0
 800a15a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800a15c:	7dfb      	ldrb	r3, [r7, #23]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d142      	bne.n	800a1e8 <create_chain+0x1b4>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2201      	movs	r2, #1
 800a166:	61da      	str	r2, [r3, #28]
 800a168:	e03e      	b.n	800a1e8 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a16e:	69fb      	ldr	r3, [r7, #28]
 800a170:	3301      	adds	r3, #1
 800a172:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	6a1b      	ldr	r3, [r3, #32]
 800a178:	69fa      	ldr	r2, [r7, #28]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d307      	bcc.n	800a18e <create_chain+0x15a>
				ncl = 2;
 800a17e:	2302      	movs	r3, #2
 800a180:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a182:	69fa      	ldr	r2, [r7, #28]
 800a184:	69bb      	ldr	r3, [r7, #24]
 800a186:	429a      	cmp	r2, r3
 800a188:	d901      	bls.n	800a18e <create_chain+0x15a>
 800a18a:	2300      	movs	r3, #0
 800a18c:	e04f      	b.n	800a22e <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a18e:	69f9      	ldr	r1, [r7, #28]
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7ff fac9 	bl	8009728 <get_fat>
 800a196:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d00e      	beq.n	800a1bc <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d003      	beq.n	800a1ac <create_chain+0x178>
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1aa:	d101      	bne.n	800a1b0 <create_chain+0x17c>
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	e03e      	b.n	800a22e <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800a1b0:	69fa      	ldr	r2, [r7, #28]
 800a1b2:	69bb      	ldr	r3, [r7, #24]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d1da      	bne.n	800a16e <create_chain+0x13a>
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	e038      	b.n	800a22e <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800a1bc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a1be:	f04f 32ff 	mov.w	r2, #4294967295
 800a1c2:	69f9      	ldr	r1, [r7, #28]
 800a1c4:	6938      	ldr	r0, [r7, #16]
 800a1c6:	f7ff fc03 	bl	80099d0 <put_fat>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a1ce:	7dfb      	ldrb	r3, [r7, #23]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d109      	bne.n	800a1e8 <create_chain+0x1b4>
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d006      	beq.n	800a1e8 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a1da:	69fa      	ldr	r2, [r7, #28]
 800a1dc:	6839      	ldr	r1, [r7, #0]
 800a1de:	6938      	ldr	r0, [r7, #16]
 800a1e0:	f7ff fbf6 	bl	80099d0 <put_fat>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a1e8:	7dfb      	ldrb	r3, [r7, #23]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d116      	bne.n	800a21c <create_chain+0x1e8>
		fs->last_clst = ncl;
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	69fa      	ldr	r2, [r7, #28]
 800a1f2:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	69da      	ldr	r2, [r3, #28]
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	6a1b      	ldr	r3, [r3, #32]
 800a1fc:	3b02      	subs	r3, #2
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d804      	bhi.n	800a20c <create_chain+0x1d8>
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	69db      	ldr	r3, [r3, #28]
 800a206:	1e5a      	subs	r2, r3, #1
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	791b      	ldrb	r3, [r3, #4]
 800a210:	f043 0301 	orr.w	r3, r3, #1
 800a214:	b2da      	uxtb	r2, r3
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	711a      	strb	r2, [r3, #4]
 800a21a:	e007      	b.n	800a22c <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a21c:	7dfb      	ldrb	r3, [r7, #23]
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d102      	bne.n	800a228 <create_chain+0x1f4>
 800a222:	f04f 33ff 	mov.w	r3, #4294967295
 800a226:	e000      	b.n	800a22a <create_chain+0x1f6>
 800a228:	2301      	movs	r3, #1
 800a22a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a22c:	69fb      	ldr	r3, [r7, #28]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3720      	adds	r7, #32
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a236:	b590      	push	{r4, r7, lr}
 800a238:	b089      	sub	sp, #36	; 0x24
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	60f8      	str	r0, [r7, #12]
 800a23e:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a24c:	3304      	adds	r3, #4
 800a24e:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	899b      	ldrh	r3, [r3, #12]
 800a254:	b29b      	uxth	r3, r3
 800a256:	f04f 0400 	mov.w	r4, #0
 800a25a:	461a      	mov	r2, r3
 800a25c:	4623      	mov	r3, r4
 800a25e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a262:	f7f6 fc13 	bl	8000a8c <__aeabi_uldivmod>
 800a266:	4603      	mov	r3, r0
 800a268:	460c      	mov	r4, r1
 800a26a:	4618      	mov	r0, r3
 800a26c:	4621      	mov	r1, r4
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	895b      	ldrh	r3, [r3, #10]
 800a272:	b29b      	uxth	r3, r3
 800a274:	f04f 0400 	mov.w	r4, #0
 800a278:	461a      	mov	r2, r3
 800a27a:	4623      	mov	r3, r4
 800a27c:	f7f6 fc06 	bl	8000a8c <__aeabi_uldivmod>
 800a280:	4603      	mov	r3, r0
 800a282:	460c      	mov	r4, r1
 800a284:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a286:	69bb      	ldr	r3, [r7, #24]
 800a288:	1d1a      	adds	r2, r3, #4
 800a28a:	61ba      	str	r2, [r7, #24]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d101      	bne.n	800a29a <clmt_clust+0x64>
 800a296:	2300      	movs	r3, #0
 800a298:	e010      	b.n	800a2bc <clmt_clust+0x86>
		if (cl < ncl) break;	/* In this fragment? */
 800a29a:	69fa      	ldr	r2, [r7, #28]
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d307      	bcc.n	800a2b2 <clmt_clust+0x7c>
		cl -= ncl; tbl++;		/* Next fragment */
 800a2a2:	69fa      	ldr	r2, [r7, #28]
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	1ad3      	subs	r3, r2, r3
 800a2a8:	61fb      	str	r3, [r7, #28]
 800a2aa:	69bb      	ldr	r3, [r7, #24]
 800a2ac:	3304      	adds	r3, #4
 800a2ae:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a2b0:	e7e9      	b.n	800a286 <clmt_clust+0x50>
		if (cl < ncl) break;	/* In this fragment? */
 800a2b2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a2b4:	69bb      	ldr	r3, [r7, #24]
 800a2b6:	681a      	ldr	r2, [r3, #0]
 800a2b8:	69fb      	ldr	r3, [r7, #28]
 800a2ba:	4413      	add	r3, r2
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3724      	adds	r7, #36	; 0x24
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd90      	pop	{r4, r7, pc}

0800a2c4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b086      	sub	sp, #24
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	2b04      	cmp	r3, #4
 800a2da:	d102      	bne.n	800a2e2 <dir_sdi+0x1e>
 800a2dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2e0:	e001      	b.n	800a2e6 <dir_sdi+0x22>
 800a2e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d904      	bls.n	800a2f6 <dir_sdi+0x32>
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	f003 031f 	and.w	r3, r3, #31
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d001      	beq.n	800a2fa <dir_sdi+0x36>
		return FR_INT_ERR;
 800a2f6:	2302      	movs	r3, #2
 800a2f8:	e074      	b.n	800a3e4 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	683a      	ldr	r2, [r7, #0]
 800a2fe:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	689b      	ldr	r3, [r3, #8]
 800a304:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d109      	bne.n	800a320 <dir_sdi+0x5c>
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	2b02      	cmp	r3, #2
 800a312:	d905      	bls.n	800a320 <dir_sdi+0x5c>
		clst = fs->dirbase;
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a318:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2200      	movs	r2, #0
 800a31e:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d10c      	bne.n	800a340 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	095b      	lsrs	r3, r3, #5
 800a32a:	693a      	ldr	r2, [r7, #16]
 800a32c:	8912      	ldrh	r2, [r2, #8]
 800a32e:	4293      	cmp	r3, r2
 800a330:	d301      	bcc.n	800a336 <dir_sdi+0x72>
 800a332:	2302      	movs	r3, #2
 800a334:	e056      	b.n	800a3e4 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	639a      	str	r2, [r3, #56]	; 0x38
 800a33e:	e02d      	b.n	800a39c <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	895b      	ldrh	r3, [r3, #10]
 800a344:	461a      	mov	r2, r3
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	899b      	ldrh	r3, [r3, #12]
 800a34a:	fb03 f302 	mul.w	r3, r3, r2
 800a34e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a350:	e019      	b.n	800a386 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6979      	ldr	r1, [r7, #20]
 800a356:	4618      	mov	r0, r3
 800a358:	f7ff f9e6 	bl	8009728 <get_fat>
 800a35c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a364:	d101      	bne.n	800a36a <dir_sdi+0xa6>
 800a366:	2301      	movs	r3, #1
 800a368:	e03c      	b.n	800a3e4 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d904      	bls.n	800a37a <dir_sdi+0xb6>
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	6a1b      	ldr	r3, [r3, #32]
 800a374:	697a      	ldr	r2, [r7, #20]
 800a376:	429a      	cmp	r2, r3
 800a378:	d301      	bcc.n	800a37e <dir_sdi+0xba>
 800a37a:	2302      	movs	r3, #2
 800a37c:	e032      	b.n	800a3e4 <dir_sdi+0x120>
			ofs -= csz;
 800a37e:	683a      	ldr	r2, [r7, #0]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	1ad3      	subs	r3, r2, r3
 800a384:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a386:	683a      	ldr	r2, [r7, #0]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d2e1      	bcs.n	800a352 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800a38e:	6979      	ldr	r1, [r7, #20]
 800a390:	6938      	ldr	r0, [r7, #16]
 800a392:	f7ff f9a9 	bl	80096e8 <clust2sect>
 800a396:	4602      	mov	r2, r0
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	697a      	ldr	r2, [r7, #20]
 800a3a0:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d101      	bne.n	800a3ae <dir_sdi+0xea>
 800a3aa:	2302      	movs	r3, #2
 800a3ac:	e01a      	b.n	800a3e4 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	899b      	ldrh	r3, [r3, #12]
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	fbb3 f3f1 	udiv	r3, r3, r1
 800a3be:	441a      	add	r2, r3
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	899b      	ldrh	r3, [r3, #12]
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	fbb3 f0f2 	udiv	r0, r3, r2
 800a3d6:	fb02 f200 	mul.w	r2, r2, r0
 800a3da:	1a9b      	subs	r3, r3, r2
 800a3dc:	18ca      	adds	r2, r1, r3
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800a3e2:	2300      	movs	r3, #0
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3718      	adds	r7, #24
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b086      	sub	sp, #24
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a400:	3320      	adds	r3, #32
 800a402:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d00b      	beq.n	800a424 <dir_next+0x38>
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	2b04      	cmp	r3, #4
 800a412:	d102      	bne.n	800a41a <dir_next+0x2e>
 800a414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a418:	e001      	b.n	800a41e <dir_next+0x32>
 800a41a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	429a      	cmp	r2, r3
 800a422:	d801      	bhi.n	800a428 <dir_next+0x3c>
 800a424:	2304      	movs	r3, #4
 800a426:	e0c3      	b.n	800a5b0 <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	899b      	ldrh	r3, [r3, #12]
 800a42c:	461a      	mov	r2, r3
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	fbb3 f1f2 	udiv	r1, r3, r2
 800a434:	fb02 f201 	mul.w	r2, r2, r1
 800a438:	1a9b      	subs	r3, r3, r2
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	f040 80a5 	bne.w	800a58a <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a444:	1c5a      	adds	r2, r3, #1
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d10b      	bne.n	800a46a <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	095b      	lsrs	r3, r3, #5
 800a456:	68fa      	ldr	r2, [r7, #12]
 800a458:	8912      	ldrh	r2, [r2, #8]
 800a45a:	4293      	cmp	r3, r2
 800a45c:	f0c0 8095 	bcc.w	800a58a <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	639a      	str	r2, [r3, #56]	; 0x38
 800a466:	2304      	movs	r3, #4
 800a468:	e0a2      	b.n	800a5b0 <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	899b      	ldrh	r3, [r3, #12]
 800a46e:	461a      	mov	r2, r3
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	fbb3 f3f2 	udiv	r3, r3, r2
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	8952      	ldrh	r2, [r2, #10]
 800a47a:	3a01      	subs	r2, #1
 800a47c:	4013      	ands	r3, r2
 800a47e:	2b00      	cmp	r3, #0
 800a480:	f040 8083 	bne.w	800a58a <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a48a:	4619      	mov	r1, r3
 800a48c:	4610      	mov	r0, r2
 800a48e:	f7ff f94b 	bl	8009728 <get_fat>
 800a492:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	2b01      	cmp	r3, #1
 800a498:	d801      	bhi.n	800a49e <dir_next+0xb2>
 800a49a:	2302      	movs	r3, #2
 800a49c:	e088      	b.n	800a5b0 <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4a4:	d101      	bne.n	800a4aa <dir_next+0xbe>
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	e082      	b.n	800a5b0 <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	6a1b      	ldr	r3, [r3, #32]
 800a4ae:	697a      	ldr	r2, [r7, #20]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d360      	bcc.n	800a576 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d104      	bne.n	800a4c4 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	639a      	str	r2, [r3, #56]	; 0x38
 800a4c0:	2304      	movs	r3, #4
 800a4c2:	e075      	b.n	800a5b0 <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	4610      	mov	r0, r2
 800a4ce:	f7ff fdb1 	bl	800a034 <create_chain>
 800a4d2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d101      	bne.n	800a4de <dir_next+0xf2>
 800a4da:	2307      	movs	r3, #7
 800a4dc:	e068      	b.n	800a5b0 <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d101      	bne.n	800a4e8 <dir_next+0xfc>
 800a4e4:	2302      	movs	r3, #2
 800a4e6:	e063      	b.n	800a5b0 <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ee:	d101      	bne.n	800a4f4 <dir_next+0x108>
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	e05d      	b.n	800a5b0 <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	79db      	ldrb	r3, [r3, #7]
 800a4f8:	f043 0304 	orr.w	r3, r3, #4
 800a4fc:	b2da      	uxtb	r2, r3
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a502:	68f8      	ldr	r0, [r7, #12]
 800a504:	f7ff f80e 	bl	8009524 <sync_window>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d001      	beq.n	800a512 <dir_next+0x126>
 800a50e:	2301      	movs	r3, #1
 800a510:	e04e      	b.n	800a5b0 <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	899b      	ldrh	r3, [r3, #12]
 800a51c:	461a      	mov	r2, r3
 800a51e:	2100      	movs	r1, #0
 800a520:	f7fe fe37 	bl	8009192 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a524:	2300      	movs	r3, #0
 800a526:	613b      	str	r3, [r7, #16]
 800a528:	6979      	ldr	r1, [r7, #20]
 800a52a:	68f8      	ldr	r0, [r7, #12]
 800a52c:	f7ff f8dc 	bl	80096e8 <clust2sect>
 800a530:	4602      	mov	r2, r0
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	639a      	str	r2, [r3, #56]	; 0x38
 800a536:	e012      	b.n	800a55e <dir_next+0x172>
						fs->wflag = 1;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2201      	movs	r2, #1
 800a53c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a53e:	68f8      	ldr	r0, [r7, #12]
 800a540:	f7fe fff0 	bl	8009524 <sync_window>
 800a544:	4603      	mov	r3, r0
 800a546:	2b00      	cmp	r3, #0
 800a548:	d001      	beq.n	800a54e <dir_next+0x162>
 800a54a:	2301      	movs	r3, #1
 800a54c:	e030      	b.n	800a5b0 <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	3301      	adds	r3, #1
 800a552:	613b      	str	r3, [r7, #16]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a558:	1c5a      	adds	r2, r3, #1
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	639a      	str	r2, [r3, #56]	; 0x38
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	895b      	ldrh	r3, [r3, #10]
 800a562:	461a      	mov	r2, r3
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	4293      	cmp	r3, r2
 800a568:	d3e6      	bcc.n	800a538 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	1ad2      	subs	r2, r2, r3
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	697a      	ldr	r2, [r7, #20]
 800a57a:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800a57c:	6979      	ldr	r1, [r7, #20]
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	f7ff f8b2 	bl	80096e8 <clust2sect>
 800a584:	4602      	mov	r2, r0
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	68ba      	ldr	r2, [r7, #8]
 800a58e:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	899b      	ldrh	r3, [r3, #12]
 800a59a:	461a      	mov	r2, r3
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a5a2:	fb02 f200 	mul.w	r2, r2, r0
 800a5a6:	1a9b      	subs	r3, r3, r2
 800a5a8:	18ca      	adds	r2, r1, r3
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3718      	adds	r7, #24
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a5c8:	2100      	movs	r1, #0
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f7ff fe7a 	bl	800a2c4 <dir_sdi>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a5d4:	7dfb      	ldrb	r3, [r7, #23]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d140      	bne.n	800a65c <dir_alloc+0xa4>
		n = 0;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	68f8      	ldr	r0, [r7, #12]
 800a5e6:	f7fe ffe1 	bl	80095ac <move_window>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a5ee:	7dfb      	ldrb	r3, [r7, #23]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d132      	bne.n	800a65a <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	2b04      	cmp	r3, #4
 800a5fa:	d108      	bne.n	800a60e <dir_alloc+0x56>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	b25b      	sxtb	r3, r3
 800a604:	43db      	mvns	r3, r3
 800a606:	b2db      	uxtb	r3, r3
 800a608:	09db      	lsrs	r3, r3, #7
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	e00f      	b.n	800a62e <dir_alloc+0x76>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	2be5      	cmp	r3, #229	; 0xe5
 800a616:	d004      	beq.n	800a622 <dir_alloc+0x6a>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d101      	bne.n	800a626 <dir_alloc+0x6e>
 800a622:	2301      	movs	r3, #1
 800a624:	e000      	b.n	800a628 <dir_alloc+0x70>
 800a626:	2300      	movs	r3, #0
 800a628:	f003 0301 	and.w	r3, r3, #1
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d007      	beq.n	800a642 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	3301      	adds	r3, #1
 800a636:	613b      	str	r3, [r7, #16]
 800a638:	693a      	ldr	r2, [r7, #16]
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d102      	bne.n	800a646 <dir_alloc+0x8e>
 800a640:	e00c      	b.n	800a65c <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a642:	2300      	movs	r3, #0
 800a644:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a646:	2101      	movs	r1, #1
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f7ff fecf 	bl	800a3ec <dir_next>
 800a64e:	4603      	mov	r3, r0
 800a650:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a652:	7dfb      	ldrb	r3, [r7, #23]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d0c2      	beq.n	800a5de <dir_alloc+0x26>
 800a658:	e000      	b.n	800a65c <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800a65a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a65c:	7dfb      	ldrb	r3, [r7, #23]
 800a65e:	2b04      	cmp	r3, #4
 800a660:	d101      	bne.n	800a666 <dir_alloc+0xae>
 800a662:	2307      	movs	r3, #7
 800a664:	75fb      	strb	r3, [r7, #23]
	return res;
 800a666:	7dfb      	ldrb	r3, [r7, #23]
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3718      	adds	r7, #24
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	331a      	adds	r3, #26
 800a67e:	4618      	mov	r0, r3
 800a680:	f7fe fba0 	bl	8008dc4 <ld_word>
 800a684:	4603      	mov	r3, r0
 800a686:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	781b      	ldrb	r3, [r3, #0]
 800a68c:	2b03      	cmp	r3, #3
 800a68e:	d109      	bne.n	800a6a4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	3314      	adds	r3, #20
 800a694:	4618      	mov	r0, r3
 800a696:	f7fe fb95 	bl	8008dc4 <ld_word>
 800a69a:	4603      	mov	r3, r0
 800a69c:	041b      	lsls	r3, r3, #16
 800a69e:	68fa      	ldr	r2, [r7, #12]
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3710      	adds	r7, #16
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b084      	sub	sp, #16
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	60f8      	str	r0, [r7, #12]
 800a6b6:	60b9      	str	r1, [r7, #8]
 800a6b8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	331a      	adds	r3, #26
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	b292      	uxth	r2, r2
 800a6c2:	4611      	mov	r1, r2
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7fe fc75 	bl	8008fb4 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	2b03      	cmp	r3, #3
 800a6d0:	d109      	bne.n	800a6e6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	f103 0214 	add.w	r2, r3, #20
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	0c1b      	lsrs	r3, r3, #16
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	4619      	mov	r1, r3
 800a6e0:	4610      	mov	r0, r2
 800a6e2:	f7fe fc67 	bl	8008fb4 <st_word>
	}
}
 800a6e6:	bf00      	nop
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
	...

0800a6f0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a6f0:	b590      	push	{r4, r7, lr}
 800a6f2:	b087      	sub	sp, #28
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	331a      	adds	r3, #26
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7fe fb60 	bl	8008dc4 <ld_word>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d001      	beq.n	800a70e <cmp_lfn+0x1e>
 800a70a:	2300      	movs	r3, #0
 800a70c:	e059      	b.n	800a7c2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a716:	1e5a      	subs	r2, r3, #1
 800a718:	4613      	mov	r3, r2
 800a71a:	005b      	lsls	r3, r3, #1
 800a71c:	4413      	add	r3, r2
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	4413      	add	r3, r2
 800a722:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a724:	2301      	movs	r3, #1
 800a726:	81fb      	strh	r3, [r7, #14]
 800a728:	2300      	movs	r3, #0
 800a72a:	613b      	str	r3, [r7, #16]
 800a72c:	e033      	b.n	800a796 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a72e:	4a27      	ldr	r2, [pc, #156]	; (800a7cc <cmp_lfn+0xdc>)
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	4413      	add	r3, r2
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	461a      	mov	r2, r3
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	4413      	add	r3, r2
 800a73c:	4618      	mov	r0, r3
 800a73e:	f7fe fb41 	bl	8008dc4 <ld_word>
 800a742:	4603      	mov	r3, r0
 800a744:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a746:	89fb      	ldrh	r3, [r7, #14]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d01a      	beq.n	800a782 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	2bfe      	cmp	r3, #254	; 0xfe
 800a750:	d812      	bhi.n	800a778 <cmp_lfn+0x88>
 800a752:	89bb      	ldrh	r3, [r7, #12]
 800a754:	4618      	mov	r0, r3
 800a756:	f003 f887 	bl	800d868 <ff_wtoupper>
 800a75a:	4603      	mov	r3, r0
 800a75c:	461c      	mov	r4, r3
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	1c5a      	adds	r2, r3, #1
 800a762:	617a      	str	r2, [r7, #20]
 800a764:	005b      	lsls	r3, r3, #1
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	4413      	add	r3, r2
 800a76a:	881b      	ldrh	r3, [r3, #0]
 800a76c:	4618      	mov	r0, r3
 800a76e:	f003 f87b 	bl	800d868 <ff_wtoupper>
 800a772:	4603      	mov	r3, r0
 800a774:	429c      	cmp	r4, r3
 800a776:	d001      	beq.n	800a77c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a778:	2300      	movs	r3, #0
 800a77a:	e022      	b.n	800a7c2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800a77c:	89bb      	ldrh	r3, [r7, #12]
 800a77e:	81fb      	strh	r3, [r7, #14]
 800a780:	e006      	b.n	800a790 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a782:	89bb      	ldrh	r3, [r7, #12]
 800a784:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a788:	4293      	cmp	r3, r2
 800a78a:	d001      	beq.n	800a790 <cmp_lfn+0xa0>
 800a78c:	2300      	movs	r3, #0
 800a78e:	e018      	b.n	800a7c2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	3301      	adds	r3, #1
 800a794:	613b      	str	r3, [r7, #16]
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	2b0c      	cmp	r3, #12
 800a79a:	d9c8      	bls.n	800a72e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d00b      	beq.n	800a7c0 <cmp_lfn+0xd0>
 800a7a8:	89fb      	ldrh	r3, [r7, #14]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d008      	beq.n	800a7c0 <cmp_lfn+0xd0>
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	005b      	lsls	r3, r3, #1
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	881b      	ldrh	r3, [r3, #0]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d001      	beq.n	800a7c0 <cmp_lfn+0xd0>
 800a7bc:	2300      	movs	r3, #0
 800a7be:	e000      	b.n	800a7c2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a7c0:	2301      	movs	r3, #1
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	371c      	adds	r7, #28
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd90      	pop	{r4, r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	0800ee8c 	.word	0x0800ee8c

0800a7d0 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b086      	sub	sp, #24
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	331a      	adds	r3, #26
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7fe faf0 	bl	8008dc4 <ld_word>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d001      	beq.n	800a7ee <pick_lfn+0x1e>
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	e04d      	b.n	800a88a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7f6:	1e5a      	subs	r2, r3, #1
 800a7f8:	4613      	mov	r3, r2
 800a7fa:	005b      	lsls	r3, r3, #1
 800a7fc:	4413      	add	r3, r2
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	4413      	add	r3, r2
 800a802:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a804:	2301      	movs	r3, #1
 800a806:	81fb      	strh	r3, [r7, #14]
 800a808:	2300      	movs	r3, #0
 800a80a:	613b      	str	r3, [r7, #16]
 800a80c:	e028      	b.n	800a860 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a80e:	4a21      	ldr	r2, [pc, #132]	; (800a894 <pick_lfn+0xc4>)
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	4413      	add	r3, r2
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	461a      	mov	r2, r3
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	4413      	add	r3, r2
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7fe fad1 	bl	8008dc4 <ld_word>
 800a822:	4603      	mov	r3, r0
 800a824:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a826:	89fb      	ldrh	r3, [r7, #14]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d00f      	beq.n	800a84c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	2bfe      	cmp	r3, #254	; 0xfe
 800a830:	d901      	bls.n	800a836 <pick_lfn+0x66>
 800a832:	2300      	movs	r3, #0
 800a834:	e029      	b.n	800a88a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a836:	89bb      	ldrh	r3, [r7, #12]
 800a838:	81fb      	strh	r3, [r7, #14]
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	1c5a      	adds	r2, r3, #1
 800a83e:	617a      	str	r2, [r7, #20]
 800a840:	005b      	lsls	r3, r3, #1
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	4413      	add	r3, r2
 800a846:	89fa      	ldrh	r2, [r7, #14]
 800a848:	801a      	strh	r2, [r3, #0]
 800a84a:	e006      	b.n	800a85a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a84c:	89bb      	ldrh	r3, [r7, #12]
 800a84e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a852:	4293      	cmp	r3, r2
 800a854:	d001      	beq.n	800a85a <pick_lfn+0x8a>
 800a856:	2300      	movs	r3, #0
 800a858:	e017      	b.n	800a88a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	3301      	adds	r3, #1
 800a85e:	613b      	str	r3, [r7, #16]
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	2b0c      	cmp	r3, #12
 800a864:	d9d3      	bls.n	800a80e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d00a      	beq.n	800a888 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	2bfe      	cmp	r3, #254	; 0xfe
 800a876:	d901      	bls.n	800a87c <pick_lfn+0xac>
 800a878:	2300      	movs	r3, #0
 800a87a:	e006      	b.n	800a88a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	005b      	lsls	r3, r3, #1
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	4413      	add	r3, r2
 800a884:	2200      	movs	r2, #0
 800a886:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800a888:	2301      	movs	r3, #1
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3718      	adds	r7, #24
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
 800a892:	bf00      	nop
 800a894:	0800ee8c 	.word	0x0800ee8c

0800a898 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b088      	sub	sp, #32
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	60f8      	str	r0, [r7, #12]
 800a8a0:	60b9      	str	r1, [r7, #8]
 800a8a2:	4611      	mov	r1, r2
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	460b      	mov	r3, r1
 800a8a8:	71fb      	strb	r3, [r7, #7]
 800a8aa:	4613      	mov	r3, r2
 800a8ac:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	330d      	adds	r3, #13
 800a8b2:	79ba      	ldrb	r2, [r7, #6]
 800a8b4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	330b      	adds	r3, #11
 800a8ba:	220f      	movs	r2, #15
 800a8bc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	330c      	adds	r3, #12
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	331a      	adds	r3, #26
 800a8ca:	2100      	movs	r1, #0
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f7fe fb71 	bl	8008fb4 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a8d2:	79fb      	ldrb	r3, [r7, #7]
 800a8d4:	1e5a      	subs	r2, r3, #1
 800a8d6:	4613      	mov	r3, r2
 800a8d8:	005b      	lsls	r3, r3, #1
 800a8da:	4413      	add	r3, r2
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	4413      	add	r3, r2
 800a8e0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	82fb      	strh	r3, [r7, #22]
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a8ea:	8afb      	ldrh	r3, [r7, #22]
 800a8ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d007      	beq.n	800a904 <put_lfn+0x6c>
 800a8f4:	69fb      	ldr	r3, [r7, #28]
 800a8f6:	1c5a      	adds	r2, r3, #1
 800a8f8:	61fa      	str	r2, [r7, #28]
 800a8fa:	005b      	lsls	r3, r3, #1
 800a8fc:	68fa      	ldr	r2, [r7, #12]
 800a8fe:	4413      	add	r3, r2
 800a900:	881b      	ldrh	r3, [r3, #0]
 800a902:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a904:	4a17      	ldr	r2, [pc, #92]	; (800a964 <put_lfn+0xcc>)
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	4413      	add	r3, r2
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	461a      	mov	r2, r3
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	4413      	add	r3, r2
 800a912:	8afa      	ldrh	r2, [r7, #22]
 800a914:	4611      	mov	r1, r2
 800a916:	4618      	mov	r0, r3
 800a918:	f7fe fb4c 	bl	8008fb4 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a91c:	8afb      	ldrh	r3, [r7, #22]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d102      	bne.n	800a928 <put_lfn+0x90>
 800a922:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a926:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a928:	69bb      	ldr	r3, [r7, #24]
 800a92a:	3301      	adds	r3, #1
 800a92c:	61bb      	str	r3, [r7, #24]
 800a92e:	69bb      	ldr	r3, [r7, #24]
 800a930:	2b0c      	cmp	r3, #12
 800a932:	d9da      	bls.n	800a8ea <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a934:	8afb      	ldrh	r3, [r7, #22]
 800a936:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d006      	beq.n	800a94c <put_lfn+0xb4>
 800a93e:	69fb      	ldr	r3, [r7, #28]
 800a940:	005b      	lsls	r3, r3, #1
 800a942:	68fa      	ldr	r2, [r7, #12]
 800a944:	4413      	add	r3, r2
 800a946:	881b      	ldrh	r3, [r3, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d103      	bne.n	800a954 <put_lfn+0xbc>
 800a94c:	79fb      	ldrb	r3, [r7, #7]
 800a94e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a952:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	79fa      	ldrb	r2, [r7, #7]
 800a958:	701a      	strb	r2, [r3, #0]
}
 800a95a:	bf00      	nop
 800a95c:	3720      	adds	r7, #32
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	0800ee8c 	.word	0x0800ee8c

0800a968 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b08c      	sub	sp, #48	; 0x30
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	60b9      	str	r1, [r7, #8]
 800a972:	607a      	str	r2, [r7, #4]
 800a974:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a976:	220b      	movs	r2, #11
 800a978:	68b9      	ldr	r1, [r7, #8]
 800a97a:	68f8      	ldr	r0, [r7, #12]
 800a97c:	f7fe fbe8 	bl	8009150 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	2b05      	cmp	r3, #5
 800a984:	d92b      	bls.n	800a9de <gen_numname+0x76>
		sr = seq;
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a98a:	e022      	b.n	800a9d2 <gen_numname+0x6a>
			wc = *lfn++;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	1c9a      	adds	r2, r3, #2
 800a990:	607a      	str	r2, [r7, #4]
 800a992:	881b      	ldrh	r3, [r3, #0]
 800a994:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800a996:	2300      	movs	r3, #0
 800a998:	62bb      	str	r3, [r7, #40]	; 0x28
 800a99a:	e017      	b.n	800a9cc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a99c:	69fb      	ldr	r3, [r7, #28]
 800a99e:	005a      	lsls	r2, r3, #1
 800a9a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a9a2:	f003 0301 	and.w	r3, r3, #1
 800a9a6:	4413      	add	r3, r2
 800a9a8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a9aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a9ac:	085b      	lsrs	r3, r3, #1
 800a9ae:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a9b0:	69fb      	ldr	r3, [r7, #28]
 800a9b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d005      	beq.n	800a9c6 <gen_numname+0x5e>
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800a9c0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800a9c4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ce:	2b0f      	cmp	r3, #15
 800a9d0:	d9e4      	bls.n	800a99c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	881b      	ldrh	r3, [r3, #0]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d1d8      	bne.n	800a98c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a9de:	2307      	movs	r3, #7
 800a9e0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	f003 030f 	and.w	r3, r3, #15
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	3330      	adds	r3, #48	; 0x30
 800a9ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800a9f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a9f6:	2b39      	cmp	r3, #57	; 0x39
 800a9f8:	d904      	bls.n	800aa04 <gen_numname+0x9c>
 800a9fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a9fe:	3307      	adds	r3, #7
 800aa00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800aa04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa06:	1e5a      	subs	r2, r3, #1
 800aa08:	62ba      	str	r2, [r7, #40]	; 0x28
 800aa0a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800aa0e:	4413      	add	r3, r2
 800aa10:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800aa14:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	091b      	lsrs	r3, r3, #4
 800aa1c:	603b      	str	r3, [r7, #0]
	} while (seq);
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d1de      	bne.n	800a9e2 <gen_numname+0x7a>
	ns[i] = '~';
 800aa24:	f107 0214 	add.w	r2, r7, #20
 800aa28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2a:	4413      	add	r3, r2
 800aa2c:	227e      	movs	r2, #126	; 0x7e
 800aa2e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800aa30:	2300      	movs	r3, #0
 800aa32:	627b      	str	r3, [r7, #36]	; 0x24
 800aa34:	e002      	b.n	800aa3c <gen_numname+0xd4>
 800aa36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa38:	3301      	adds	r3, #1
 800aa3a:	627b      	str	r3, [r7, #36]	; 0x24
 800aa3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d205      	bcs.n	800aa50 <gen_numname+0xe8>
 800aa44:	68fa      	ldr	r2, [r7, #12]
 800aa46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa48:	4413      	add	r3, r2
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	2b20      	cmp	r3, #32
 800aa4e:	d1f2      	bne.n	800aa36 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800aa50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa52:	2b07      	cmp	r3, #7
 800aa54:	d808      	bhi.n	800aa68 <gen_numname+0x100>
 800aa56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa58:	1c5a      	adds	r2, r3, #1
 800aa5a:	62ba      	str	r2, [r7, #40]	; 0x28
 800aa5c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800aa60:	4413      	add	r3, r2
 800aa62:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800aa66:	e000      	b.n	800aa6a <gen_numname+0x102>
 800aa68:	2120      	movs	r1, #32
 800aa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6c:	1c5a      	adds	r2, r3, #1
 800aa6e:	627a      	str	r2, [r7, #36]	; 0x24
 800aa70:	68fa      	ldr	r2, [r7, #12]
 800aa72:	4413      	add	r3, r2
 800aa74:	460a      	mov	r2, r1
 800aa76:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800aa78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7a:	2b07      	cmp	r3, #7
 800aa7c:	d9e8      	bls.n	800aa50 <gen_numname+0xe8>
}
 800aa7e:	bf00      	nop
 800aa80:	3730      	adds	r7, #48	; 0x30
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800aa86:	b480      	push	{r7}
 800aa88:	b085      	sub	sp, #20
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800aa92:	230b      	movs	r3, #11
 800aa94:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800aa96:	7bfb      	ldrb	r3, [r7, #15]
 800aa98:	b2da      	uxtb	r2, r3
 800aa9a:	0852      	lsrs	r2, r2, #1
 800aa9c:	01db      	lsls	r3, r3, #7
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	b2da      	uxtb	r2, r3
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	1c59      	adds	r1, r3, #1
 800aaa6:	6079      	str	r1, [r7, #4]
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	4413      	add	r3, r2
 800aaac:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	3b01      	subs	r3, #1
 800aab2:	60bb      	str	r3, [r7, #8]
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d1ed      	bne.n	800aa96 <sum_sfn+0x10>
	return sum;
 800aaba:	7bfb      	ldrb	r3, [r7, #15]
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3714      	adds	r7, #20
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b087      	sub	sp, #28
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	3301      	adds	r3, #1
 800aad4:	781b      	ldrb	r3, [r3, #0]
 800aad6:	3301      	adds	r3, #1
 800aad8:	015b      	lsls	r3, r3, #5
 800aada:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800aadc:	2300      	movs	r3, #0
 800aade:	827b      	strh	r3, [r7, #18]
 800aae0:	2300      	movs	r3, #0
 800aae2:	617b      	str	r3, [r7, #20]
 800aae4:	e018      	b.n	800ab18 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	2b02      	cmp	r3, #2
 800aaea:	d103      	bne.n	800aaf4 <xdir_sum+0x2c>
			i++;
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	3301      	adds	r3, #1
 800aaf0:	617b      	str	r3, [r7, #20]
 800aaf2:	e00e      	b.n	800ab12 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800aaf4:	8a7b      	ldrh	r3, [r7, #18]
 800aaf6:	03db      	lsls	r3, r3, #15
 800aaf8:	b29a      	uxth	r2, r3
 800aafa:	8a7b      	ldrh	r3, [r7, #18]
 800aafc:	085b      	lsrs	r3, r3, #1
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	4413      	add	r3, r2
 800ab02:	b29a      	uxth	r2, r3
 800ab04:	6879      	ldr	r1, [r7, #4]
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	440b      	add	r3, r1
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	4413      	add	r3, r2
 800ab10:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	3301      	adds	r3, #1
 800ab16:	617b      	str	r3, [r7, #20]
 800ab18:	697a      	ldr	r2, [r7, #20]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d3e2      	bcc.n	800aae6 <xdir_sum+0x1e>
		}
	}
	return sum;
 800ab20:	8a7b      	ldrh	r3, [r7, #18]
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	371c      	adds	r7, #28
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr

0800ab2e <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800ab2e:	b580      	push	{r7, lr}
 800ab30:	b084      	sub	sp, #16
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800ab36:	2300      	movs	r3, #0
 800ab38:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800ab3a:	e01f      	b.n	800ab7c <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800ab3c:	89bb      	ldrh	r3, [r7, #12]
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f002 fe92 	bl	800d868 <ff_wtoupper>
 800ab44:	4603      	mov	r3, r0
 800ab46:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800ab48:	89fb      	ldrh	r3, [r7, #14]
 800ab4a:	03db      	lsls	r3, r3, #15
 800ab4c:	b29a      	uxth	r2, r3
 800ab4e:	89fb      	ldrh	r3, [r7, #14]
 800ab50:	085b      	lsrs	r3, r3, #1
 800ab52:	b29b      	uxth	r3, r3
 800ab54:	4413      	add	r3, r2
 800ab56:	b29a      	uxth	r2, r3
 800ab58:	89bb      	ldrh	r3, [r7, #12]
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	b29b      	uxth	r3, r3
 800ab5e:	4413      	add	r3, r2
 800ab60:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800ab62:	89fb      	ldrh	r3, [r7, #14]
 800ab64:	03db      	lsls	r3, r3, #15
 800ab66:	b29a      	uxth	r2, r3
 800ab68:	89fb      	ldrh	r3, [r7, #14]
 800ab6a:	085b      	lsrs	r3, r3, #1
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	4413      	add	r3, r2
 800ab70:	b29a      	uxth	r2, r3
 800ab72:	89bb      	ldrh	r3, [r7, #12]
 800ab74:	0a1b      	lsrs	r3, r3, #8
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	4413      	add	r3, r2
 800ab7a:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	1c9a      	adds	r2, r3, #2
 800ab80:	607a      	str	r2, [r7, #4]
 800ab82:	881b      	ldrh	r3, [r3, #0]
 800ab84:	81bb      	strh	r3, [r7, #12]
 800ab86:	89bb      	ldrh	r3, [r7, #12]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d1d7      	bne.n	800ab3c <xname_sum+0xe>
	}
	return sum;
 800ab8c:	89fb      	ldrh	r3, [r7, #14]
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3710      	adds	r7, #16
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 800ab96:	b590      	push	{r4, r7, lr}
 800ab98:	b087      	sub	sp, #28
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
 800ab9e:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 800aba0:	2300      	movs	r3, #0
 800aba2:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800aba4:	2340      	movs	r3, #64	; 0x40
 800aba6:	613b      	str	r3, [r7, #16]
 800aba8:	2300      	movs	r3, #0
 800abaa:	60fb      	str	r3, [r7, #12]
 800abac:	e02c      	b.n	800ac08 <get_xdir_info+0x72>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	f003 031f 	and.w	r3, r3, #31
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d102      	bne.n	800abbe <get_xdir_info+0x28>
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	3302      	adds	r3, #2
 800abbc:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	4413      	add	r3, r2
 800abc4:	4618      	mov	r0, r3
 800abc6:	f7fe f8fd 	bl	8008dc4 <ld_word>
 800abca:	4603      	mov	r3, r0
 800abcc:	2100      	movs	r1, #0
 800abce:	4618      	mov	r0, r3
 800abd0:	f002 fe0e 	bl	800d7f0 <ff_convert>
 800abd4:	4603      	mov	r3, r0
 800abd6:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800abd8:	897b      	ldrh	r3, [r7, #10]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d002      	beq.n	800abe4 <get_xdir_info+0x4e>
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	2bfe      	cmp	r3, #254	; 0xfe
 800abe2:	d902      	bls.n	800abea <get_xdir_info+0x54>
 800abe4:	2300      	movs	r3, #0
 800abe6:	617b      	str	r3, [r7, #20]
 800abe8:	e015      	b.n	800ac16 <get_xdir_info+0x80>
		fno->fname[di++] = (char)w;
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	1c5a      	adds	r2, r3, #1
 800abee:	617a      	str	r2, [r7, #20]
 800abf0:	897a      	ldrh	r2, [r7, #10]
 800abf2:	b2d1      	uxtb	r1, r2
 800abf4:	683a      	ldr	r2, [r7, #0]
 800abf6:	4413      	add	r3, r2
 800abf8:	460a      	mov	r2, r1
 800abfa:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	3302      	adds	r3, #2
 800ac00:	613b      	str	r3, [r7, #16]
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	3301      	adds	r3, #1
 800ac06:	60fb      	str	r3, [r7, #12]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	3323      	adds	r3, #35	; 0x23
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	461a      	mov	r2, r3
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d3cb      	bcc.n	800abae <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d106      	bne.n	800ac2a <get_xdir_info+0x94>
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	1c5a      	adds	r2, r3, #1
 800ac20:	617a      	str	r2, [r7, #20]
 800ac22:	683a      	ldr	r2, [r7, #0]
 800ac24:	4413      	add	r3, r2
 800ac26:	223f      	movs	r2, #63	; 0x3f
 800ac28:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 800ac2a:	683a      	ldr	r2, [r7, #0]
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	4413      	add	r3, r2
 800ac30:	331a      	adds	r3, #26
 800ac32:	2200      	movs	r2, #0
 800ac34:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	791a      	ldrb	r2, [r3, #4]
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	7b1b      	ldrb	r3, [r3, #12]
 800ac48:	f003 0310 	and.w	r3, r3, #16
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d107      	bne.n	800ac60 <get_xdir_info+0xca>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	3338      	adds	r3, #56	; 0x38
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7fe f8f0 	bl	8008e3a <ld_qword>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	460c      	mov	r4, r1
 800ac5e:	e003      	b.n	800ac68 <get_xdir_info+0xd2>
 800ac60:	f04f 0300 	mov.w	r3, #0
 800ac64:	f04f 0400 	mov.w	r4, #0
 800ac68:	683a      	ldr	r2, [r7, #0]
 800ac6a:	e9c2 3400 	strd	r3, r4, [r2]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	330c      	adds	r3, #12
 800ac72:	4618      	mov	r0, r3
 800ac74:	f7fe f8a6 	bl	8008dc4 <ld_word>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	330e      	adds	r3, #14
 800ac84:	4618      	mov	r0, r3
 800ac86:	f7fe f89d 	bl	8008dc4 <ld_word>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	811a      	strh	r2, [r3, #8]
}
 800ac92:	bf00      	nop
 800ac94:	371c      	adds	r7, #28
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd90      	pop	{r4, r7, pc}
	...

0800ac9c <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800ac9c:	b590      	push	{r4, r7, lr}
 800ac9e:	b087      	sub	sp, #28
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	695b      	ldr	r3, [r3, #20]
 800acaa:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb4:	4619      	mov	r1, r3
 800acb6:	4610      	mov	r0, r2
 800acb8:	f7fe fc78 	bl	80095ac <move_window>
 800acbc:	4603      	mov	r3, r0
 800acbe:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800acc0:	7bfb      	ldrb	r3, [r7, #15]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d001      	beq.n	800acca <load_xdir+0x2e>
 800acc6:	7bfb      	ldrb	r3, [r7, #15]
 800acc8:	e09f      	b.n	800ae0a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	2b85      	cmp	r3, #133	; 0x85
 800acd2:	d001      	beq.n	800acd8 <load_xdir+0x3c>
 800acd4:	2302      	movs	r3, #2
 800acd6:	e098      	b.n	800ae0a <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acdc:	2220      	movs	r2, #32
 800acde:	4619      	mov	r1, r3
 800ace0:	6938      	ldr	r0, [r7, #16]
 800ace2:	f7fe fa35 	bl	8009150 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	3301      	adds	r3, #1
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	3301      	adds	r3, #1
 800acee:	015b      	lsls	r3, r3, #5
 800acf0:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	2b5f      	cmp	r3, #95	; 0x5f
 800acf6:	d903      	bls.n	800ad00 <load_xdir+0x64>
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800acfe:	d901      	bls.n	800ad04 <load_xdir+0x68>
 800ad00:	2302      	movs	r3, #2
 800ad02:	e082      	b.n	800ae0a <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800ad04:	2100      	movs	r1, #0
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f7ff fb70 	bl	800a3ec <dir_next>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800ad10:	7bfb      	ldrb	r3, [r7, #15]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d001      	beq.n	800ad1a <load_xdir+0x7e>
 800ad16:	7bfb      	ldrb	r3, [r7, #15]
 800ad18:	e077      	b.n	800ae0a <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad22:	4619      	mov	r1, r3
 800ad24:	4610      	mov	r0, r2
 800ad26:	f7fe fc41 	bl	80095ac <move_window>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800ad2e:	7bfb      	ldrb	r3, [r7, #15]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d001      	beq.n	800ad38 <load_xdir+0x9c>
 800ad34:	7bfb      	ldrb	r3, [r7, #15]
 800ad36:	e068      	b.n	800ae0a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	2bc0      	cmp	r3, #192	; 0xc0
 800ad40:	d001      	beq.n	800ad46 <load_xdir+0xaa>
 800ad42:	2302      	movs	r3, #2
 800ad44:	e061      	b.n	800ae0a <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	f103 0020 	add.w	r0, r3, #32
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad50:	2220      	movs	r2, #32
 800ad52:	4619      	mov	r1, r3
 800ad54:	f7fe f9fc 	bl	8009150 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	3323      	adds	r3, #35	; 0x23
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	332c      	adds	r3, #44	; 0x2c
 800ad60:	4a2c      	ldr	r2, [pc, #176]	; (800ae14 <load_xdir+0x178>)
 800ad62:	fba2 2303 	umull	r2, r3, r2, r3
 800ad66:	08db      	lsrs	r3, r3, #3
 800ad68:	015b      	lsls	r3, r3, #5
 800ad6a:	68ba      	ldr	r2, [r7, #8]
 800ad6c:	429a      	cmp	r2, r3
 800ad6e:	d201      	bcs.n	800ad74 <load_xdir+0xd8>
 800ad70:	2302      	movs	r3, #2
 800ad72:	e04a      	b.n	800ae0a <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800ad74:	2340      	movs	r3, #64	; 0x40
 800ad76:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800ad78:	2100      	movs	r1, #0
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f7ff fb36 	bl	800a3ec <dir_next>
 800ad80:	4603      	mov	r3, r0
 800ad82:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800ad84:	7bfb      	ldrb	r3, [r7, #15]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d001      	beq.n	800ad8e <load_xdir+0xf2>
 800ad8a:	7bfb      	ldrb	r3, [r7, #15]
 800ad8c:	e03d      	b.n	800ae0a <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad96:	4619      	mov	r1, r3
 800ad98:	4610      	mov	r0, r2
 800ad9a:	f7fe fc07 	bl	80095ac <move_window>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800ada2:	7bfb      	ldrb	r3, [r7, #15]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d001      	beq.n	800adac <load_xdir+0x110>
 800ada8:	7bfb      	ldrb	r3, [r7, #15]
 800adaa:	e02e      	b.n	800ae0a <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	2bc1      	cmp	r3, #193	; 0xc1
 800adb4:	d001      	beq.n	800adba <load_xdir+0x11e>
 800adb6:	2302      	movs	r3, #2
 800adb8:	e027      	b.n	800ae0a <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800adc0:	d208      	bcs.n	800add4 <load_xdir+0x138>
 800adc2:	693a      	ldr	r2, [r7, #16]
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	18d0      	adds	r0, r2, r3
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adcc:	2220      	movs	r2, #32
 800adce:	4619      	mov	r1, r3
 800add0:	f7fe f9be 	bl	8009150 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	3320      	adds	r3, #32
 800add8:	617b      	str	r3, [r7, #20]
 800adda:	697a      	ldr	r2, [r7, #20]
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	429a      	cmp	r2, r3
 800ade0:	d3ca      	bcc.n	800ad78 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800ade8:	d80e      	bhi.n	800ae08 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800adea:	6938      	ldr	r0, [r7, #16]
 800adec:	f7ff fe6c 	bl	800aac8 <xdir_sum>
 800adf0:	4603      	mov	r3, r0
 800adf2:	461c      	mov	r4, r3
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	3302      	adds	r3, #2
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7fd ffe3 	bl	8008dc4 <ld_word>
 800adfe:	4603      	mov	r3, r0
 800ae00:	429c      	cmp	r4, r3
 800ae02:	d001      	beq.n	800ae08 <load_xdir+0x16c>
 800ae04:	2302      	movs	r3, #2
 800ae06:	e000      	b.n	800ae0a <load_xdir+0x16e>
	}
	return FR_OK;
 800ae08:	2300      	movs	r3, #0
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	371c      	adds	r7, #28
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd90      	pop	{r4, r7, pc}
 800ae12:	bf00      	nop
 800ae14:	88888889 	.word	0x88888889

0800ae18 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800ae18:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800ae1c:	b084      	sub	sp, #16
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
 800ae22:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	601a      	str	r2, [r3, #0]
	dp->obj.sclust = obj->c_scl;
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	6a1a      	ldr	r2, [r3, #32]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	609a      	str	r2, [r3, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae38:	b2da      	uxtb	r2, r3
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	71da      	strb	r2, [r3, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae42:	469b      	mov	fp, r3
 800ae44:	f04f 0c00 	mov.w	ip, #0
 800ae48:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 800ae4c:	f04f 0200 	mov.w	r2, #0
 800ae50:	ea0b 0301 	and.w	r3, fp, r1
 800ae54:	ea0c 0402 	and.w	r4, ip, r2
 800ae58:	687a      	ldr	r2, [r7, #4]
 800ae5a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	dp->blk_ofs = obj->c_ofs;
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f7ff fa29 	bl	800a2c4 <dir_sdi>
 800ae72:	4603      	mov	r3, r0
 800ae74:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ae76:	7bfb      	ldrb	r3, [r7, #15]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d104      	bne.n	800ae86 <load_obj_dir+0x6e>
		res = load_xdir(dp);		/* Load the object's entry block */
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f7ff ff0d 	bl	800ac9c <load_xdir>
 800ae82:	4603      	mov	r3, r0
 800ae84:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800ae86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3710      	adds	r7, #16
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800ae92 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800ae92:	b590      	push	{r4, r7, lr}
 800ae94:	b087      	sub	sp, #28
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	695b      	ldr	r3, [r3, #20]
 800aea0:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	1c9c      	adds	r4, r3, #2
 800aea6:	68f8      	ldr	r0, [r7, #12]
 800aea8:	f7ff fe0e 	bl	800aac8 <xdir_sum>
 800aeac:	4603      	mov	r3, r0
 800aeae:	4619      	mov	r1, r3
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	f7fe f87f 	bl	8008fb4 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	3301      	adds	r3, #1
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	3301      	adds	r3, #1
 800aebe:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aec4:	4619      	mov	r1, r3
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f7ff f9fc 	bl	800a2c4 <dir_sdi>
 800aecc:	4603      	mov	r3, r0
 800aece:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800aed0:	e026      	b.n	800af20 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681a      	ldr	r2, [r3, #0]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeda:	4619      	mov	r1, r3
 800aedc:	4610      	mov	r0, r2
 800aede:	f7fe fb65 	bl	80095ac <move_window>
 800aee2:	4603      	mov	r3, r0
 800aee4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aee6:	7dfb      	ldrb	r3, [r7, #23]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d11d      	bne.n	800af28 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aef0:	2220      	movs	r2, #32
 800aef2:	68f9      	ldr	r1, [r7, #12]
 800aef4:	4618      	mov	r0, r3
 800aef6:	f7fe f92b 	bl	8009150 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2201      	movs	r2, #1
 800af00:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	3b01      	subs	r3, #1
 800af06:	613b      	str	r3, [r7, #16]
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d00e      	beq.n	800af2c <store_xdir+0x9a>
		dirb += SZDIRE;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	3320      	adds	r3, #32
 800af12:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800af14:	2100      	movs	r1, #0
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f7ff fa68 	bl	800a3ec <dir_next>
 800af1c:	4603      	mov	r3, r0
 800af1e:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800af20:	7dfb      	ldrb	r3, [r7, #23]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d0d5      	beq.n	800aed2 <store_xdir+0x40>
 800af26:	e002      	b.n	800af2e <store_xdir+0x9c>
		if (res != FR_OK) break;
 800af28:	bf00      	nop
 800af2a:	e000      	b.n	800af2e <store_xdir+0x9c>
		if (--nent == 0) break;
 800af2c:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800af2e:	7dfb      	ldrb	r3, [r7, #23]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d002      	beq.n	800af3a <store_xdir+0xa8>
 800af34:	7dfb      	ldrb	r3, [r7, #23]
 800af36:	2b01      	cmp	r3, #1
 800af38:	d101      	bne.n	800af3e <store_xdir+0xac>
 800af3a:	7dfb      	ldrb	r3, [r7, #23]
 800af3c:	e000      	b.n	800af40 <store_xdir+0xae>
 800af3e:	2302      	movs	r3, #2
}
 800af40:	4618      	mov	r0, r3
 800af42:	371c      	adds	r7, #28
 800af44:	46bd      	mov	sp, r7
 800af46:	bd90      	pop	{r4, r7, pc}

0800af48 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800af48:	b590      	push	{r4, r7, lr}
 800af4a:	b085      	sub	sp, #20
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800af52:	2240      	movs	r2, #64	; 0x40
 800af54:	2100      	movs	r1, #0
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f7fe f91b 	bl	8009192 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2285      	movs	r2, #133	; 0x85
 800af60:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	3320      	adds	r3, #32
 800af66:	22c0      	movs	r2, #192	; 0xc0
 800af68:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800af6a:	2300      	movs	r3, #0
 800af6c:	72bb      	strb	r3, [r7, #10]
 800af6e:	2301      	movs	r3, #1
 800af70:	72fb      	strb	r3, [r7, #11]
 800af72:	2301      	movs	r3, #1
 800af74:	813b      	strh	r3, [r7, #8]
 800af76:	2340      	movs	r3, #64	; 0x40
 800af78:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	1c5a      	adds	r2, r3, #1
 800af7e:	60fa      	str	r2, [r7, #12]
 800af80:	687a      	ldr	r2, [r7, #4]
 800af82:	4413      	add	r3, r2
 800af84:	22c1      	movs	r2, #193	; 0xc1
 800af86:	701a      	strb	r2, [r3, #0]
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	1c5a      	adds	r2, r3, #1
 800af8c:	60fa      	str	r2, [r7, #12]
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	4413      	add	r3, r2
 800af92:	2200      	movs	r2, #0
 800af94:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800af96:	893b      	ldrh	r3, [r7, #8]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d00b      	beq.n	800afb4 <create_xdir+0x6c>
 800af9c:	7abb      	ldrb	r3, [r7, #10]
 800af9e:	005b      	lsls	r3, r3, #1
 800afa0:	683a      	ldr	r2, [r7, #0]
 800afa2:	4413      	add	r3, r2
 800afa4:	881b      	ldrh	r3, [r3, #0]
 800afa6:	813b      	strh	r3, [r7, #8]
 800afa8:	893b      	ldrh	r3, [r7, #8]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d002      	beq.n	800afb4 <create_xdir+0x6c>
 800afae:	7abb      	ldrb	r3, [r7, #10]
 800afb0:	3301      	adds	r3, #1
 800afb2:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	4413      	add	r3, r2
 800afba:	893a      	ldrh	r2, [r7, #8]
 800afbc:	4611      	mov	r1, r2
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7fd fff8 	bl	8008fb4 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	3302      	adds	r3, #2
 800afc8:	60fb      	str	r3, [r7, #12]
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f003 031f 	and.w	r3, r3, #31
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d1e0      	bne.n	800af96 <create_xdir+0x4e>
		nb++;
 800afd4:	7afb      	ldrb	r3, [r7, #11]
 800afd6:	3301      	adds	r3, #1
 800afd8:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800afda:	7abb      	ldrb	r3, [r7, #10]
 800afdc:	005b      	lsls	r3, r3, #1
 800afde:	683a      	ldr	r2, [r7, #0]
 800afe0:	4413      	add	r3, r2
 800afe2:	881b      	ldrh	r3, [r3, #0]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d1c8      	bne.n	800af7a <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	3323      	adds	r3, #35	; 0x23
 800afec:	7aba      	ldrb	r2, [r7, #10]
 800afee:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	3301      	adds	r3, #1
 800aff4:	7afa      	ldrb	r2, [r7, #11]
 800aff6:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800affe:	6838      	ldr	r0, [r7, #0]
 800b000:	f7ff fd95 	bl	800ab2e <xname_sum>
 800b004:	4603      	mov	r3, r0
 800b006:	4619      	mov	r1, r3
 800b008:	4620      	mov	r0, r4
 800b00a:	f7fd ffd3 	bl	8008fb4 <st_word>
}
 800b00e:	bf00      	nop
 800b010:	3714      	adds	r7, #20
 800b012:	46bd      	mov	sp, r7
 800b014:	bd90      	pop	{r4, r7, pc}

0800b016 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800b016:	b580      	push	{r7, lr}
 800b018:	b086      	sub	sp, #24
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	6078      	str	r0, [r7, #4]
 800b01e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800b020:	2304      	movs	r3, #4
 800b022:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800b02a:	23ff      	movs	r3, #255	; 0xff
 800b02c:	757b      	strb	r3, [r7, #21]
 800b02e:	23ff      	movs	r3, #255	; 0xff
 800b030:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800b032:	e09f      	b.n	800b174 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b038:	4619      	mov	r1, r3
 800b03a:	6938      	ldr	r0, [r7, #16]
 800b03c:	f7fe fab6 	bl	80095ac <move_window>
 800b040:	4603      	mov	r3, r0
 800b042:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b044:	7dfb      	ldrb	r3, [r7, #23]
 800b046:	2b00      	cmp	r3, #0
 800b048:	f040 809a 	bne.w	800b180 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800b054:	7dbb      	ldrb	r3, [r7, #22]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d102      	bne.n	800b060 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b05a:	2304      	movs	r3, #4
 800b05c:	75fb      	strb	r3, [r7, #23]
 800b05e:	e096      	b.n	800b18e <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	781b      	ldrb	r3, [r3, #0]
 800b064:	2b04      	cmp	r3, #4
 800b066:	d118      	bne.n	800b09a <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800b068:	7dbb      	ldrb	r3, [r7, #22]
 800b06a:	2b85      	cmp	r3, #133	; 0x85
 800b06c:	d179      	bne.n	800b162 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f7ff fe10 	bl	800ac9c <load_xdir>
 800b07c:	4603      	mov	r3, r0
 800b07e:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800b080:	7dfb      	ldrb	r3, [r7, #23]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d17e      	bne.n	800b184 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	695b      	ldr	r3, [r3, #20]
 800b08a:	3304      	adds	r3, #4
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b092:	b2da      	uxtb	r2, r3
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	719a      	strb	r2, [r3, #6]
					}
					break;
 800b098:	e074      	b.n	800b184 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b09e:	330b      	adds	r3, #11
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0a6:	73fb      	strb	r3, [r7, #15]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	7bfa      	ldrb	r2, [r7, #15]
 800b0ac:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800b0ae:	7dbb      	ldrb	r3, [r7, #22]
 800b0b0:	2be5      	cmp	r3, #229	; 0xe5
 800b0b2:	d00e      	beq.n	800b0d2 <dir_read+0xbc>
 800b0b4:	7dbb      	ldrb	r3, [r7, #22]
 800b0b6:	2b2e      	cmp	r3, #46	; 0x2e
 800b0b8:	d00b      	beq.n	800b0d2 <dir_read+0xbc>
 800b0ba:	7bfb      	ldrb	r3, [r7, #15]
 800b0bc:	f023 0320 	bic.w	r3, r3, #32
 800b0c0:	2b08      	cmp	r3, #8
 800b0c2:	bf0c      	ite	eq
 800b0c4:	2301      	moveq	r3, #1
 800b0c6:	2300      	movne	r3, #0
 800b0c8:	b2db      	uxtb	r3, r3
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d002      	beq.n	800b0d8 <dir_read+0xc2>
				ord = 0xFF;
 800b0d2:	23ff      	movs	r3, #255	; 0xff
 800b0d4:	757b      	strb	r3, [r7, #21]
 800b0d6:	e044      	b.n	800b162 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800b0d8:	7bfb      	ldrb	r3, [r7, #15]
 800b0da:	2b0f      	cmp	r3, #15
 800b0dc:	d12f      	bne.n	800b13e <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800b0de:	7dbb      	ldrb	r3, [r7, #22]
 800b0e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d00d      	beq.n	800b104 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0ec:	7b5b      	ldrb	r3, [r3, #13]
 800b0ee:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800b0f0:	7dbb      	ldrb	r3, [r7, #22]
 800b0f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0f6:	75bb      	strb	r3, [r7, #22]
 800b0f8:	7dbb      	ldrb	r3, [r7, #22]
 800b0fa:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b104:	7dba      	ldrb	r2, [r7, #22]
 800b106:	7d7b      	ldrb	r3, [r7, #21]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d115      	bne.n	800b138 <dir_read+0x122>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b110:	330d      	adds	r3, #13
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	7d3a      	ldrb	r2, [r7, #20]
 800b116:	429a      	cmp	r2, r3
 800b118:	d10e      	bne.n	800b138 <dir_read+0x122>
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	691a      	ldr	r2, [r3, #16]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b122:	4619      	mov	r1, r3
 800b124:	4610      	mov	r0, r2
 800b126:	f7ff fb53 	bl	800a7d0 <pick_lfn>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d003      	beq.n	800b138 <dir_read+0x122>
 800b130:	7d7b      	ldrb	r3, [r7, #21]
 800b132:	3b01      	subs	r3, #1
 800b134:	b2db      	uxtb	r3, r3
 800b136:	e000      	b.n	800b13a <dir_read+0x124>
 800b138:	23ff      	movs	r3, #255	; 0xff
 800b13a:	757b      	strb	r3, [r7, #21]
 800b13c:	e011      	b.n	800b162 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800b13e:	7d7b      	ldrb	r3, [r7, #21]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d109      	bne.n	800b158 <dir_read+0x142>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b148:	4618      	mov	r0, r3
 800b14a:	f7ff fc9c 	bl	800aa86 <sum_sfn>
 800b14e:	4603      	mov	r3, r0
 800b150:	461a      	mov	r2, r3
 800b152:	7d3b      	ldrb	r3, [r7, #20]
 800b154:	4293      	cmp	r3, r2
 800b156:	d017      	beq.n	800b188 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f04f 32ff 	mov.w	r2, #4294967295
 800b15e:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800b160:	e012      	b.n	800b188 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800b162:	2100      	movs	r1, #0
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f7ff f941 	bl	800a3ec <dir_next>
 800b16a:	4603      	mov	r3, r0
 800b16c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b16e:	7dfb      	ldrb	r3, [r7, #23]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d10b      	bne.n	800b18c <dir_read+0x176>
	while (dp->sect) {
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b178:	2b00      	cmp	r3, #0
 800b17a:	f47f af5b 	bne.w	800b034 <dir_read+0x1e>
 800b17e:	e006      	b.n	800b18e <dir_read+0x178>
		if (res != FR_OK) break;
 800b180:	bf00      	nop
 800b182:	e004      	b.n	800b18e <dir_read+0x178>
					break;
 800b184:	bf00      	nop
 800b186:	e002      	b.n	800b18e <dir_read+0x178>
					break;
 800b188:	bf00      	nop
 800b18a:	e000      	b.n	800b18e <dir_read+0x178>
		if (res != FR_OK) break;
 800b18c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800b18e:	7dfb      	ldrb	r3, [r7, #23]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d002      	beq.n	800b19a <dir_read+0x184>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2200      	movs	r2, #0
 800b198:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800b19a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3718      	adds	r7, #24
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b1a4:	b590      	push	{r4, r7, lr}
 800b1a6:	b089      	sub	sp, #36	; 0x24
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b1b2:	2100      	movs	r1, #0
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f7ff f885 	bl	800a2c4 <dir_sdi>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800b1be:	7ffb      	ldrb	r3, [r7, #31]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d001      	beq.n	800b1c8 <dir_find+0x24>
 800b1c4:	7ffb      	ldrb	r3, [r7, #31]
 800b1c6:	e112      	b.n	800b3ee <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	2b04      	cmp	r3, #4
 800b1ce:	d164      	bne.n	800b29a <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	691b      	ldr	r3, [r3, #16]
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f7ff fcaa 	bl	800ab2e <xname_sum>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800b1de:	e04f      	b.n	800b280 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	695b      	ldr	r3, [r3, #20]
 800b1e4:	3324      	adds	r3, #36	; 0x24
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7fd fdec 	bl	8008dc4 <ld_word>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	893b      	ldrh	r3, [r7, #8]
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d000      	beq.n	800b1f8 <dir_find+0x54>
 800b1f6:	e043      	b.n	800b280 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	695b      	ldr	r3, [r3, #20]
 800b1fc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b200:	76fb      	strb	r3, [r7, #27]
 800b202:	2340      	movs	r3, #64	; 0x40
 800b204:	617b      	str	r3, [r7, #20]
 800b206:	2300      	movs	r3, #0
 800b208:	613b      	str	r3, [r7, #16]
 800b20a:	e029      	b.n	800b260 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	f003 031f 	and.w	r3, r3, #31
 800b212:	2b00      	cmp	r3, #0
 800b214:	d102      	bne.n	800b21c <dir_find+0x78>
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	3302      	adds	r3, #2
 800b21a:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	695a      	ldr	r2, [r3, #20]
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	4413      	add	r3, r2
 800b224:	4618      	mov	r0, r3
 800b226:	f7fd fdcd 	bl	8008dc4 <ld_word>
 800b22a:	4603      	mov	r3, r0
 800b22c:	4618      	mov	r0, r3
 800b22e:	f002 fb1b 	bl	800d868 <ff_wtoupper>
 800b232:	4603      	mov	r3, r0
 800b234:	461c      	mov	r4, r3
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	691a      	ldr	r2, [r3, #16]
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	005b      	lsls	r3, r3, #1
 800b23e:	4413      	add	r3, r2
 800b240:	881b      	ldrh	r3, [r3, #0]
 800b242:	4618      	mov	r0, r3
 800b244:	f002 fb10 	bl	800d868 <ff_wtoupper>
 800b248:	4603      	mov	r3, r0
 800b24a:	429c      	cmp	r4, r3
 800b24c:	d10c      	bne.n	800b268 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800b24e:	7efb      	ldrb	r3, [r7, #27]
 800b250:	3b01      	subs	r3, #1
 800b252:	76fb      	strb	r3, [r7, #27]
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	3302      	adds	r3, #2
 800b258:	617b      	str	r3, [r7, #20]
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	3301      	adds	r3, #1
 800b25e:	613b      	str	r3, [r7, #16]
 800b260:	7efb      	ldrb	r3, [r7, #27]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d1d2      	bne.n	800b20c <dir_find+0x68>
 800b266:	e000      	b.n	800b26a <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800b268:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800b26a:	7efb      	ldrb	r3, [r7, #27]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d107      	bne.n	800b280 <dir_find+0xdc>
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	691a      	ldr	r2, [r3, #16]
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	005b      	lsls	r3, r3, #1
 800b278:	4413      	add	r3, r2
 800b27a:	881b      	ldrh	r3, [r3, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d009      	beq.n	800b294 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800b280:	2100      	movs	r1, #0
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f7ff fec7 	bl	800b016 <dir_read>
 800b288:	4603      	mov	r3, r0
 800b28a:	77fb      	strb	r3, [r7, #31]
 800b28c:	7ffb      	ldrb	r3, [r7, #31]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d0a6      	beq.n	800b1e0 <dir_find+0x3c>
 800b292:	e000      	b.n	800b296 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800b294:	bf00      	nop
		}
		return res;
 800b296:	7ffb      	ldrb	r3, [r7, #31]
 800b298:	e0a9      	b.n	800b3ee <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b29a:	23ff      	movs	r3, #255	; 0xff
 800b29c:	773b      	strb	r3, [r7, #28]
 800b29e:	7f3b      	ldrb	r3, [r7, #28]
 800b2a0:	777b      	strb	r3, [r7, #29]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b2a8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	68f8      	ldr	r0, [r7, #12]
 800b2b2:	f7fe f97b 	bl	80095ac <move_window>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800b2ba:	7ffb      	ldrb	r3, [r7, #31]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	f040 8090 	bne.w	800b3e2 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b2ca:	7fbb      	ldrb	r3, [r7, #30]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d102      	bne.n	800b2d6 <dir_find+0x132>
 800b2d0:	2304      	movs	r3, #4
 800b2d2:	77fb      	strb	r3, [r7, #31]
 800b2d4:	e08a      	b.n	800b3ec <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2da:	330b      	adds	r3, #11
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2e2:	72fb      	strb	r3, [r7, #11]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	7afa      	ldrb	r2, [r7, #11]
 800b2e8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b2ea:	7fbb      	ldrb	r3, [r7, #30]
 800b2ec:	2be5      	cmp	r3, #229	; 0xe5
 800b2ee:	d007      	beq.n	800b300 <dir_find+0x15c>
 800b2f0:	7afb      	ldrb	r3, [r7, #11]
 800b2f2:	f003 0308 	and.w	r3, r3, #8
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d009      	beq.n	800b30e <dir_find+0x16a>
 800b2fa:	7afb      	ldrb	r3, [r7, #11]
 800b2fc:	2b0f      	cmp	r3, #15
 800b2fe:	d006      	beq.n	800b30e <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b300:	23ff      	movs	r3, #255	; 0xff
 800b302:	777b      	strb	r3, [r7, #29]
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f04f 32ff 	mov.w	r2, #4294967295
 800b30a:	64da      	str	r2, [r3, #76]	; 0x4c
 800b30c:	e05e      	b.n	800b3cc <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b30e:	7afb      	ldrb	r3, [r7, #11]
 800b310:	2b0f      	cmp	r3, #15
 800b312:	d136      	bne.n	800b382 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800b31a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d154      	bne.n	800b3cc <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b322:	7fbb      	ldrb	r3, [r7, #30]
 800b324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d00d      	beq.n	800b348 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b330:	7b5b      	ldrb	r3, [r3, #13]
 800b332:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b334:	7fbb      	ldrb	r3, [r7, #30]
 800b336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b33a:	77bb      	strb	r3, [r7, #30]
 800b33c:	7fbb      	ldrb	r3, [r7, #30]
 800b33e:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b348:	7fba      	ldrb	r2, [r7, #30]
 800b34a:	7f7b      	ldrb	r3, [r7, #29]
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d115      	bne.n	800b37c <dir_find+0x1d8>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b354:	330d      	adds	r3, #13
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	7f3a      	ldrb	r2, [r7, #28]
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d10e      	bne.n	800b37c <dir_find+0x1d8>
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	691a      	ldr	r2, [r3, #16]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b366:	4619      	mov	r1, r3
 800b368:	4610      	mov	r0, r2
 800b36a:	f7ff f9c1 	bl	800a6f0 <cmp_lfn>
 800b36e:	4603      	mov	r3, r0
 800b370:	2b00      	cmp	r3, #0
 800b372:	d003      	beq.n	800b37c <dir_find+0x1d8>
 800b374:	7f7b      	ldrb	r3, [r7, #29]
 800b376:	3b01      	subs	r3, #1
 800b378:	b2db      	uxtb	r3, r3
 800b37a:	e000      	b.n	800b37e <dir_find+0x1da>
 800b37c:	23ff      	movs	r3, #255	; 0xff
 800b37e:	777b      	strb	r3, [r7, #29]
 800b380:	e024      	b.n	800b3cc <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b382:	7f7b      	ldrb	r3, [r7, #29]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d109      	bne.n	800b39c <dir_find+0x1f8>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b38c:	4618      	mov	r0, r3
 800b38e:	f7ff fb7a 	bl	800aa86 <sum_sfn>
 800b392:	4603      	mov	r3, r0
 800b394:	461a      	mov	r2, r3
 800b396:	7f3b      	ldrb	r3, [r7, #28]
 800b398:	4293      	cmp	r3, r2
 800b39a:	d024      	beq.n	800b3e6 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800b3a2:	f003 0301 	and.w	r3, r3, #1
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d10a      	bne.n	800b3c0 <dir_find+0x21c>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	3340      	adds	r3, #64	; 0x40
 800b3b2:	220b      	movs	r2, #11
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	f7fd ff06 	bl	80091c6 <mem_cmp>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d014      	beq.n	800b3ea <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b3c0:	23ff      	movs	r3, #255	; 0xff
 800b3c2:	777b      	strb	r3, [r7, #29]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b3ca:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b3cc:	2100      	movs	r1, #0
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f7ff f80c 	bl	800a3ec <dir_next>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800b3d8:	7ffb      	ldrb	r3, [r7, #31]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	f43f af65 	beq.w	800b2aa <dir_find+0x106>
 800b3e0:	e004      	b.n	800b3ec <dir_find+0x248>
		if (res != FR_OK) break;
 800b3e2:	bf00      	nop
 800b3e4:	e002      	b.n	800b3ec <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b3e6:	bf00      	nop
 800b3e8:	e000      	b.n	800b3ec <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b3ea:	bf00      	nop

	return res;
 800b3ec:	7ffb      	ldrb	r3, [r7, #31]
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3724      	adds	r7, #36	; 0x24
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd90      	pop	{r4, r7, pc}
	...

0800b3f8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b3f8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800b3fc:	b0a0      	sub	sp, #128	; 0x80
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800b40e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b412:	2b00      	cmp	r3, #0
 800b414:	d001      	beq.n	800b41a <dir_register+0x22>
 800b416:	2306      	movs	r3, #6
 800b418:	e198      	b.n	800b74c <dir_register+0x354>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b41a:	2300      	movs	r3, #0
 800b41c:	677b      	str	r3, [r7, #116]	; 0x74
 800b41e:	e002      	b.n	800b426 <dir_register+0x2e>
 800b420:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b422:	3301      	adds	r3, #1
 800b424:	677b      	str	r3, [r7, #116]	; 0x74
 800b426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b428:	691a      	ldr	r2, [r3, #16]
 800b42a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b42c:	005b      	lsls	r3, r3, #1
 800b42e:	4413      	add	r3, r2
 800b430:	881b      	ldrh	r3, [r3, #0]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d1f4      	bne.n	800b420 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	2b04      	cmp	r3, #4
 800b43c:	f040 80a9 	bne.w	800b592 <dir_register+0x19a>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800b440:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b442:	330e      	adds	r3, #14
 800b444:	4aa7      	ldr	r2, [pc, #668]	; (800b6e4 <dir_register+0x2ec>)
 800b446:	fba2 2303 	umull	r2, r3, r2, r3
 800b44a:	08db      	lsrs	r3, r3, #3
 800b44c:	3302      	adds	r3, #2
 800b44e:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800b450:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f7ff f8b0 	bl	800a5b8 <dir_alloc>
 800b458:	4603      	mov	r3, r0
 800b45a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800b45e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b462:	2b00      	cmp	r3, #0
 800b464:	d002      	beq.n	800b46c <dir_register+0x74>
 800b466:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b46a:	e16f      	b.n	800b74c <dir_register+0x354>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b470:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b472:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800b476:	3b01      	subs	r3, #1
 800b478:	015b      	lsls	r3, r3, #5
 800b47a:	1ad2      	subs	r2, r2, r3
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	689b      	ldr	r3, [r3, #8]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d07a      	beq.n	800b57e <dir_register+0x186>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	79db      	ldrb	r3, [r3, #7]
 800b48c:	f003 0304 	and.w	r3, r3, #4
 800b490:	2b00      	cmp	r3, #0
 800b492:	d074      	beq.n	800b57e <dir_register+0x186>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 800b49a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b49c:	895b      	ldrh	r3, [r3, #10]
 800b49e:	4618      	mov	r0, r3
 800b4a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4a2:	899b      	ldrh	r3, [r3, #12]
 800b4a4:	fb03 f300 	mul.w	r3, r3, r0
 800b4a8:	469b      	mov	fp, r3
 800b4aa:	f04f 0c00 	mov.w	ip, #0
 800b4ae:	eb1b 0301 	adds.w	r3, fp, r1
 800b4b2:	eb4c 0402 	adc.w	r4, ip, r2
 800b4b6:	687a      	ldr	r2, [r7, #4]
 800b4b8:	e9c2 3404 	strd	r3, r4, [r2, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7fe fca4 	bl	8009e0c <fill_first_frag>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800b4ca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d002      	beq.n	800b4d8 <dir_register+0xe0>
 800b4d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b4d6:	e139      	b.n	800b74c <dir_register+0x354>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4de:	f04f 32ff 	mov.w	r2, #4294967295
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	f7fe fcc1 	bl	8009e6a <fill_last_frag>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800b4ee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d002      	beq.n	800b4fc <dir_register+0x104>
 800b4f6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b4fa:	e127      	b.n	800b74c <dir_register+0x354>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800b4fc:	687a      	ldr	r2, [r7, #4]
 800b4fe:	f107 0308 	add.w	r3, r7, #8
 800b502:	4611      	mov	r1, r2
 800b504:	4618      	mov	r0, r3
 800b506:	f7ff fc87 	bl	800ae18 <load_obj_dir>
 800b50a:	4603      	mov	r3, r0
 800b50c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800b510:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b514:	2b00      	cmp	r3, #0
 800b516:	d002      	beq.n	800b51e <dir_register+0x126>
 800b518:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b51c:	e116      	b.n	800b74c <dir_register+0x354>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800b51e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b520:	695b      	ldr	r3, [r3, #20]
 800b522:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800b52c:	461a      	mov	r2, r3
 800b52e:	4623      	mov	r3, r4
 800b530:	4608      	mov	r0, r1
 800b532:	f7fd fd86 	bl	8009042 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800b536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b538:	695b      	ldr	r3, [r3, #20]
 800b53a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800b544:	461a      	mov	r2, r3
 800b546:	4623      	mov	r3, r4
 800b548:	4608      	mov	r0, r1
 800b54a:	f7fd fd7a 	bl	8009042 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	79da      	ldrb	r2, [r3, #7]
 800b552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b554:	695b      	ldr	r3, [r3, #20]
 800b556:	3321      	adds	r3, #33	; 0x21
 800b558:	f042 0201 	orr.w	r2, r2, #1
 800b55c:	b2d2      	uxtb	r2, r2
 800b55e:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800b560:	f107 0308 	add.w	r3, r7, #8
 800b564:	4618      	mov	r0, r3
 800b566:	f7ff fc94 	bl	800ae92 <store_xdir>
 800b56a:	4603      	mov	r3, r0
 800b56c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800b570:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b574:	2b00      	cmp	r3, #0
 800b576:	d002      	beq.n	800b57e <dir_register+0x186>
 800b578:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b57c:	e0e6      	b.n	800b74c <dir_register+0x354>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800b57e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b580:	695a      	ldr	r2, [r3, #20]
 800b582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b584:	691b      	ldr	r3, [r3, #16]
 800b586:	4619      	mov	r1, r3
 800b588:	4610      	mov	r0, r2
 800b58a:	f7ff fcdd 	bl	800af48 <create_xdir>
		return FR_OK;
 800b58e:	2300      	movs	r3, #0
 800b590:	e0dc      	b.n	800b74c <dir_register+0x354>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800b598:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b59c:	220c      	movs	r2, #12
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7fd fdd6 	bl	8009150 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b5a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b5a8:	f003 0301 	and.w	r3, r3, #1
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d033      	beq.n	800b618 <dir_register+0x220>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2240      	movs	r2, #64	; 0x40
 800b5b4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	67bb      	str	r3, [r7, #120]	; 0x78
 800b5bc:	e016      	b.n	800b5ec <dir_register+0x1f4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800b5c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5c6:	691a      	ldr	r2, [r3, #16]
 800b5c8:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800b5cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b5ce:	f7ff f9cb 	bl	800a968 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f7ff fde6 	bl	800b1a4 <dir_find>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800b5de:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d106      	bne.n	800b5f4 <dir_register+0x1fc>
		for (n = 1; n < 100; n++) {
 800b5e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	67bb      	str	r3, [r7, #120]	; 0x78
 800b5ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b5ee:	2b63      	cmp	r3, #99	; 0x63
 800b5f0:	d9e5      	bls.n	800b5be <dir_register+0x1c6>
 800b5f2:	e000      	b.n	800b5f6 <dir_register+0x1fe>
			if (res != FR_OK) break;
 800b5f4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b5f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b5f8:	2b64      	cmp	r3, #100	; 0x64
 800b5fa:	d101      	bne.n	800b600 <dir_register+0x208>
 800b5fc:	2307      	movs	r3, #7
 800b5fe:	e0a5      	b.n	800b74c <dir_register+0x354>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b600:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b604:	2b04      	cmp	r3, #4
 800b606:	d002      	beq.n	800b60e <dir_register+0x216>
 800b608:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b60c:	e09e      	b.n	800b74c <dir_register+0x354>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b60e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b618:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b61c:	f003 0302 	and.w	r3, r3, #2
 800b620:	2b00      	cmp	r3, #0
 800b622:	d007      	beq.n	800b634 <dir_register+0x23c>
 800b624:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b626:	330c      	adds	r3, #12
 800b628:	4a2f      	ldr	r2, [pc, #188]	; (800b6e8 <dir_register+0x2f0>)
 800b62a:	fba2 2303 	umull	r2, r3, r2, r3
 800b62e:	089b      	lsrs	r3, r3, #2
 800b630:	3301      	adds	r3, #1
 800b632:	e000      	b.n	800b636 <dir_register+0x23e>
 800b634:	2301      	movs	r3, #1
 800b636:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b638:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f7fe ffbc 	bl	800a5b8 <dir_alloc>
 800b640:	4603      	mov	r3, r0
 800b642:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b646:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d14f      	bne.n	800b6ee <dir_register+0x2f6>
 800b64e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b650:	3b01      	subs	r3, #1
 800b652:	673b      	str	r3, [r7, #112]	; 0x70
 800b654:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b656:	2b00      	cmp	r3, #0
 800b658:	d049      	beq.n	800b6ee <dir_register+0x2f6>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b65e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b660:	015b      	lsls	r3, r3, #5
 800b662:	1ad3      	subs	r3, r2, r3
 800b664:	4619      	mov	r1, r3
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f7fe fe2c 	bl	800a2c4 <dir_sdi>
 800b66c:	4603      	mov	r3, r0
 800b66e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800b672:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b676:	2b00      	cmp	r3, #0
 800b678:	d139      	bne.n	800b6ee <dir_register+0x2f6>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	3340      	adds	r3, #64	; 0x40
 800b67e:	4618      	mov	r0, r3
 800b680:	f7ff fa01 	bl	800aa86 <sum_sfn>
 800b684:	4603      	mov	r3, r0
 800b686:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b68e:	4619      	mov	r1, r3
 800b690:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b692:	f7fd ff8b 	bl	80095ac <move_window>
 800b696:	4603      	mov	r3, r0
 800b698:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800b69c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d123      	bne.n	800b6ec <dir_register+0x2f4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b6a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6a6:	6918      	ldr	r0, [r3, #16]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800b6ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b6ae:	b2da      	uxtb	r2, r3
 800b6b0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800b6b4:	f7ff f8f0 	bl	800a898 <put_lfn>
				fs->wflag = 1;
 800b6b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b6be:	2100      	movs	r1, #0
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f7fe fe93 	bl	800a3ec <dir_next>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800b6cc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d10c      	bne.n	800b6ee <dir_register+0x2f6>
 800b6d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b6d6:	3b01      	subs	r3, #1
 800b6d8:	673b      	str	r3, [r7, #112]	; 0x70
 800b6da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d1d4      	bne.n	800b68a <dir_register+0x292>
 800b6e0:	e005      	b.n	800b6ee <dir_register+0x2f6>
 800b6e2:	bf00      	nop
 800b6e4:	88888889 	.word	0x88888889
 800b6e8:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800b6ec:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b6ee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d128      	bne.n	800b748 <dir_register+0x350>
		res = move_window(fs, dp->sect);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b6fe:	f7fd ff55 	bl	80095ac <move_window>
 800b702:	4603      	mov	r3, r0
 800b704:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800b708:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d11b      	bne.n	800b748 <dir_register+0x350>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b714:	2220      	movs	r2, #32
 800b716:	2100      	movs	r1, #0
 800b718:	4618      	mov	r0, r3
 800b71a:	f7fd fd3a 	bl	8009192 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	3340      	adds	r3, #64	; 0x40
 800b726:	220b      	movs	r2, #11
 800b728:	4619      	mov	r1, r3
 800b72a:	f7fd fd11 	bl	8009150 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b738:	330c      	adds	r3, #12
 800b73a:	f002 0218 	and.w	r2, r2, #24
 800b73e:	b2d2      	uxtb	r2, r2
 800b740:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b744:	2201      	movs	r2, #1
 800b746:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b748:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3780      	adds	r7, #128	; 0x80
 800b750:	46bd      	mov	sp, r7
 800b752:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800b756:	bf00      	nop

0800b758 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b758:	b590      	push	{r4, r7, lr}
 800b75a:	b089      	sub	sp, #36	; 0x24
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	2200      	movs	r2, #0
 800b76c:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b772:	2b00      	cmp	r3, #0
 800b774:	f000 80d7 	beq.w	800b926 <get_fileinfo+0x1ce>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	2b04      	cmp	r3, #4
 800b77e:	d106      	bne.n	800b78e <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	695b      	ldr	r3, [r3, #20]
 800b784:	6839      	ldr	r1, [r7, #0]
 800b786:	4618      	mov	r0, r3
 800b788:	f7ff fa05 	bl	800ab96 <get_xdir_info>
		return;
 800b78c:	e0cc      	b.n	800b928 <get_fileinfo+0x1d0>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b792:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b796:	d032      	beq.n	800b7fe <get_fileinfo+0xa6>
			i = j = 0;
 800b798:	2300      	movs	r3, #0
 800b79a:	61bb      	str	r3, [r7, #24]
 800b79c:	69bb      	ldr	r3, [r7, #24]
 800b79e:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b7a0:	e01b      	b.n	800b7da <get_fileinfo+0x82>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800b7a2:	89fb      	ldrh	r3, [r7, #14]
 800b7a4:	2100      	movs	r1, #0
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f002 f822 	bl	800d7f0 <ff_convert>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800b7b0:	89fb      	ldrh	r3, [r7, #14]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d102      	bne.n	800b7bc <get_fileinfo+0x64>
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	61fb      	str	r3, [r7, #28]
 800b7ba:	e01a      	b.n	800b7f2 <get_fileinfo+0x9a>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800b7bc:	69fb      	ldr	r3, [r7, #28]
 800b7be:	2bfe      	cmp	r3, #254	; 0xfe
 800b7c0:	d902      	bls.n	800b7c8 <get_fileinfo+0x70>
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	61fb      	str	r3, [r7, #28]
 800b7c6:	e014      	b.n	800b7f2 <get_fileinfo+0x9a>
				fno->fname[i++] = (TCHAR)w;
 800b7c8:	69fb      	ldr	r3, [r7, #28]
 800b7ca:	1c5a      	adds	r2, r3, #1
 800b7cc:	61fa      	str	r2, [r7, #28]
 800b7ce:	89fa      	ldrh	r2, [r7, #14]
 800b7d0:	b2d1      	uxtb	r1, r2
 800b7d2:	683a      	ldr	r2, [r7, #0]
 800b7d4:	4413      	add	r3, r2
 800b7d6:	460a      	mov	r2, r1
 800b7d8:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	691a      	ldr	r2, [r3, #16]
 800b7de:	69bb      	ldr	r3, [r7, #24]
 800b7e0:	1c59      	adds	r1, r3, #1
 800b7e2:	61b9      	str	r1, [r7, #24]
 800b7e4:	005b      	lsls	r3, r3, #1
 800b7e6:	4413      	add	r3, r2
 800b7e8:	881b      	ldrh	r3, [r3, #0]
 800b7ea:	81fb      	strh	r3, [r7, #14]
 800b7ec:	89fb      	ldrh	r3, [r7, #14]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d1d7      	bne.n	800b7a2 <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800b7f2:	683a      	ldr	r2, [r7, #0]
 800b7f4:	69fb      	ldr	r3, [r7, #28]
 800b7f6:	4413      	add	r3, r2
 800b7f8:	331a      	adds	r3, #26
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800b7fe:	2300      	movs	r3, #0
 800b800:	61bb      	str	r3, [r7, #24]
 800b802:	69bb      	ldr	r3, [r7, #24]
 800b804:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800b806:	683a      	ldr	r2, [r7, #0]
 800b808:	69fb      	ldr	r3, [r7, #28]
 800b80a:	4413      	add	r3, r2
 800b80c:	331a      	adds	r3, #26
 800b80e:	781b      	ldrb	r3, [r3, #0]
 800b810:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800b812:	e04c      	b.n	800b8ae <get_fileinfo+0x156>
		c = (TCHAR)dp->dir[i++];
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b818:	69fb      	ldr	r3, [r7, #28]
 800b81a:	1c59      	adds	r1, r3, #1
 800b81c:	61f9      	str	r1, [r7, #28]
 800b81e:	4413      	add	r3, r2
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b824:	7dfb      	ldrb	r3, [r7, #23]
 800b826:	2b20      	cmp	r3, #32
 800b828:	d100      	bne.n	800b82c <get_fileinfo+0xd4>
 800b82a:	e040      	b.n	800b8ae <get_fileinfo+0x156>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b82c:	7dfb      	ldrb	r3, [r7, #23]
 800b82e:	2b05      	cmp	r3, #5
 800b830:	d101      	bne.n	800b836 <get_fileinfo+0xde>
 800b832:	23e5      	movs	r3, #229	; 0xe5
 800b834:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800b836:	69fb      	ldr	r3, [r7, #28]
 800b838:	2b09      	cmp	r3, #9
 800b83a:	d10f      	bne.n	800b85c <get_fileinfo+0x104>
			if (!lfv) fno->fname[j] = '.';
 800b83c:	89bb      	ldrh	r3, [r7, #12]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d105      	bne.n	800b84e <get_fileinfo+0xf6>
 800b842:	683a      	ldr	r2, [r7, #0]
 800b844:	69bb      	ldr	r3, [r7, #24]
 800b846:	4413      	add	r3, r2
 800b848:	331a      	adds	r3, #26
 800b84a:	222e      	movs	r2, #46	; 0x2e
 800b84c:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800b84e:	69bb      	ldr	r3, [r7, #24]
 800b850:	1c5a      	adds	r2, r3, #1
 800b852:	61ba      	str	r2, [r7, #24]
 800b854:	683a      	ldr	r2, [r7, #0]
 800b856:	4413      	add	r3, r2
 800b858:	222e      	movs	r2, #46	; 0x2e
 800b85a:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800b85c:	683a      	ldr	r2, [r7, #0]
 800b85e:	69bb      	ldr	r3, [r7, #24]
 800b860:	4413      	add	r3, r2
 800b862:	330d      	adds	r3, #13
 800b864:	7dfa      	ldrb	r2, [r7, #23]
 800b866:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800b868:	89bb      	ldrh	r3, [r7, #12]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d11c      	bne.n	800b8a8 <get_fileinfo+0x150>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800b86e:	7dfb      	ldrb	r3, [r7, #23]
 800b870:	2b40      	cmp	r3, #64	; 0x40
 800b872:	d913      	bls.n	800b89c <get_fileinfo+0x144>
 800b874:	7dfb      	ldrb	r3, [r7, #23]
 800b876:	2b5a      	cmp	r3, #90	; 0x5a
 800b878:	d810      	bhi.n	800b89c <get_fileinfo+0x144>
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b87e:	330c      	adds	r3, #12
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	461a      	mov	r2, r3
 800b884:	69fb      	ldr	r3, [r7, #28]
 800b886:	2b08      	cmp	r3, #8
 800b888:	d901      	bls.n	800b88e <get_fileinfo+0x136>
 800b88a:	2310      	movs	r3, #16
 800b88c:	e000      	b.n	800b890 <get_fileinfo+0x138>
 800b88e:	2308      	movs	r3, #8
 800b890:	4013      	ands	r3, r2
 800b892:	2b00      	cmp	r3, #0
 800b894:	d002      	beq.n	800b89c <get_fileinfo+0x144>
				c += 0x20;			/* To lower */
 800b896:	7dfb      	ldrb	r3, [r7, #23]
 800b898:	3320      	adds	r3, #32
 800b89a:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800b89c:	683a      	ldr	r2, [r7, #0]
 800b89e:	69bb      	ldr	r3, [r7, #24]
 800b8a0:	4413      	add	r3, r2
 800b8a2:	331a      	adds	r3, #26
 800b8a4:	7dfa      	ldrb	r2, [r7, #23]
 800b8a6:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800b8a8:	69bb      	ldr	r3, [r7, #24]
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800b8ae:	69fb      	ldr	r3, [r7, #28]
 800b8b0:	2b0a      	cmp	r3, #10
 800b8b2:	d9af      	bls.n	800b814 <get_fileinfo+0xbc>
	}
	if (!lfv) {
 800b8b4:	89bb      	ldrh	r3, [r7, #12]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d10d      	bne.n	800b8d6 <get_fileinfo+0x17e>
		fno->fname[j] = 0;
 800b8ba:	683a      	ldr	r2, [r7, #0]
 800b8bc:	69bb      	ldr	r3, [r7, #24]
 800b8be:	4413      	add	r3, r2
 800b8c0:	331a      	adds	r3, #26
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8ca:	330c      	adds	r3, #12
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d101      	bne.n	800b8d6 <get_fileinfo+0x17e>
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800b8d6:	683a      	ldr	r2, [r7, #0]
 800b8d8:	69bb      	ldr	r3, [r7, #24]
 800b8da:	4413      	add	r3, r2
 800b8dc:	330d      	adds	r3, #13
 800b8de:	2200      	movs	r2, #0
 800b8e0:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8e6:	7ada      	ldrb	r2, [r3, #11]
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8f0:	331c      	adds	r3, #28
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7fd fa7e 	bl	8008df4 <ld_dword>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	f04f 0400 	mov.w	r4, #0
 800b8fe:	683a      	ldr	r2, [r7, #0]
 800b900:	e9c2 3400 	strd	r3, r4, [r2]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b908:	3316      	adds	r3, #22
 800b90a:	4618      	mov	r0, r3
 800b90c:	f7fd fa72 	bl	8008df4 <ld_dword>
 800b910:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	b29a      	uxth	r2, r3
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	815a      	strh	r2, [r3, #10]
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	0c1b      	lsrs	r3, r3, #16
 800b91e:	b29a      	uxth	r2, r3
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	811a      	strh	r2, [r3, #8]
 800b924:	e000      	b.n	800b928 <get_fileinfo+0x1d0>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b926:	bf00      	nop
}
 800b928:	3724      	adds	r7, #36	; 0x24
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd90      	pop	{r4, r7, pc}
	...

0800b930 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b08a      	sub	sp, #40	; 0x28
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	613b      	str	r3, [r7, #16]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	691b      	ldr	r3, [r3, #16]
 800b946:	60fb      	str	r3, [r7, #12]
 800b948:	2300      	movs	r3, #0
 800b94a:	617b      	str	r3, [r7, #20]
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b950:	69bb      	ldr	r3, [r7, #24]
 800b952:	1c5a      	adds	r2, r3, #1
 800b954:	61ba      	str	r2, [r7, #24]
 800b956:	693a      	ldr	r2, [r7, #16]
 800b958:	4413      	add	r3, r2
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b95e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b960:	2b1f      	cmp	r3, #31
 800b962:	d940      	bls.n	800b9e6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b964:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b966:	2b2f      	cmp	r3, #47	; 0x2f
 800b968:	d006      	beq.n	800b978 <create_name+0x48>
 800b96a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b96c:	2b5c      	cmp	r3, #92	; 0x5c
 800b96e:	d110      	bne.n	800b992 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b970:	e002      	b.n	800b978 <create_name+0x48>
 800b972:	69bb      	ldr	r3, [r7, #24]
 800b974:	3301      	adds	r3, #1
 800b976:	61bb      	str	r3, [r7, #24]
 800b978:	693a      	ldr	r2, [r7, #16]
 800b97a:	69bb      	ldr	r3, [r7, #24]
 800b97c:	4413      	add	r3, r2
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	2b2f      	cmp	r3, #47	; 0x2f
 800b982:	d0f6      	beq.n	800b972 <create_name+0x42>
 800b984:	693a      	ldr	r2, [r7, #16]
 800b986:	69bb      	ldr	r3, [r7, #24]
 800b988:	4413      	add	r3, r2
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	2b5c      	cmp	r3, #92	; 0x5c
 800b98e:	d0f0      	beq.n	800b972 <create_name+0x42>
			break;
 800b990:	e02a      	b.n	800b9e8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	2bfe      	cmp	r3, #254	; 0xfe
 800b996:	d901      	bls.n	800b99c <create_name+0x6c>
 800b998:	2306      	movs	r3, #6
 800b99a:	e177      	b.n	800bc8c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b99c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b9a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9a4:	2101      	movs	r1, #1
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f001 ff22 	bl	800d7f0 <ff_convert>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b9b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d101      	bne.n	800b9ba <create_name+0x8a>
 800b9b6:	2306      	movs	r3, #6
 800b9b8:	e168      	b.n	800bc8c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b9ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9bc:	2b7f      	cmp	r3, #127	; 0x7f
 800b9be:	d809      	bhi.n	800b9d4 <create_name+0xa4>
 800b9c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	48b3      	ldr	r0, [pc, #716]	; (800bc94 <create_name+0x364>)
 800b9c6:	f7fd fc25 	bl	8009214 <chk_chr>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d001      	beq.n	800b9d4 <create_name+0xa4>
 800b9d0:	2306      	movs	r3, #6
 800b9d2:	e15b      	b.n	800bc8c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	1c5a      	adds	r2, r3, #1
 800b9d8:	617a      	str	r2, [r7, #20]
 800b9da:	005b      	lsls	r3, r3, #1
 800b9dc:	68fa      	ldr	r2, [r7, #12]
 800b9de:	4413      	add	r3, r2
 800b9e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b9e2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b9e4:	e7b4      	b.n	800b950 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b9e6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b9e8:	693a      	ldr	r2, [r7, #16]
 800b9ea:	69bb      	ldr	r3, [r7, #24]
 800b9ec:	441a      	add	r2, r3
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b9f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9f4:	2b1f      	cmp	r3, #31
 800b9f6:	d801      	bhi.n	800b9fc <create_name+0xcc>
 800b9f8:	2304      	movs	r3, #4
 800b9fa:	e000      	b.n	800b9fe <create_name+0xce>
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ba02:	e011      	b.n	800ba28 <create_name+0xf8>
		w = lfn[di - 1];
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ba0a:	3b01      	subs	r3, #1
 800ba0c:	005b      	lsls	r3, r3, #1
 800ba0e:	68fa      	ldr	r2, [r7, #12]
 800ba10:	4413      	add	r3, r2
 800ba12:	881b      	ldrh	r3, [r3, #0]
 800ba14:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800ba16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba18:	2b20      	cmp	r3, #32
 800ba1a:	d002      	beq.n	800ba22 <create_name+0xf2>
 800ba1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba1e:	2b2e      	cmp	r3, #46	; 0x2e
 800ba20:	d106      	bne.n	800ba30 <create_name+0x100>
		di--;
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	3b01      	subs	r3, #1
 800ba26:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d1ea      	bne.n	800ba04 <create_name+0xd4>
 800ba2e:	e000      	b.n	800ba32 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ba30:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	005b      	lsls	r3, r3, #1
 800ba36:	68fa      	ldr	r2, [r7, #12]
 800ba38:	4413      	add	r3, r2
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d101      	bne.n	800ba48 <create_name+0x118>
 800ba44:	2306      	movs	r3, #6
 800ba46:	e121      	b.n	800bc8c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	3340      	adds	r3, #64	; 0x40
 800ba4c:	220b      	movs	r2, #11
 800ba4e:	2120      	movs	r1, #32
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7fd fb9e 	bl	8009192 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ba56:	2300      	movs	r3, #0
 800ba58:	61bb      	str	r3, [r7, #24]
 800ba5a:	e002      	b.n	800ba62 <create_name+0x132>
 800ba5c:	69bb      	ldr	r3, [r7, #24]
 800ba5e:	3301      	adds	r3, #1
 800ba60:	61bb      	str	r3, [r7, #24]
 800ba62:	69bb      	ldr	r3, [r7, #24]
 800ba64:	005b      	lsls	r3, r3, #1
 800ba66:	68fa      	ldr	r2, [r7, #12]
 800ba68:	4413      	add	r3, r2
 800ba6a:	881b      	ldrh	r3, [r3, #0]
 800ba6c:	2b20      	cmp	r3, #32
 800ba6e:	d0f5      	beq.n	800ba5c <create_name+0x12c>
 800ba70:	69bb      	ldr	r3, [r7, #24]
 800ba72:	005b      	lsls	r3, r3, #1
 800ba74:	68fa      	ldr	r2, [r7, #12]
 800ba76:	4413      	add	r3, r2
 800ba78:	881b      	ldrh	r3, [r3, #0]
 800ba7a:	2b2e      	cmp	r3, #46	; 0x2e
 800ba7c:	d0ee      	beq.n	800ba5c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ba7e:	69bb      	ldr	r3, [r7, #24]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d009      	beq.n	800ba98 <create_name+0x168>
 800ba84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba88:	f043 0303 	orr.w	r3, r3, #3
 800ba8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ba90:	e002      	b.n	800ba98 <create_name+0x168>
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	3b01      	subs	r3, #1
 800ba96:	617b      	str	r3, [r7, #20]
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d009      	beq.n	800bab2 <create_name+0x182>
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800baa4:	3b01      	subs	r3, #1
 800baa6:	005b      	lsls	r3, r3, #1
 800baa8:	68fa      	ldr	r2, [r7, #12]
 800baaa:	4413      	add	r3, r2
 800baac:	881b      	ldrh	r3, [r3, #0]
 800baae:	2b2e      	cmp	r3, #46	; 0x2e
 800bab0:	d1ef      	bne.n	800ba92 <create_name+0x162>

	i = b = 0; ni = 8;
 800bab2:	2300      	movs	r3, #0
 800bab4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bab8:	2300      	movs	r3, #0
 800baba:	623b      	str	r3, [r7, #32]
 800babc:	2308      	movs	r3, #8
 800babe:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800bac0:	69bb      	ldr	r3, [r7, #24]
 800bac2:	1c5a      	adds	r2, r3, #1
 800bac4:	61ba      	str	r2, [r7, #24]
 800bac6:	005b      	lsls	r3, r3, #1
 800bac8:	68fa      	ldr	r2, [r7, #12]
 800baca:	4413      	add	r3, r2
 800bacc:	881b      	ldrh	r3, [r3, #0]
 800bace:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800bad0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	f000 8090 	beq.w	800bbf8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800bad8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bada:	2b20      	cmp	r3, #32
 800badc:	d006      	beq.n	800baec <create_name+0x1bc>
 800bade:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bae0:	2b2e      	cmp	r3, #46	; 0x2e
 800bae2:	d10a      	bne.n	800bafa <create_name+0x1ca>
 800bae4:	69ba      	ldr	r2, [r7, #24]
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	429a      	cmp	r2, r3
 800baea:	d006      	beq.n	800bafa <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800baec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800baf0:	f043 0303 	orr.w	r3, r3, #3
 800baf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800baf8:	e07d      	b.n	800bbf6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800bafa:	6a3a      	ldr	r2, [r7, #32]
 800bafc:	69fb      	ldr	r3, [r7, #28]
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d203      	bcs.n	800bb0a <create_name+0x1da>
 800bb02:	69ba      	ldr	r2, [r7, #24]
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d123      	bne.n	800bb52 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800bb0a:	69fb      	ldr	r3, [r7, #28]
 800bb0c:	2b0b      	cmp	r3, #11
 800bb0e:	d106      	bne.n	800bb1e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800bb10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb14:	f043 0303 	orr.w	r3, r3, #3
 800bb18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bb1c:	e06f      	b.n	800bbfe <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800bb1e:	69ba      	ldr	r2, [r7, #24]
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d005      	beq.n	800bb32 <create_name+0x202>
 800bb26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb2a:	f043 0303 	orr.w	r3, r3, #3
 800bb2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800bb32:	69ba      	ldr	r2, [r7, #24]
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d860      	bhi.n	800bbfc <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	61bb      	str	r3, [r7, #24]
 800bb3e:	2308      	movs	r3, #8
 800bb40:	623b      	str	r3, [r7, #32]
 800bb42:	230b      	movs	r3, #11
 800bb44:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800bb46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bb4a:	009b      	lsls	r3, r3, #2
 800bb4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bb50:	e051      	b.n	800bbf6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800bb52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb54:	2b7f      	cmp	r3, #127	; 0x7f
 800bb56:	d914      	bls.n	800bb82 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800bb58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb5a:	2100      	movs	r1, #0
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f001 fe47 	bl	800d7f0 <ff_convert>
 800bb62:	4603      	mov	r3, r0
 800bb64:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800bb66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d004      	beq.n	800bb76 <create_name+0x246>
 800bb6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb6e:	3b80      	subs	r3, #128	; 0x80
 800bb70:	4a49      	ldr	r2, [pc, #292]	; (800bc98 <create_name+0x368>)
 800bb72:	5cd3      	ldrb	r3, [r2, r3]
 800bb74:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800bb76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb7a:	f043 0302 	orr.w	r3, r3, #2
 800bb7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800bb82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d007      	beq.n	800bb98 <create_name+0x268>
 800bb88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	4843      	ldr	r0, [pc, #268]	; (800bc9c <create_name+0x36c>)
 800bb8e:	f7fd fb41 	bl	8009214 <chk_chr>
 800bb92:	4603      	mov	r3, r0
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d008      	beq.n	800bbaa <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800bb98:	235f      	movs	r3, #95	; 0x5f
 800bb9a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bb9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bba0:	f043 0303 	orr.w	r3, r3, #3
 800bba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bba8:	e01b      	b.n	800bbe2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800bbaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbac:	2b40      	cmp	r3, #64	; 0x40
 800bbae:	d909      	bls.n	800bbc4 <create_name+0x294>
 800bbb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbb2:	2b5a      	cmp	r3, #90	; 0x5a
 800bbb4:	d806      	bhi.n	800bbc4 <create_name+0x294>
					b |= 2;
 800bbb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bbba:	f043 0302 	orr.w	r3, r3, #2
 800bbbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bbc2:	e00e      	b.n	800bbe2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800bbc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbc6:	2b60      	cmp	r3, #96	; 0x60
 800bbc8:	d90b      	bls.n	800bbe2 <create_name+0x2b2>
 800bbca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbcc:	2b7a      	cmp	r3, #122	; 0x7a
 800bbce:	d808      	bhi.n	800bbe2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800bbd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bbd4:	f043 0301 	orr.w	r3, r3, #1
 800bbd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bbdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbde:	3b20      	subs	r3, #32
 800bbe0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800bbe2:	6a3b      	ldr	r3, [r7, #32]
 800bbe4:	1c5a      	adds	r2, r3, #1
 800bbe6:	623a      	str	r2, [r7, #32]
 800bbe8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bbea:	b2d1      	uxtb	r1, r2
 800bbec:	687a      	ldr	r2, [r7, #4]
 800bbee:	4413      	add	r3, r2
 800bbf0:	460a      	mov	r2, r1
 800bbf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800bbf6:	e763      	b.n	800bac0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800bbf8:	bf00      	nop
 800bbfa:	e000      	b.n	800bbfe <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800bbfc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bc04:	2be5      	cmp	r3, #229	; 0xe5
 800bc06:	d103      	bne.n	800bc10 <create_name+0x2e0>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2205      	movs	r2, #5
 800bc0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800bc10:	69fb      	ldr	r3, [r7, #28]
 800bc12:	2b08      	cmp	r3, #8
 800bc14:	d104      	bne.n	800bc20 <create_name+0x2f0>
 800bc16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc1a:	009b      	lsls	r3, r3, #2
 800bc1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800bc20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc24:	f003 030c 	and.w	r3, r3, #12
 800bc28:	2b0c      	cmp	r3, #12
 800bc2a:	d005      	beq.n	800bc38 <create_name+0x308>
 800bc2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc30:	f003 0303 	and.w	r3, r3, #3
 800bc34:	2b03      	cmp	r3, #3
 800bc36:	d105      	bne.n	800bc44 <create_name+0x314>
 800bc38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc3c:	f043 0302 	orr.w	r3, r3, #2
 800bc40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800bc44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc48:	f003 0302 	and.w	r3, r3, #2
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d117      	bne.n	800bc80 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800bc50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc54:	f003 0303 	and.w	r3, r3, #3
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d105      	bne.n	800bc68 <create_name+0x338>
 800bc5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc60:	f043 0310 	orr.w	r3, r3, #16
 800bc64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800bc68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc6c:	f003 030c 	and.w	r3, r3, #12
 800bc70:	2b04      	cmp	r3, #4
 800bc72:	d105      	bne.n	800bc80 <create_name+0x350>
 800bc74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc78:	f043 0308 	orr.w	r3, r3, #8
 800bc7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bc86:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800bc8a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3728      	adds	r7, #40	; 0x28
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	0800ed7c 	.word	0x0800ed7c
 800bc98:	0800ee0c 	.word	0x0800ee0c
 800bc9c:	0800ed88 	.word	0x0800ed88

0800bca0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bca0:	b590      	push	{r4, r7, lr}
 800bca2:	b087      	sub	sp, #28
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bcb4:	e002      	b.n	800bcbc <follow_path+0x1c>
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	3301      	adds	r3, #1
 800bcba:	603b      	str	r3, [r7, #0]
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	2b2f      	cmp	r3, #47	; 0x2f
 800bcc2:	d0f8      	beq.n	800bcb6 <follow_path+0x16>
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	2b5c      	cmp	r3, #92	; 0x5c
 800bcca:	d0f4      	beq.n	800bcb6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bccc:	693b      	ldr	r3, [r7, #16]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	2b1f      	cmp	r3, #31
 800bcde:	d80a      	bhi.n	800bcf6 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2280      	movs	r2, #128	; 0x80
 800bce4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800bce8:	2100      	movs	r1, #0
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f7fe faea 	bl	800a2c4 <dir_sdi>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	75fb      	strb	r3, [r7, #23]
 800bcf4:	e07c      	b.n	800bdf0 <follow_path+0x150>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bcf6:	463b      	mov	r3, r7
 800bcf8:	4619      	mov	r1, r3
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f7ff fe18 	bl	800b930 <create_name>
 800bd00:	4603      	mov	r3, r0
 800bd02:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bd04:	7dfb      	ldrb	r3, [r7, #23]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d16d      	bne.n	800bde6 <follow_path+0x146>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f7ff fa4a 	bl	800b1a4 <dir_find>
 800bd10:	4603      	mov	r3, r0
 800bd12:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800bd1a:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bd1c:	7dfb      	ldrb	r3, [r7, #23]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d00a      	beq.n	800bd38 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bd22:	7dfb      	ldrb	r3, [r7, #23]
 800bd24:	2b04      	cmp	r3, #4
 800bd26:	d160      	bne.n	800bdea <follow_path+0x14a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bd28:	7afb      	ldrb	r3, [r7, #11]
 800bd2a:	f003 0304 	and.w	r3, r3, #4
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d15b      	bne.n	800bdea <follow_path+0x14a>
 800bd32:	2305      	movs	r3, #5
 800bd34:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bd36:	e058      	b.n	800bdea <follow_path+0x14a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bd38:	7afb      	ldrb	r3, [r7, #11]
 800bd3a:	f003 0304 	and.w	r3, r3, #4
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d155      	bne.n	800bdee <follow_path+0x14e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	799b      	ldrb	r3, [r3, #6]
 800bd46:	f003 0310 	and.w	r3, r3, #16
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d102      	bne.n	800bd54 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800bd4e:	2305      	movs	r3, #5
 800bd50:	75fb      	strb	r3, [r7, #23]
 800bd52:	e04d      	b.n	800bdf0 <follow_path+0x150>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	2b04      	cmp	r3, #4
 800bd5a:	d12f      	bne.n	800bdbc <follow_path+0x11c>
				obj->c_scl = obj->sclust;
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	689a      	ldr	r2, [r3, #8]
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800bd6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bd6e:	693a      	ldr	r2, [r7, #16]
 800bd70:	79d2      	ldrb	r2, [r2, #7]
 800bd72:	431a      	orrs	r2, r3
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	695b      	ldr	r3, [r3, #20]
 800bd84:	3334      	adds	r3, #52	; 0x34
 800bd86:	4618      	mov	r0, r3
 800bd88:	f7fd f834 	bl	8008df4 <ld_dword>
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	695b      	ldr	r3, [r3, #20]
 800bd96:	3321      	adds	r3, #33	; 0x21
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	f003 0302 	and.w	r3, r3, #2
 800bd9e:	b2da      	uxtb	r2, r3
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	695b      	ldr	r3, [r3, #20]
 800bda8:	3338      	adds	r3, #56	; 0x38
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7fd f845 	bl	8008e3a <ld_qword>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	460c      	mov	r4, r1
 800bdb4:	693a      	ldr	r2, [r7, #16]
 800bdb6:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800bdba:	e79c      	b.n	800bcf6 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdc6:	68fa      	ldr	r2, [r7, #12]
 800bdc8:	8992      	ldrh	r2, [r2, #12]
 800bdca:	fbb3 f0f2 	udiv	r0, r3, r2
 800bdce:	fb02 f200 	mul.w	r2, r2, r0
 800bdd2:	1a9b      	subs	r3, r3, r2
 800bdd4:	440b      	add	r3, r1
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	68f8      	ldr	r0, [r7, #12]
 800bdda:	f7fe fc49 	bl	800a670 <ld_clust>
 800bdde:	4602      	mov	r2, r0
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bde4:	e787      	b.n	800bcf6 <follow_path+0x56>
			if (res != FR_OK) break;
 800bde6:	bf00      	nop
 800bde8:	e002      	b.n	800bdf0 <follow_path+0x150>
				break;
 800bdea:	bf00      	nop
 800bdec:	e000      	b.n	800bdf0 <follow_path+0x150>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bdee:	bf00      	nop
			}
		}
	}

	return res;
 800bdf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	371c      	adds	r7, #28
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd90      	pop	{r4, r7, pc}

0800bdfa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bdfa:	b480      	push	{r7}
 800bdfc:	b087      	sub	sp, #28
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800be02:	f04f 33ff 	mov.w	r3, #4294967295
 800be06:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d031      	beq.n	800be74 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	617b      	str	r3, [r7, #20]
 800be16:	e002      	b.n	800be1e <get_ldnumber+0x24>
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	3301      	adds	r3, #1
 800be1c:	617b      	str	r3, [r7, #20]
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	2b1f      	cmp	r3, #31
 800be24:	d903      	bls.n	800be2e <get_ldnumber+0x34>
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	2b3a      	cmp	r3, #58	; 0x3a
 800be2c:	d1f4      	bne.n	800be18 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	781b      	ldrb	r3, [r3, #0]
 800be32:	2b3a      	cmp	r3, #58	; 0x3a
 800be34:	d11c      	bne.n	800be70 <get_ldnumber+0x76>
			tp = *path;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	1c5a      	adds	r2, r3, #1
 800be40:	60fa      	str	r2, [r7, #12]
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	3b30      	subs	r3, #48	; 0x30
 800be46:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	2b09      	cmp	r3, #9
 800be4c:	d80e      	bhi.n	800be6c <get_ldnumber+0x72>
 800be4e:	68fa      	ldr	r2, [r7, #12]
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	429a      	cmp	r2, r3
 800be54:	d10a      	bne.n	800be6c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d107      	bne.n	800be6c <get_ldnumber+0x72>
					vol = (int)i;
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	3301      	adds	r3, #1
 800be64:	617b      	str	r3, [r7, #20]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	697a      	ldr	r2, [r7, #20]
 800be6a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	e002      	b.n	800be76 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800be70:	2300      	movs	r3, #0
 800be72:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800be74:	693b      	ldr	r3, [r7, #16]
}
 800be76:	4618      	mov	r0, r3
 800be78:	371c      	adds	r7, #28
 800be7a:	46bd      	mov	sp, r7
 800be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be80:	4770      	bx	lr
	...

0800be84 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b082      	sub	sp, #8
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2200      	movs	r2, #0
 800be92:	70da      	strb	r2, [r3, #3]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f04f 32ff 	mov.w	r2, #4294967295
 800be9a:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800be9c:	6839      	ldr	r1, [r7, #0]
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f7fd fb84 	bl	80095ac <move_window>
 800bea4:	4603      	mov	r3, r0
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d001      	beq.n	800beae <check_fs+0x2a>
 800beaa:	2304      	movs	r3, #4
 800beac:	e044      	b.n	800bf38 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	333c      	adds	r3, #60	; 0x3c
 800beb2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7fc ff84 	bl	8008dc4 <ld_word>
 800bebc:	4603      	mov	r3, r0
 800bebe:	461a      	mov	r2, r3
 800bec0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d001      	beq.n	800becc <check_fs+0x48>
 800bec8:	2303      	movs	r3, #3
 800beca:	e035      	b.n	800bf38 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bed2:	2be9      	cmp	r3, #233	; 0xe9
 800bed4:	d009      	beq.n	800beea <check_fs+0x66>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bedc:	2beb      	cmp	r3, #235	; 0xeb
 800bede:	d11e      	bne.n	800bf1e <check_fs+0x9a>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bee6:	2b90      	cmp	r3, #144	; 0x90
 800bee8:	d119      	bne.n	800bf1e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	333c      	adds	r3, #60	; 0x3c
 800beee:	3336      	adds	r3, #54	; 0x36
 800bef0:	4618      	mov	r0, r3
 800bef2:	f7fc ff7f 	bl	8008df4 <ld_dword>
 800bef6:	4603      	mov	r3, r0
 800bef8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800befc:	4a10      	ldr	r2, [pc, #64]	; (800bf40 <check_fs+0xbc>)
 800befe:	4293      	cmp	r3, r2
 800bf00:	d101      	bne.n	800bf06 <check_fs+0x82>
 800bf02:	2300      	movs	r3, #0
 800bf04:	e018      	b.n	800bf38 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	333c      	adds	r3, #60	; 0x3c
 800bf0a:	3352      	adds	r3, #82	; 0x52
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f7fc ff71 	bl	8008df4 <ld_dword>
 800bf12:	4602      	mov	r2, r0
 800bf14:	4b0b      	ldr	r3, [pc, #44]	; (800bf44 <check_fs+0xc0>)
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d101      	bne.n	800bf1e <check_fs+0x9a>
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	e00c      	b.n	800bf38 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	333c      	adds	r3, #60	; 0x3c
 800bf22:	220b      	movs	r2, #11
 800bf24:	4908      	ldr	r1, [pc, #32]	; (800bf48 <check_fs+0xc4>)
 800bf26:	4618      	mov	r0, r3
 800bf28:	f7fd f94d 	bl	80091c6 <mem_cmp>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d101      	bne.n	800bf36 <check_fs+0xb2>
 800bf32:	2301      	movs	r3, #1
 800bf34:	e000      	b.n	800bf38 <check_fs+0xb4>
#endif
	return 2;
 800bf36:	2302      	movs	r3, #2
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3708      	adds	r7, #8
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}
 800bf40:	00544146 	.word	0x00544146
 800bf44:	33544146 	.word	0x33544146
 800bf48:	0800ed90 	.word	0x0800ed90

0800bf4c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bf4c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800bf50:	b098      	sub	sp, #96	; 0x60
 800bf52:	af00      	add	r7, sp, #0
 800bf54:	60f8      	str	r0, [r7, #12]
 800bf56:	60b9      	str	r1, [r7, #8]
 800bf58:	4613      	mov	r3, r2
 800bf5a:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bf62:	68f8      	ldr	r0, [r7, #12]
 800bf64:	f7ff ff49 	bl	800bdfa <get_ldnumber>
 800bf68:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 800bf6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	da01      	bge.n	800bf74 <find_volume+0x28>
 800bf70:	230b      	movs	r3, #11
 800bf72:	e36e      	b.n	800c652 <find_volume+0x706>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bf74:	4aaa      	ldr	r2, [pc, #680]	; (800c220 <find_volume+0x2d4>)
 800bf76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf7c:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bf7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d101      	bne.n	800bf88 <find_volume+0x3c>
 800bf84:	230c      	movs	r3, #12
 800bf86:	e364      	b.n	800c652 <find_volume+0x706>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf8c:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bf8e:	79fb      	ldrb	r3, [r7, #7]
 800bf90:	f023 0301 	bic.w	r3, r3, #1
 800bf94:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bf96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf98:	781b      	ldrb	r3, [r3, #0]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d01a      	beq.n	800bfd4 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800bf9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfa0:	785b      	ldrb	r3, [r3, #1]
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f7fc fe70 	bl	8008c88 <disk_status>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bfae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bfb2:	f003 0301 	and.w	r3, r3, #1
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d10c      	bne.n	800bfd4 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bfba:	79fb      	ldrb	r3, [r7, #7]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d007      	beq.n	800bfd0 <find_volume+0x84>
 800bfc0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bfc4:	f003 0304 	and.w	r3, r3, #4
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d001      	beq.n	800bfd0 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800bfcc:	230a      	movs	r3, #10
 800bfce:	e340      	b.n	800c652 <find_volume+0x706>
			}
			return FR_OK;				/* The file system object is valid */
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	e33e      	b.n	800c652 <find_volume+0x706>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bfd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bfda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfdc:	b2da      	uxtb	r2, r3
 800bfde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfe0:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bfe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfe4:	785b      	ldrb	r3, [r3, #1]
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f7fc fe68 	bl	8008cbc <disk_initialize>
 800bfec:	4603      	mov	r3, r0
 800bfee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bff2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bff6:	f003 0301 	and.w	r3, r3, #1
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d001      	beq.n	800c002 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bffe:	2303      	movs	r3, #3
 800c000:	e327      	b.n	800c652 <find_volume+0x706>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c002:	79fb      	ldrb	r3, [r7, #7]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d007      	beq.n	800c018 <find_volume+0xcc>
 800c008:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c00c:	f003 0304 	and.w	r3, r3, #4
 800c010:	2b00      	cmp	r3, #0
 800c012:	d001      	beq.n	800c018 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800c014:	230a      	movs	r3, #10
 800c016:	e31c      	b.n	800c652 <find_volume+0x706>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c01a:	7858      	ldrb	r0, [r3, #1]
 800c01c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c01e:	330c      	adds	r3, #12
 800c020:	461a      	mov	r2, r3
 800c022:	2102      	movs	r1, #2
 800c024:	f7fc feb0 	bl	8008d88 <disk_ioctl>
 800c028:	4603      	mov	r3, r0
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d001      	beq.n	800c032 <find_volume+0xe6>
 800c02e:	2301      	movs	r3, #1
 800c030:	e30f      	b.n	800c652 <find_volume+0x706>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c034:	899b      	ldrh	r3, [r3, #12]
 800c036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c03a:	d80d      	bhi.n	800c058 <find_volume+0x10c>
 800c03c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c03e:	899b      	ldrh	r3, [r3, #12]
 800c040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c044:	d308      	bcc.n	800c058 <find_volume+0x10c>
 800c046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c048:	899b      	ldrh	r3, [r3, #12]
 800c04a:	461a      	mov	r2, r3
 800c04c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c04e:	899b      	ldrh	r3, [r3, #12]
 800c050:	3b01      	subs	r3, #1
 800c052:	4013      	ands	r3, r2
 800c054:	2b00      	cmp	r3, #0
 800c056:	d001      	beq.n	800c05c <find_volume+0x110>
 800c058:	2301      	movs	r3, #1
 800c05a:	e2fa      	b.n	800c652 <find_volume+0x706>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c05c:	2300      	movs	r3, #0
 800c05e:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c060:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c062:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c064:	f7ff ff0e 	bl	800be84 <check_fs>
 800c068:	4603      	mov	r3, r0
 800c06a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c06e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c072:	2b02      	cmp	r3, #2
 800c074:	d14b      	bne.n	800c10e <find_volume+0x1c2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c076:	2300      	movs	r3, #0
 800c078:	64bb      	str	r3, [r7, #72]	; 0x48
 800c07a:	e01f      	b.n	800c0bc <find_volume+0x170>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c07c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c07e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800c082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c084:	011b      	lsls	r3, r3, #4
 800c086:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c08a:	4413      	add	r3, r2
 800c08c:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c090:	3304      	adds	r3, #4
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d006      	beq.n	800c0a6 <find_volume+0x15a>
 800c098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c09a:	3308      	adds	r3, #8
 800c09c:	4618      	mov	r0, r3
 800c09e:	f7fc fea9 	bl	8008df4 <ld_dword>
 800c0a2:	4602      	mov	r2, r0
 800c0a4:	e000      	b.n	800c0a8 <find_volume+0x15c>
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800c0b0:	440b      	add	r3, r1
 800c0b2:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c0b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0b8:	3301      	adds	r3, #1
 800c0ba:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0be:	2b03      	cmp	r3, #3
 800c0c0:	d9dc      	bls.n	800c07c <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 800c0c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d002      	beq.n	800c0d2 <find_volume+0x186>
 800c0cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0ce:	3b01      	subs	r3, #1
 800c0d0:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c0d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0d4:	009b      	lsls	r3, r3, #2
 800c0d6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800c0da:	4413      	add	r3, r2
 800c0dc:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800c0e0:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c0e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d005      	beq.n	800c0f4 <find_volume+0x1a8>
 800c0e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c0ea:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c0ec:	f7ff feca 	bl	800be84 <check_fs>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	e000      	b.n	800c0f6 <find_volume+0x1aa>
 800c0f4:	2303      	movs	r3, #3
 800c0f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c0fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0fe:	2b01      	cmp	r3, #1
 800c100:	d905      	bls.n	800c10e <find_volume+0x1c2>
 800c102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c104:	3301      	adds	r3, #1
 800c106:	64bb      	str	r3, [r7, #72]	; 0x48
 800c108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c10a:	2b03      	cmp	r3, #3
 800c10c:	d9e1      	bls.n	800c0d2 <find_volume+0x186>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c10e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c112:	2b04      	cmp	r3, #4
 800c114:	d101      	bne.n	800c11a <find_volume+0x1ce>
 800c116:	2301      	movs	r3, #1
 800c118:	e29b      	b.n	800c652 <find_volume+0x706>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c11a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c11e:	2b01      	cmp	r3, #1
 800c120:	d901      	bls.n	800c126 <find_volume+0x1da>
 800c122:	230d      	movs	r3, #13
 800c124:	e295      	b.n	800c652 <find_volume+0x706>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800c126:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c12a:	2b01      	cmp	r3, #1
 800c12c:	f040 8101 	bne.w	800c332 <find_volume+0x3e6>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800c130:	230b      	movs	r3, #11
 800c132:	64bb      	str	r3, [r7, #72]	; 0x48
 800c134:	e002      	b.n	800c13c <find_volume+0x1f0>
 800c136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c138:	3301      	adds	r3, #1
 800c13a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c13c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c13e:	2b3f      	cmp	r3, #63	; 0x3f
 800c140:	d806      	bhi.n	800c150 <find_volume+0x204>
 800c142:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c146:	4413      	add	r3, r2
 800c148:	333c      	adds	r3, #60	; 0x3c
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d0f2      	beq.n	800c136 <find_volume+0x1ea>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800c150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c152:	2b3f      	cmp	r3, #63	; 0x3f
 800c154:	d801      	bhi.n	800c15a <find_volume+0x20e>
 800c156:	230d      	movs	r3, #13
 800c158:	e27b      	b.n	800c652 <find_volume+0x706>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800c15a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c15c:	333c      	adds	r3, #60	; 0x3c
 800c15e:	3368      	adds	r3, #104	; 0x68
 800c160:	4618      	mov	r0, r3
 800c162:	f7fc fe2f 	bl	8008dc4 <ld_word>
 800c166:	4603      	mov	r3, r0
 800c168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c16c:	d001      	beq.n	800c172 <find_volume+0x226>
 800c16e:	230d      	movs	r3, #13
 800c170:	e26f      	b.n	800c652 <find_volume+0x706>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800c172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c174:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800c178:	461a      	mov	r2, r3
 800c17a:	2301      	movs	r3, #1
 800c17c:	4093      	lsls	r3, r2
 800c17e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c180:	8992      	ldrh	r2, [r2, #12]
 800c182:	4293      	cmp	r3, r2
 800c184:	d001      	beq.n	800c18a <find_volume+0x23e>
			return FR_NO_FILESYSTEM;
 800c186:	230d      	movs	r3, #13
 800c188:	e263      	b.n	800c652 <find_volume+0x706>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800c18a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c18c:	333c      	adds	r3, #60	; 0x3c
 800c18e:	3348      	adds	r3, #72	; 0x48
 800c190:	4618      	mov	r0, r3
 800c192:	f7fc fe52 	bl	8008e3a <ld_qword>
 800c196:	460a      	mov	r2, r1
 800c198:	4601      	mov	r1, r0
 800c19a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c19c:	469b      	mov	fp, r3
 800c19e:	f04f 0c00 	mov.w	ip, #0
 800c1a2:	eb1b 0301 	adds.w	r3, fp, r1
 800c1a6:	eb4c 0402 	adc.w	r4, ip, r2
 800c1aa:	e9c7 3408 	strd	r3, r4, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800c1ae:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c1b2:	2c01      	cmp	r4, #1
 800c1b4:	bf08      	it	eq
 800c1b6:	2b00      	cmpeq	r3, #0
 800c1b8:	d301      	bcc.n	800c1be <find_volume+0x272>
 800c1ba:	230d      	movs	r3, #13
 800c1bc:	e249      	b.n	800c652 <find_volume+0x706>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800c1be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1c0:	333c      	adds	r3, #60	; 0x3c
 800c1c2:	3354      	adds	r3, #84	; 0x54
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f7fc fe15 	bl	8008df4 <ld_dword>
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1ce:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800c1d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1d2:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 800c1d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1d8:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800c1da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1dc:	789b      	ldrb	r3, [r3, #2]
 800c1de:	2b01      	cmp	r3, #1
 800c1e0:	d001      	beq.n	800c1e6 <find_volume+0x29a>
 800c1e2:	230d      	movs	r3, #13
 800c1e4:	e235      	b.n	800c652 <find_volume+0x706>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800c1e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1e8:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	4093      	lsls	r3, r2
 800c1f2:	b29a      	uxth	r2, r3
 800c1f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1f6:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800c1f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1fa:	895b      	ldrh	r3, [r3, #10]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d101      	bne.n	800c204 <find_volume+0x2b8>
 800c200:	230d      	movs	r3, #13
 800c202:	e226      	b.n	800c652 <find_volume+0x706>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800c204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c206:	333c      	adds	r3, #60	; 0x3c
 800c208:	335c      	adds	r3, #92	; 0x5c
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7fc fdf2 	bl	8008df4 <ld_dword>
 800c210:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800c212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c214:	4a03      	ldr	r2, [pc, #12]	; (800c224 <find_volume+0x2d8>)
 800c216:	4293      	cmp	r3, r2
 800c218:	d906      	bls.n	800c228 <find_volume+0x2dc>
 800c21a:	230d      	movs	r3, #13
 800c21c:	e219      	b.n	800c652 <find_volume+0x706>
 800c21e:	bf00      	nop
 800c220:	200000bc 	.word	0x200000bc
 800c224:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800c228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c22a:	1c9a      	adds	r2, r3, #2
 800c22c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c22e:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800c230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c232:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c234:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800c236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c238:	333c      	adds	r3, #60	; 0x3c
 800c23a:	3358      	adds	r3, #88	; 0x58
 800c23c:	4618      	mov	r0, r3
 800c23e:	f7fc fdd9 	bl	8008df4 <ld_dword>
 800c242:	4602      	mov	r2, r0
 800c244:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c246:	441a      	add	r2, r3
 800c248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c24a:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800c24c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c24e:	333c      	adds	r3, #60	; 0x3c
 800c250:	3350      	adds	r3, #80	; 0x50
 800c252:	4618      	mov	r0, r3
 800c254:	f7fc fdce 	bl	8008df4 <ld_dword>
 800c258:	4602      	mov	r2, r0
 800c25a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c25c:	441a      	add	r2, r3
 800c25e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c260:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800c262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c266:	4619      	mov	r1, r3
 800c268:	f04f 0200 	mov.w	r2, #0
 800c26c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c26e:	895b      	ldrh	r3, [r3, #10]
 800c270:	4618      	mov	r0, r3
 800c272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c274:	fb03 f300 	mul.w	r3, r3, r0
 800c278:	469b      	mov	fp, r3
 800c27a:	f04f 0c00 	mov.w	ip, #0
 800c27e:	eb1b 0301 	adds.w	r3, fp, r1
 800c282:	eb4c 0402 	adc.w	r4, ip, r2
 800c286:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c28a:	42a2      	cmp	r2, r4
 800c28c:	bf08      	it	eq
 800c28e:	4299      	cmpeq	r1, r3
 800c290:	d201      	bcs.n	800c296 <find_volume+0x34a>
 800c292:	230d      	movs	r3, #13
 800c294:	e1dd      	b.n	800c652 <find_volume+0x706>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800c296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c298:	333c      	adds	r3, #60	; 0x3c
 800c29a:	3360      	adds	r3, #96	; 0x60
 800c29c:	4618      	mov	r0, r3
 800c29e:	f7fc fda9 	bl	8008df4 <ld_dword>
 800c2a2:	4602      	mov	r2, r0
 800c2a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2a6:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800c2a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2ac:	4619      	mov	r1, r3
 800c2ae:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c2b0:	f7fd fa1a 	bl	80096e8 <clust2sect>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c2ba:	f7fd f977 	bl	80095ac <move_window>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d001      	beq.n	800c2c8 <find_volume+0x37c>
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	e1c4      	b.n	800c652 <find_volume+0x706>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	64bb      	str	r3, [r7, #72]	; 0x48
 800c2cc:	e015      	b.n	800c2fa <find_volume+0x3ae>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800c2ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c2d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2d2:	4413      	add	r3, r2
 800c2d4:	333c      	adds	r3, #60	; 0x3c
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	2b81      	cmp	r3, #129	; 0x81
 800c2da:	d10b      	bne.n	800c2f4 <find_volume+0x3a8>
 800c2dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2de:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800c2e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2e4:	3314      	adds	r3, #20
 800c2e6:	4413      	add	r3, r2
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f7fc fd83 	bl	8008df4 <ld_dword>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	2b02      	cmp	r3, #2
 800c2f2:	d009      	beq.n	800c308 <find_volume+0x3bc>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800c2f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2f6:	3320      	adds	r3, #32
 800c2f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c2fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2fc:	899b      	ldrh	r3, [r3, #12]
 800c2fe:	461a      	mov	r2, r3
 800c300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c302:	4293      	cmp	r3, r2
 800c304:	d3e3      	bcc.n	800c2ce <find_volume+0x382>
 800c306:	e000      	b.n	800c30a <find_volume+0x3be>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800c308:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800c30a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c30c:	899b      	ldrh	r3, [r3, #12]
 800c30e:	461a      	mov	r2, r3
 800c310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c312:	4293      	cmp	r3, r2
 800c314:	d101      	bne.n	800c31a <find_volume+0x3ce>
 800c316:	230d      	movs	r3, #13
 800c318:	e19b      	b.n	800c652 <find_volume+0x706>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c31a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c31c:	f04f 32ff 	mov.w	r2, #4294967295
 800c320:	61da      	str	r2, [r3, #28]
 800c322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c324:	69da      	ldr	r2, [r3, #28]
 800c326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c328:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800c32a:	2304      	movs	r3, #4
 800c32c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c330:	e177      	b.n	800c622 <find_volume+0x6d6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c334:	333c      	adds	r3, #60	; 0x3c
 800c336:	330b      	adds	r3, #11
 800c338:	4618      	mov	r0, r3
 800c33a:	f7fc fd43 	bl	8008dc4 <ld_word>
 800c33e:	4603      	mov	r3, r0
 800c340:	461a      	mov	r2, r3
 800c342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c344:	899b      	ldrh	r3, [r3, #12]
 800c346:	429a      	cmp	r2, r3
 800c348:	d001      	beq.n	800c34e <find_volume+0x402>
 800c34a:	230d      	movs	r3, #13
 800c34c:	e181      	b.n	800c652 <find_volume+0x706>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c34e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c350:	333c      	adds	r3, #60	; 0x3c
 800c352:	3316      	adds	r3, #22
 800c354:	4618      	mov	r0, r3
 800c356:	f7fc fd35 	bl	8008dc4 <ld_word>
 800c35a:	4603      	mov	r3, r0
 800c35c:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c35e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c360:	2b00      	cmp	r3, #0
 800c362:	d106      	bne.n	800c372 <find_volume+0x426>
 800c364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c366:	333c      	adds	r3, #60	; 0x3c
 800c368:	3324      	adds	r3, #36	; 0x24
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7fc fd42 	bl	8008df4 <ld_dword>
 800c370:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 800c372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c374:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c376:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c37a:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800c37e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c380:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c384:	789b      	ldrb	r3, [r3, #2]
 800c386:	2b01      	cmp	r3, #1
 800c388:	d005      	beq.n	800c396 <find_volume+0x44a>
 800c38a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c38c:	789b      	ldrb	r3, [r3, #2]
 800c38e:	2b02      	cmp	r3, #2
 800c390:	d001      	beq.n	800c396 <find_volume+0x44a>
 800c392:	230d      	movs	r3, #13
 800c394:	e15d      	b.n	800c652 <find_volume+0x706>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c398:	789b      	ldrb	r3, [r3, #2]
 800c39a:	461a      	mov	r2, r3
 800c39c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c39e:	fb02 f303 	mul.w	r3, r2, r3
 800c3a2:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c3a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3a6:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800c3aa:	b29a      	uxth	r2, r3
 800c3ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3ae:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c3b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3b2:	895b      	ldrh	r3, [r3, #10]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d008      	beq.n	800c3ca <find_volume+0x47e>
 800c3b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3ba:	895b      	ldrh	r3, [r3, #10]
 800c3bc:	461a      	mov	r2, r3
 800c3be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3c0:	895b      	ldrh	r3, [r3, #10]
 800c3c2:	3b01      	subs	r3, #1
 800c3c4:	4013      	ands	r3, r2
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d001      	beq.n	800c3ce <find_volume+0x482>
 800c3ca:	230d      	movs	r3, #13
 800c3cc:	e141      	b.n	800c652 <find_volume+0x706>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c3ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3d0:	333c      	adds	r3, #60	; 0x3c
 800c3d2:	3311      	adds	r3, #17
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f7fc fcf5 	bl	8008dc4 <ld_word>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	461a      	mov	r2, r3
 800c3de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3e0:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c3e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3e4:	891b      	ldrh	r3, [r3, #8]
 800c3e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c3e8:	8992      	ldrh	r2, [r2, #12]
 800c3ea:	0952      	lsrs	r2, r2, #5
 800c3ec:	b292      	uxth	r2, r2
 800c3ee:	fbb3 f1f2 	udiv	r1, r3, r2
 800c3f2:	fb02 f201 	mul.w	r2, r2, r1
 800c3f6:	1a9b      	subs	r3, r3, r2
 800c3f8:	b29b      	uxth	r3, r3
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d001      	beq.n	800c402 <find_volume+0x4b6>
 800c3fe:	230d      	movs	r3, #13
 800c400:	e127      	b.n	800c652 <find_volume+0x706>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c404:	333c      	adds	r3, #60	; 0x3c
 800c406:	3313      	adds	r3, #19
 800c408:	4618      	mov	r0, r3
 800c40a:	f7fc fcdb 	bl	8008dc4 <ld_word>
 800c40e:	4603      	mov	r3, r0
 800c410:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c414:	2b00      	cmp	r3, #0
 800c416:	d106      	bne.n	800c426 <find_volume+0x4da>
 800c418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c41a:	333c      	adds	r3, #60	; 0x3c
 800c41c:	3320      	adds	r3, #32
 800c41e:	4618      	mov	r0, r3
 800c420:	f7fc fce8 	bl	8008df4 <ld_dword>
 800c424:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c428:	333c      	adds	r3, #60	; 0x3c
 800c42a:	330e      	adds	r3, #14
 800c42c:	4618      	mov	r0, r3
 800c42e:	f7fc fcc9 	bl	8008dc4 <ld_word>
 800c432:	4603      	mov	r3, r0
 800c434:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c436:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d101      	bne.n	800c440 <find_volume+0x4f4>
 800c43c:	230d      	movs	r3, #13
 800c43e:	e108      	b.n	800c652 <find_volume+0x706>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c440:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c444:	4413      	add	r3, r2
 800c446:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c448:	8911      	ldrh	r1, [r2, #8]
 800c44a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c44c:	8992      	ldrh	r2, [r2, #12]
 800c44e:	0952      	lsrs	r2, r2, #5
 800c450:	b292      	uxth	r2, r2
 800c452:	fbb1 f2f2 	udiv	r2, r1, r2
 800c456:	b292      	uxth	r2, r2
 800c458:	4413      	add	r3, r2
 800c45a:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c45c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c460:	429a      	cmp	r2, r3
 800c462:	d201      	bcs.n	800c468 <find_volume+0x51c>
 800c464:	230d      	movs	r3, #13
 800c466:	e0f4      	b.n	800c652 <find_volume+0x706>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c468:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c46c:	1ad3      	subs	r3, r2, r3
 800c46e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c470:	8952      	ldrh	r2, [r2, #10]
 800c472:	fbb3 f3f2 	udiv	r3, r3, r2
 800c476:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d101      	bne.n	800c482 <find_volume+0x536>
 800c47e:	230d      	movs	r3, #13
 800c480:	e0e7      	b.n	800c652 <find_volume+0x706>
		fmt = FS_FAT32;
 800c482:	2303      	movs	r3, #3
 800c484:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c48a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c48e:	4293      	cmp	r3, r2
 800c490:	d802      	bhi.n	800c498 <find_volume+0x54c>
 800c492:	2302      	movs	r3, #2
 800c494:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c49a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d802      	bhi.n	800c4a8 <find_volume+0x55c>
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4aa:	1c9a      	adds	r2, r3, #2
 800c4ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4ae:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800c4b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c4b4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c4b6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c4b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c4ba:	441a      	add	r2, r3
 800c4bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4be:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800c4c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c4:	441a      	add	r2, r3
 800c4c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4c8:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800c4ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4ce:	2b03      	cmp	r3, #3
 800c4d0:	d11e      	bne.n	800c510 <find_volume+0x5c4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c4d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4d4:	333c      	adds	r3, #60	; 0x3c
 800c4d6:	332a      	adds	r3, #42	; 0x2a
 800c4d8:	4618      	mov	r0, r3
 800c4da:	f7fc fc73 	bl	8008dc4 <ld_word>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d001      	beq.n	800c4e8 <find_volume+0x59c>
 800c4e4:	230d      	movs	r3, #13
 800c4e6:	e0b4      	b.n	800c652 <find_volume+0x706>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c4e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4ea:	891b      	ldrh	r3, [r3, #8]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d001      	beq.n	800c4f4 <find_volume+0x5a8>
 800c4f0:	230d      	movs	r3, #13
 800c4f2:	e0ae      	b.n	800c652 <find_volume+0x706>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c4f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4f6:	333c      	adds	r3, #60	; 0x3c
 800c4f8:	332c      	adds	r3, #44	; 0x2c
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f7fc fc7a 	bl	8008df4 <ld_dword>
 800c500:	4602      	mov	r2, r0
 800c502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c504:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c508:	6a1b      	ldr	r3, [r3, #32]
 800c50a:	009b      	lsls	r3, r3, #2
 800c50c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c50e:	e01f      	b.n	800c550 <find_volume+0x604>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c512:	891b      	ldrh	r3, [r3, #8]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d101      	bne.n	800c51c <find_volume+0x5d0>
 800c518:	230d      	movs	r3, #13
 800c51a:	e09a      	b.n	800c652 <find_volume+0x706>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c51c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c51e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c522:	441a      	add	r2, r3
 800c524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c526:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c528:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c52c:	2b02      	cmp	r3, #2
 800c52e:	d103      	bne.n	800c538 <find_volume+0x5ec>
 800c530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c532:	6a1b      	ldr	r3, [r3, #32]
 800c534:	005b      	lsls	r3, r3, #1
 800c536:	e00a      	b.n	800c54e <find_volume+0x602>
 800c538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c53a:	6a1a      	ldr	r2, [r3, #32]
 800c53c:	4613      	mov	r3, r2
 800c53e:	005b      	lsls	r3, r3, #1
 800c540:	4413      	add	r3, r2
 800c542:	085a      	lsrs	r2, r3, #1
 800c544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c546:	6a1b      	ldr	r3, [r3, #32]
 800c548:	f003 0301 	and.w	r3, r3, #1
 800c54c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c54e:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c552:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c556:	899b      	ldrh	r3, [r3, #12]
 800c558:	4619      	mov	r1, r3
 800c55a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c55c:	440b      	add	r3, r1
 800c55e:	3b01      	subs	r3, #1
 800c560:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c562:	8989      	ldrh	r1, [r1, #12]
 800c564:	fbb3 f3f1 	udiv	r3, r3, r1
 800c568:	429a      	cmp	r2, r3
 800c56a:	d201      	bcs.n	800c570 <find_volume+0x624>
 800c56c:	230d      	movs	r3, #13
 800c56e:	e070      	b.n	800c652 <find_volume+0x706>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c572:	f04f 32ff 	mov.w	r2, #4294967295
 800c576:	61da      	str	r2, [r3, #28]
 800c578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c57a:	69da      	ldr	r2, [r3, #28]
 800c57c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c57e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800c580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c582:	2280      	movs	r2, #128	; 0x80
 800c584:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c586:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c58a:	2b03      	cmp	r3, #3
 800c58c:	d149      	bne.n	800c622 <find_volume+0x6d6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c58e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c590:	333c      	adds	r3, #60	; 0x3c
 800c592:	3330      	adds	r3, #48	; 0x30
 800c594:	4618      	mov	r0, r3
 800c596:	f7fc fc15 	bl	8008dc4 <ld_word>
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d140      	bne.n	800c622 <find_volume+0x6d6>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c5a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	4619      	mov	r1, r3
 800c5a6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c5a8:	f7fd f800 	bl	80095ac <move_window>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d137      	bne.n	800c622 <find_volume+0x6d6>
		{
			fs->fsi_flag = 0;
 800c5b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c5b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5ba:	333c      	adds	r3, #60	; 0x3c
 800c5bc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f7fc fbff 	bl	8008dc4 <ld_word>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	461a      	mov	r2, r3
 800c5ca:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d127      	bne.n	800c622 <find_volume+0x6d6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c5d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5d4:	333c      	adds	r3, #60	; 0x3c
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f7fc fc0c 	bl	8008df4 <ld_dword>
 800c5dc:	4602      	mov	r2, r0
 800c5de:	4b1f      	ldr	r3, [pc, #124]	; (800c65c <find_volume+0x710>)
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	d11e      	bne.n	800c622 <find_volume+0x6d6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c5e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5e6:	333c      	adds	r3, #60	; 0x3c
 800c5e8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7fc fc01 	bl	8008df4 <ld_dword>
 800c5f2:	4602      	mov	r2, r0
 800c5f4:	4b1a      	ldr	r3, [pc, #104]	; (800c660 <find_volume+0x714>)
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d113      	bne.n	800c622 <find_volume+0x6d6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c5fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5fc:	333c      	adds	r3, #60	; 0x3c
 800c5fe:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c602:	4618      	mov	r0, r3
 800c604:	f7fc fbf6 	bl	8008df4 <ld_dword>
 800c608:	4602      	mov	r2, r0
 800c60a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c60c:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c60e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c610:	333c      	adds	r3, #60	; 0x3c
 800c612:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c616:	4618      	mov	r0, r3
 800c618:	f7fc fbec 	bl	8008df4 <ld_dword>
 800c61c:	4602      	mov	r2, r0
 800c61e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c620:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c624:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800c628:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c62a:	4b0e      	ldr	r3, [pc, #56]	; (800c664 <find_volume+0x718>)
 800c62c:	881b      	ldrh	r3, [r3, #0]
 800c62e:	3301      	adds	r3, #1
 800c630:	b29a      	uxth	r2, r3
 800c632:	4b0c      	ldr	r3, [pc, #48]	; (800c664 <find_volume+0x718>)
 800c634:	801a      	strh	r2, [r3, #0]
 800c636:	4b0b      	ldr	r3, [pc, #44]	; (800c664 <find_volume+0x718>)
 800c638:	881a      	ldrh	r2, [r3, #0]
 800c63a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c63c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800c63e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c640:	4a09      	ldr	r2, [pc, #36]	; (800c668 <find_volume+0x71c>)
 800c642:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800c644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c646:	4a09      	ldr	r2, [pc, #36]	; (800c66c <find_volume+0x720>)
 800c648:	615a      	str	r2, [r3, #20]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c64a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c64c:	f7fc ff46 	bl	80094dc <clear_lock>
#endif
	return FR_OK;
 800c650:	2300      	movs	r3, #0
}
 800c652:	4618      	mov	r0, r3
 800c654:	3760      	adds	r7, #96	; 0x60
 800c656:	46bd      	mov	sp, r7
 800c658:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800c65c:	41615252 	.word	0x41615252
 800c660:	61417272 	.word	0x61417272
 800c664:	200000c0 	.word	0x200000c0
 800c668:	20000344 	.word	0x20000344
 800c66c:	200000e4 	.word	0x200000e4

0800c670 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b084      	sub	sp, #16
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c67a:	2309      	movs	r3, #9
 800c67c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d01c      	beq.n	800c6be <validate+0x4e>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d018      	beq.n	800c6be <validate+0x4e>
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d013      	beq.n	800c6be <validate+0x4e>
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	889a      	ldrh	r2, [r3, #4]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	88db      	ldrh	r3, [r3, #6]
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d10c      	bne.n	800c6be <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	785b      	ldrb	r3, [r3, #1]
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f7fc faec 	bl	8008c88 <disk_status>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	f003 0301 	and.w	r3, r3, #1
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d101      	bne.n	800c6be <validate+0x4e>
			res = FR_OK;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c6be:	7bfb      	ldrb	r3, [r7, #15]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d102      	bne.n	800c6ca <validate+0x5a>
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	e000      	b.n	800c6cc <validate+0x5c>
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	683a      	ldr	r2, [r7, #0]
 800c6ce:	6013      	str	r3, [r2, #0]
	return res;
 800c6d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3710      	adds	r7, #16
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
	...

0800c6dc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b088      	sub	sp, #32
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	60f8      	str	r0, [r7, #12]
 800c6e4:	60b9      	str	r1, [r7, #8]
 800c6e6:	4613      	mov	r3, r2
 800c6e8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c6ee:	f107 0310 	add.w	r3, r7, #16
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f7ff fb81 	bl	800bdfa <get_ldnumber>
 800c6f8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c6fa:	69fb      	ldr	r3, [r7, #28]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	da01      	bge.n	800c704 <f_mount+0x28>
 800c700:	230b      	movs	r3, #11
 800c702:	e02b      	b.n	800c75c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c704:	4a17      	ldr	r2, [pc, #92]	; (800c764 <f_mount+0x88>)
 800c706:	69fb      	ldr	r3, [r7, #28]
 800c708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c70c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c70e:	69bb      	ldr	r3, [r7, #24]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d005      	beq.n	800c720 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c714:	69b8      	ldr	r0, [r7, #24]
 800c716:	f7fc fee1 	bl	80094dc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c71a:	69bb      	ldr	r3, [r7, #24]
 800c71c:	2200      	movs	r2, #0
 800c71e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d002      	beq.n	800c72c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2200      	movs	r2, #0
 800c72a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c72c:	68fa      	ldr	r2, [r7, #12]
 800c72e:	490d      	ldr	r1, [pc, #52]	; (800c764 <f_mount+0x88>)
 800c730:	69fb      	ldr	r3, [r7, #28]
 800c732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d002      	beq.n	800c742 <f_mount+0x66>
 800c73c:	79fb      	ldrb	r3, [r7, #7]
 800c73e:	2b01      	cmp	r3, #1
 800c740:	d001      	beq.n	800c746 <f_mount+0x6a>
 800c742:	2300      	movs	r3, #0
 800c744:	e00a      	b.n	800c75c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c746:	f107 010c 	add.w	r1, r7, #12
 800c74a:	f107 0308 	add.w	r3, r7, #8
 800c74e:	2200      	movs	r2, #0
 800c750:	4618      	mov	r0, r3
 800c752:	f7ff fbfb 	bl	800bf4c <find_volume>
 800c756:	4603      	mov	r3, r0
 800c758:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c75a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3720      	adds	r7, #32
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}
 800c764:	200000bc 	.word	0x200000bc

0800c768 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c768:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800c76c:	b0a2      	sub	sp, #136	; 0x88
 800c76e:	af00      	add	r7, sp, #0
 800c770:	60f8      	str	r0, [r7, #12]
 800c772:	60b9      	str	r1, [r7, #8]
 800c774:	4613      	mov	r3, r2
 800c776:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d101      	bne.n	800c782 <f_open+0x1a>
 800c77e:	2309      	movs	r3, #9
 800c780:	e2a8      	b.n	800ccd4 <f_open+0x56c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c782:	79fb      	ldrb	r3, [r7, #7]
 800c784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c788:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c78a:	79fa      	ldrb	r2, [r7, #7]
 800c78c:	f107 0114 	add.w	r1, r7, #20
 800c790:	f107 0308 	add.w	r3, r7, #8
 800c794:	4618      	mov	r0, r3
 800c796:	f7ff fbd9 	bl	800bf4c <find_volume>
 800c79a:	4603      	mov	r3, r0
 800c79c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	if (res == FR_OK) {
 800c7a0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	f040 828c 	bne.w	800ccc2 <f_open+0x55a>
		dj.obj.fs = fs;
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c7ae:	68ba      	ldr	r2, [r7, #8]
 800c7b0:	f107 0318 	add.w	r3, r7, #24
 800c7b4:	4611      	mov	r1, r2
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f7ff fa72 	bl	800bca0 <follow_path>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c7c2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d11a      	bne.n	800c800 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c7ca:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800c7ce:	b25b      	sxtb	r3, r3
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	da03      	bge.n	800c7dc <f_open+0x74>
				res = FR_INVALID_NAME;
 800c7d4:	2306      	movs	r3, #6
 800c7d6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800c7da:	e011      	b.n	800c800 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c7dc:	79fb      	ldrb	r3, [r7, #7]
 800c7de:	f023 0301 	bic.w	r3, r3, #1
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	bf14      	ite	ne
 800c7e6:	2301      	movne	r3, #1
 800c7e8:	2300      	moveq	r3, #0
 800c7ea:	b2db      	uxtb	r3, r3
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	f107 0318 	add.w	r3, r7, #24
 800c7f2:	4611      	mov	r1, r2
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f7fc fd29 	bl	800924c <chk_lock>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c800:	79fb      	ldrb	r3, [r7, #7]
 800c802:	f003 031c 	and.w	r3, r3, #28
 800c806:	2b00      	cmp	r3, #0
 800c808:	f000 8109 	beq.w	800ca1e <f_open+0x2b6>
			if (res != FR_OK) {					/* No file, create new */
 800c80c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c810:	2b00      	cmp	r3, #0
 800c812:	d017      	beq.n	800c844 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c814:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c818:	2b04      	cmp	r3, #4
 800c81a:	d10e      	bne.n	800c83a <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c81c:	f7fc fd72 	bl	8009304 <enq_lock>
 800c820:	4603      	mov	r3, r0
 800c822:	2b00      	cmp	r3, #0
 800c824:	d006      	beq.n	800c834 <f_open+0xcc>
 800c826:	f107 0318 	add.w	r3, r7, #24
 800c82a:	4618      	mov	r0, r3
 800c82c:	f7fe fde4 	bl	800b3f8 <dir_register>
 800c830:	4603      	mov	r3, r0
 800c832:	e000      	b.n	800c836 <f_open+0xce>
 800c834:	2312      	movs	r3, #18
 800c836:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c83a:	79fb      	ldrb	r3, [r7, #7]
 800c83c:	f043 0308 	orr.w	r3, r3, #8
 800c840:	71fb      	strb	r3, [r7, #7]
 800c842:	e010      	b.n	800c866 <f_open+0xfe>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c844:	7fbb      	ldrb	r3, [r7, #30]
 800c846:	f003 0311 	and.w	r3, r3, #17
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d003      	beq.n	800c856 <f_open+0xee>
					res = FR_DENIED;
 800c84e:	2307      	movs	r3, #7
 800c850:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800c854:	e007      	b.n	800c866 <f_open+0xfe>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c856:	79fb      	ldrb	r3, [r7, #7]
 800c858:	f003 0304 	and.w	r3, r3, #4
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d002      	beq.n	800c866 <f_open+0xfe>
 800c860:	2308      	movs	r3, #8
 800c862:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c866:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	f040 80f1 	bne.w	800ca52 <f_open+0x2ea>
 800c870:	79fb      	ldrb	r3, [r7, #7]
 800c872:	f003 0308 	and.w	r3, r3, #8
 800c876:	2b00      	cmp	r3, #0
 800c878:	f000 80eb 	beq.w	800ca52 <f_open+0x2ea>
				dw = GET_FATTIME();
 800c87c:	f7f9 fa0c 	bl	8005c98 <get_fattime>
 800c880:	6778      	str	r0, [r7, #116]	; 0x74
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	781b      	ldrb	r3, [r3, #0]
 800c886:	2b04      	cmp	r3, #4
 800c888:	f040 8082 	bne.w	800c990 <f_open+0x228>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800c88c:	697a      	ldr	r2, [r7, #20]
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	695b      	ldr	r3, [r3, #20]
 800c896:	3334      	adds	r3, #52	; 0x34
 800c898:	4618      	mov	r0, r3
 800c89a:	f7fc faab 	bl	8008df4 <ld_dword>
 800c89e:	4602      	mov	r2, r0
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	695b      	ldr	r3, [r3, #20]
 800c8a8:	3338      	adds	r3, #56	; 0x38
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f7fc fac5 	bl	8008e3a <ld_qword>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	460c      	mov	r4, r1
 800c8b4:	68fa      	ldr	r2, [r7, #12]
 800c8b6:	e9c2 3404 	strd	r3, r4, [r2, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	695b      	ldr	r3, [r3, #20]
 800c8be:	3321      	adds	r3, #33	; 0x21
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	f003 0302 	and.w	r3, r3, #2
 800c8c6:	b2da      	uxtb	r2, r3
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	695b      	ldr	r3, [r3, #20]
 800c8d6:	3308      	adds	r3, #8
 800c8d8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f7fc fb85 	bl	8008fea <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	695b      	ldr	r3, [r3, #20]
 800c8e4:	3314      	adds	r3, #20
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	695b      	ldr	r3, [r3, #20]
 800c8ee:	330c      	adds	r3, #12
 800c8f0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7fc fb79 	bl	8008fea <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	695b      	ldr	r3, [r3, #20]
 800c8fc:	3315      	adds	r3, #21
 800c8fe:	2200      	movs	r2, #0
 800c900:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	695b      	ldr	r3, [r3, #20]
 800c906:	3304      	adds	r3, #4
 800c908:	2220      	movs	r2, #32
 800c90a:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	695b      	ldr	r3, [r3, #20]
 800c910:	3334      	adds	r3, #52	; 0x34
 800c912:	2100      	movs	r1, #0
 800c914:	4618      	mov	r0, r3
 800c916:	f7fc fb68 	bl	8008fea <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	695b      	ldr	r3, [r3, #20]
 800c91e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c922:	f04f 0200 	mov.w	r2, #0
 800c926:	f04f 0300 	mov.w	r3, #0
 800c92a:	4608      	mov	r0, r1
 800c92c:	f7fc fb89 	bl	8009042 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	695b      	ldr	r3, [r3, #20]
 800c934:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800c938:	f04f 0200 	mov.w	r2, #0
 800c93c:	f04f 0300 	mov.w	r3, #0
 800c940:	4608      	mov	r0, r1
 800c942:	f7fc fb7e 	bl	8009042 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	695b      	ldr	r3, [r3, #20]
 800c94a:	3321      	adds	r3, #33	; 0x21
 800c94c:	2201      	movs	r2, #1
 800c94e:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800c950:	f107 0318 	add.w	r3, r7, #24
 800c954:	4618      	mov	r0, r3
 800c956:	f7fe fa9c 	bl	800ae92 <store_xdir>
 800c95a:	4603      	mov	r3, r0
 800c95c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800c960:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c964:	2b00      	cmp	r3, #0
 800c966:	d174      	bne.n	800ca52 <f_open+0x2ea>
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	689b      	ldr	r3, [r3, #8]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d070      	beq.n	800ca52 <f_open+0x2ea>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800c970:	68f8      	ldr	r0, [r7, #12]
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	689b      	ldr	r3, [r3, #8]
 800c976:	2200      	movs	r2, #0
 800c978:	4619      	mov	r1, r3
 800c97a:	f7fd faa7 	bl	8009ecc <remove_chain>
 800c97e:	4603      	mov	r3, r0
 800c980:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	689a      	ldr	r2, [r3, #8]
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	3a01      	subs	r2, #1
 800c98c:	619a      	str	r2, [r3, #24]
 800c98e:	e060      	b.n	800ca52 <f_open+0x2ea>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c992:	330e      	adds	r3, #14
 800c994:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800c996:	4618      	mov	r0, r3
 800c998:	f7fc fb27 	bl	8008fea <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c99c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c99e:	3316      	adds	r3, #22
 800c9a0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f7fc fb21 	bl	8008fea <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c9a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9aa:	330b      	adds	r3, #11
 800c9ac:	2220      	movs	r2, #32
 800c9ae:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c9b4:	4611      	mov	r1, r2
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f7fd fe5a 	bl	800a670 <ld_clust>
 800c9bc:	6738      	str	r0, [r7, #112]	; 0x70
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7fd fe72 	bl	800a6ae <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c9ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9cc:	331c      	adds	r3, #28
 800c9ce:	2100      	movs	r1, #0
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f7fc fb0a 	bl	8008fea <st_dword>
					fs->wflag = 1;
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	2201      	movs	r2, #1
 800c9da:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c9dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d037      	beq.n	800ca52 <f_open+0x2ea>
						dw = fs->winsect;
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9e6:	677b      	str	r3, [r7, #116]	; 0x74
						res = remove_chain(&dj.obj, cl, 0);
 800c9e8:	f107 0318 	add.w	r3, r7, #24
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7fd fa6b 	bl	8009ecc <remove_chain>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						if (res == FR_OK) {
 800c9fc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d126      	bne.n	800ca52 <f_open+0x2ea>
							res = move_window(fs, dw);
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f7fc fdcf 	bl	80095ac <move_window>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ca18:	3a01      	subs	r2, #1
 800ca1a:	619a      	str	r2, [r3, #24]
 800ca1c:	e019      	b.n	800ca52 <f_open+0x2ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ca1e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d115      	bne.n	800ca52 <f_open+0x2ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ca26:	7fbb      	ldrb	r3, [r7, #30]
 800ca28:	f003 0310 	and.w	r3, r3, #16
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d003      	beq.n	800ca38 <f_open+0x2d0>
					res = FR_NO_FILE;
 800ca30:	2304      	movs	r3, #4
 800ca32:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800ca36:	e00c      	b.n	800ca52 <f_open+0x2ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ca38:	79fb      	ldrb	r3, [r7, #7]
 800ca3a:	f003 0302 	and.w	r3, r3, #2
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d007      	beq.n	800ca52 <f_open+0x2ea>
 800ca42:	7fbb      	ldrb	r3, [r7, #30]
 800ca44:	f003 0301 	and.w	r3, r3, #1
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d002      	beq.n	800ca52 <f_open+0x2ea>
						res = FR_DENIED;
 800ca4c:	2307      	movs	r3, #7
 800ca4e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					}
				}
			}
		}
		if (res == FR_OK) {
 800ca52:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d128      	bne.n	800caac <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ca5a:	79fb      	ldrb	r3, [r7, #7]
 800ca5c:	f003 0308 	and.w	r3, r3, #8
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d003      	beq.n	800ca6c <f_open+0x304>
				mode |= FA_MODIFIED;
 800ca64:	79fb      	ldrb	r3, [r7, #7]
 800ca66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca6a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800ca74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ca7a:	79fb      	ldrb	r3, [r7, #7]
 800ca7c:	f023 0301 	bic.w	r3, r3, #1
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	bf14      	ite	ne
 800ca84:	2301      	movne	r3, #1
 800ca86:	2300      	moveq	r3, #0
 800ca88:	b2db      	uxtb	r3, r3
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	f107 0318 	add.w	r3, r7, #24
 800ca90:	4611      	mov	r1, r2
 800ca92:	4618      	mov	r0, r3
 800ca94:	f7fc fc58 	bl	8009348 <inc_lock>
 800ca98:	4602      	mov	r2, r0
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d102      	bne.n	800caac <f_open+0x344>
 800caa6:	2302      	movs	r3, #2
 800caa8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
		}
#endif

		if (res == FR_OK) {
 800caac:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	f040 8106 	bne.w	800ccc2 <f_open+0x55a>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	781b      	ldrb	r3, [r3, #0]
 800caba:	2b04      	cmp	r3, #4
 800cabc:	d12b      	bne.n	800cb16 <f_open+0x3ae>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800cabe:	6a3a      	ldr	r2, [r7, #32]
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800cac4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800cac8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cacc:	7ffa      	ldrb	r2, [r7, #31]
 800cace:	431a      	orrs	r2, r3
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800cad4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	695b      	ldr	r3, [r3, #20]
 800cade:	3334      	adds	r3, #52	; 0x34
 800cae0:	4618      	mov	r0, r3
 800cae2:	f7fc f987 	bl	8008df4 <ld_dword>
 800cae6:	4602      	mov	r2, r0
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	695b      	ldr	r3, [r3, #20]
 800caf0:	3338      	adds	r3, #56	; 0x38
 800caf2:	4618      	mov	r0, r3
 800caf4:	f7fc f9a1 	bl	8008e3a <ld_qword>
 800caf8:	4603      	mov	r3, r0
 800cafa:	460c      	mov	r4, r1
 800cafc:	68fa      	ldr	r2, [r7, #12]
 800cafe:	e9c2 3404 	strd	r3, r4, [r2, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	695b      	ldr	r3, [r3, #20]
 800cb06:	3321      	adds	r3, #33	; 0x21
 800cb08:	781b      	ldrb	r3, [r3, #0]
 800cb0a:	f003 0302 	and.w	r3, r3, #2
 800cb0e:	b2da      	uxtb	r2, r3
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	71da      	strb	r2, [r3, #7]
 800cb14:	e013      	b.n	800cb3e <f_open+0x3d6>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cb1a:	4611      	mov	r1, r2
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f7fd fda7 	bl	800a670 <ld_clust>
 800cb22:	4602      	mov	r2, r0
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cb28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb2a:	331c      	adds	r3, #28
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f7fc f961 	bl	8008df4 <ld_dword>
 800cb32:	4603      	mov	r3, r0
 800cb34:	f04f 0400 	mov.w	r4, #0
 800cb38:	68fa      	ldr	r2, [r7, #12]
 800cb3a:	e9c2 3404 	strd	r3, r4, [r2, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	2200      	movs	r2, #0
 800cb42:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cb44:	697a      	ldr	r2, [r7, #20]
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	88da      	ldrh	r2, [r3, #6]
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	79fa      	ldrb	r2, [r7, #7]
 800cb56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	2200      	movs	r2, #0
 800cb66:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cb68:	68fa      	ldr	r2, [r7, #12]
 800cb6a:	f04f 0300 	mov.w	r3, #0
 800cb6e:	f04f 0400 	mov.w	r4, #0
 800cb72:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	3354      	adds	r3, #84	; 0x54
 800cb7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cb7e:	2100      	movs	r1, #0
 800cb80:	4618      	mov	r0, r3
 800cb82:	f7fc fb06 	bl	8009192 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cb86:	79fb      	ldrb	r3, [r7, #7]
 800cb88:	f003 0320 	and.w	r3, r3, #32
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	f000 8098 	beq.w	800ccc2 <f_open+0x55a>
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800cb98:	4323      	orrs	r3, r4
 800cb9a:	f000 8092 	beq.w	800ccc2 <f_open+0x55a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800cba4:	68fa      	ldr	r2, [r7, #12]
 800cba6:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	895b      	ldrh	r3, [r3, #10]
 800cbae:	461a      	mov	r2, r3
 800cbb0:	697b      	ldr	r3, [r7, #20]
 800cbb2:	899b      	ldrh	r3, [r3, #12]
 800cbb4:	fb03 f302 	mul.w	r3, r3, r2
 800cbb8:	66fb      	str	r3, [r7, #108]	; 0x6c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	689b      	ldr	r3, [r3, #8]
 800cbbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800cbc8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 800cbcc:	e024      	b.n	800cc18 <f_open+0x4b0>
					clst = get_fat(&fp->obj, clst);
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f7fc fda7 	bl	8009728 <get_fat>
 800cbda:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					if (clst <= 1) res = FR_INT_ERR;
 800cbde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cbe2:	2b01      	cmp	r3, #1
 800cbe4:	d802      	bhi.n	800cbec <f_open+0x484>
 800cbe6:	2302      	movs	r3, #2
 800cbe8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800cbec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cbf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbf4:	d102      	bne.n	800cbfc <f_open+0x494>
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cbfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbfe:	469b      	mov	fp, r3
 800cc00:	f04f 0c00 	mov.w	ip, #0
 800cc04:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800cc08:	460b      	mov	r3, r1
 800cc0a:	4614      	mov	r4, r2
 800cc0c:	ebb3 030b 	subs.w	r3, r3, fp
 800cc10:	eb64 040c 	sbc.w	r4, r4, ip
 800cc14:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 800cc18:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d109      	bne.n	800cc34 <f_open+0x4cc>
 800cc20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc22:	4619      	mov	r1, r3
 800cc24:	f04f 0200 	mov.w	r2, #0
 800cc28:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800cc2c:	42a2      	cmp	r2, r4
 800cc2e:	bf08      	it	eq
 800cc30:	4299      	cmpeq	r1, r3
 800cc32:	d3cc      	bcc.n	800cbce <f_open+0x466>
				}
				fp->clust = clst;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cc3a:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800cc3c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d13e      	bne.n	800ccc2 <f_open+0x55a>
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	899b      	ldrh	r3, [r3, #12]
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	f04f 0400 	mov.w	r4, #0
 800cc4e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800cc52:	461a      	mov	r2, r3
 800cc54:	4623      	mov	r3, r4
 800cc56:	f7f3 ff19 	bl	8000a8c <__aeabi_uldivmod>
 800cc5a:	461c      	mov	r4, r3
 800cc5c:	4613      	mov	r3, r2
 800cc5e:	4323      	orrs	r3, r4
 800cc60:	d02f      	beq.n	800ccc2 <f_open+0x55a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f7fc fd3d 	bl	80096e8 <clust2sect>
 800cc6e:	66b8      	str	r0, [r7, #104]	; 0x68
 800cc70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d103      	bne.n	800cc7e <f_open+0x516>
						res = FR_INT_ERR;
 800cc76:	2302      	movs	r3, #2
 800cc78:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800cc7c:	e021      	b.n	800ccc2 <f_open+0x55a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	899b      	ldrh	r3, [r3, #12]
 800cc82:	b29b      	uxth	r3, r3
 800cc84:	f04f 0400 	mov.w	r4, #0
 800cc88:	461a      	mov	r2, r3
 800cc8a:	4623      	mov	r3, r4
 800cc8c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800cc90:	f7f3 fefc 	bl	8000a8c <__aeabi_uldivmod>
 800cc94:	4603      	mov	r3, r0
 800cc96:	460c      	mov	r4, r1
 800cc98:	461a      	mov	r2, r3
 800cc9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc9c:	441a      	add	r2, r3
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	7858      	ldrb	r0, [r3, #1]
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	f7fc f829 	bl	8008d08 <disk_read>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d002      	beq.n	800ccc2 <f_open+0x55a>
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ccc2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d002      	beq.n	800ccd0 <f_open+0x568>
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	2200      	movs	r2, #0
 800ccce:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ccd0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3788      	adds	r7, #136	; 0x88
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800ccde <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ccde:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cce0:	b091      	sub	sp, #68	; 0x44
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	60f8      	str	r0, [r7, #12]
 800cce6:	60b9      	str	r1, [r7, #8]
 800cce8:	607a      	str	r2, [r7, #4]
 800ccea:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	62fb      	str	r3, [r7, #44]	; 0x2c


	*br = 0;	/* Clear read byte counter */
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	f107 0214 	add.w	r2, r7, #20
 800ccfc:	4611      	mov	r1, r2
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f7ff fcb6 	bl	800c670 <validate>
 800cd04:	4603      	mov	r3, r0
 800cd06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cd0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d108      	bne.n	800cd24 <f_read+0x46>
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cd18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800cd1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d002      	beq.n	800cd2a <f_read+0x4c>
 800cd24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cd28:	e16a      	b.n	800d000 <f_read+0x322>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cd30:	f003 0301 	and.w	r3, r3, #1
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d101      	bne.n	800cd3c <f_read+0x5e>
 800cd38:	2307      	movs	r3, #7
 800cd3a:	e161      	b.n	800d000 <f_read+0x322>
	remain = fp->obj.objsize - fp->fptr;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	e9d3 560e 	ldrd	r5, r6, [r3, #56]	; 0x38
 800cd48:	460b      	mov	r3, r1
 800cd4a:	4614      	mov	r4, r2
 800cd4c:	1b5b      	subs	r3, r3, r5
 800cd4e:	eb64 0406 	sbc.w	r4, r4, r6
 800cd52:	e9c7 3408 	strd	r3, r4, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f04f 0400 	mov.w	r4, #0
 800cd5c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800cd60:	42a2      	cmp	r2, r4
 800cd62:	bf08      	it	eq
 800cd64:	4299      	cmpeq	r1, r3
 800cd66:	f080 8146 	bcs.w	800cff6 <f_read+0x318>
 800cd6a:	6a3b      	ldr	r3, [r7, #32]
 800cd6c:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800cd6e:	e142      	b.n	800cff6 <f_read+0x318>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	899b      	ldrh	r3, [r3, #12]
 800cd7a:	b29b      	uxth	r3, r3
 800cd7c:	f04f 0400 	mov.w	r4, #0
 800cd80:	461a      	mov	r2, r3
 800cd82:	4623      	mov	r3, r4
 800cd84:	f7f3 fe82 	bl	8000a8c <__aeabi_uldivmod>
 800cd88:	461c      	mov	r4, r3
 800cd8a:	4613      	mov	r3, r2
 800cd8c:	4323      	orrs	r3, r4
 800cd8e:	f040 80eb 	bne.w	800cf68 <f_read+0x28a>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800cd98:	697b      	ldr	r3, [r7, #20]
 800cd9a:	899b      	ldrh	r3, [r3, #12]
 800cd9c:	b29b      	uxth	r3, r3
 800cd9e:	f04f 0400 	mov.w	r4, #0
 800cda2:	461a      	mov	r2, r3
 800cda4:	4623      	mov	r3, r4
 800cda6:	f7f3 fe71 	bl	8000a8c <__aeabi_uldivmod>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	460c      	mov	r4, r1
 800cdae:	461a      	mov	r2, r3
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	895b      	ldrh	r3, [r3, #10]
 800cdb4:	3b01      	subs	r3, #1
 800cdb6:	4013      	ands	r3, r2
 800cdb8:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800cdba:	69fb      	ldr	r3, [r7, #28]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d134      	bne.n	800ce2a <f_read+0x14c>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800cdc6:	4323      	orrs	r3, r4
 800cdc8:	d103      	bne.n	800cdd2 <f_read+0xf4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	689b      	ldr	r3, [r3, #8]
 800cdce:	63bb      	str	r3, [r7, #56]	; 0x38
 800cdd0:	e015      	b.n	800cdfe <f_read+0x120>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d009      	beq.n	800cdee <f_read+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800cde0:	461a      	mov	r2, r3
 800cde2:	4623      	mov	r3, r4
 800cde4:	68f8      	ldr	r0, [r7, #12]
 800cde6:	f7fd fa26 	bl	800a236 <clmt_clust>
 800cdea:	63b8      	str	r0, [r7, #56]	; 0x38
 800cdec:	e007      	b.n	800cdfe <f_read+0x120>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800cdee:	68fa      	ldr	r2, [r7, #12]
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdf4:	4619      	mov	r1, r3
 800cdf6:	4610      	mov	r0, r2
 800cdf8:	f7fc fc96 	bl	8009728 <get_fat>
 800cdfc:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800cdfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce00:	2b01      	cmp	r3, #1
 800ce02:	d805      	bhi.n	800ce10 <f_read+0x132>
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2202      	movs	r2, #2
 800ce08:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ce0c:	2302      	movs	r3, #2
 800ce0e:	e0f7      	b.n	800d000 <f_read+0x322>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ce10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce16:	d105      	bne.n	800ce24 <f_read+0x146>
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ce20:	2301      	movs	r3, #1
 800ce22:	e0ed      	b.n	800d000 <f_read+0x322>
				fp->clust = clst;				/* Update current cluster */
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce28:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ce2a:	697a      	ldr	r2, [r7, #20]
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce30:	4619      	mov	r1, r3
 800ce32:	4610      	mov	r0, r2
 800ce34:	f7fc fc58 	bl	80096e8 <clust2sect>
 800ce38:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ce3a:	69bb      	ldr	r3, [r7, #24]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d105      	bne.n	800ce4c <f_read+0x16e>
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	2202      	movs	r2, #2
 800ce44:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ce48:	2302      	movs	r3, #2
 800ce4a:	e0d9      	b.n	800d000 <f_read+0x322>
			sect += csect;
 800ce4c:	69ba      	ldr	r2, [r7, #24]
 800ce4e:	69fb      	ldr	r3, [r7, #28]
 800ce50:	4413      	add	r3, r2
 800ce52:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ce54:	697b      	ldr	r3, [r7, #20]
 800ce56:	899b      	ldrh	r3, [r3, #12]
 800ce58:	461a      	mov	r2, r3
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce60:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ce62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d043      	beq.n	800cef0 <f_read+0x212>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ce68:	69fa      	ldr	r2, [r7, #28]
 800ce6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce6c:	4413      	add	r3, r2
 800ce6e:	697a      	ldr	r2, [r7, #20]
 800ce70:	8952      	ldrh	r2, [r2, #10]
 800ce72:	4293      	cmp	r3, r2
 800ce74:	d905      	bls.n	800ce82 <f_read+0x1a4>
					cc = fs->csize - csect;
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	895b      	ldrh	r3, [r3, #10]
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	69fb      	ldr	r3, [r7, #28]
 800ce7e:	1ad3      	subs	r3, r2, r3
 800ce80:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	7858      	ldrb	r0, [r3, #1]
 800ce86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce88:	69ba      	ldr	r2, [r7, #24]
 800ce8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce8c:	f7fb ff3c 	bl	8008d08 <disk_read>
 800ce90:	4603      	mov	r3, r0
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d005      	beq.n	800cea2 <f_read+0x1c4>
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	2201      	movs	r2, #1
 800ce9a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ce9e:	2301      	movs	r3, #1
 800cea0:	e0ae      	b.n	800d000 <f_read+0x322>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cea8:	b25b      	sxtb	r3, r3
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	da18      	bge.n	800cee0 <f_read+0x202>
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ceb2:	69bb      	ldr	r3, [r7, #24]
 800ceb4:	1ad3      	subs	r3, r2, r3
 800ceb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d911      	bls.n	800cee0 <f_read+0x202>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cec0:	69bb      	ldr	r3, [r7, #24]
 800cec2:	1ad3      	subs	r3, r2, r3
 800cec4:	697a      	ldr	r2, [r7, #20]
 800cec6:	8992      	ldrh	r2, [r2, #12]
 800cec8:	fb02 f303 	mul.w	r3, r2, r3
 800cecc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cece:	18d0      	adds	r0, r2, r3
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	899b      	ldrh	r3, [r3, #12]
 800ceda:	461a      	mov	r2, r3
 800cedc:	f7fc f938 	bl	8009150 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800cee0:	697b      	ldr	r3, [r7, #20]
 800cee2:	899b      	ldrh	r3, [r3, #12]
 800cee4:	461a      	mov	r2, r3
 800cee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cee8:	fb02 f303 	mul.w	r3, r2, r3
 800ceec:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
 800ceee:	e067      	b.n	800cfc0 <f_read+0x2e2>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cef4:	69ba      	ldr	r2, [r7, #24]
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d033      	beq.n	800cf62 <f_read+0x284>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cf00:	b25b      	sxtb	r3, r3
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	da1b      	bge.n	800cf3e <f_read+0x260>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	7858      	ldrb	r0, [r3, #1]
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf14:	2301      	movs	r3, #1
 800cf16:	f7fb ff17 	bl	8008d48 <disk_write>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d005      	beq.n	800cf2c <f_read+0x24e>
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	2201      	movs	r2, #1
 800cf24:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800cf28:	2301      	movs	r3, #1
 800cf2a:	e069      	b.n	800d000 <f_read+0x322>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cf32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf36:	b2da      	uxtb	r2, r3
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cf3e:	697b      	ldr	r3, [r7, #20]
 800cf40:	7858      	ldrb	r0, [r3, #1]
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800cf48:	2301      	movs	r3, #1
 800cf4a:	69ba      	ldr	r2, [r7, #24]
 800cf4c:	f7fb fedc 	bl	8008d08 <disk_read>
 800cf50:	4603      	mov	r3, r0
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d005      	beq.n	800cf62 <f_read+0x284>
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2201      	movs	r2, #1
 800cf5a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800cf5e:	2301      	movs	r3, #1
 800cf60:	e04e      	b.n	800d000 <f_read+0x322>
			}
#endif
			fp->sect = sect;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	69ba      	ldr	r2, [r7, #24]
 800cf66:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cf68:	697b      	ldr	r3, [r7, #20]
 800cf6a:	899b      	ldrh	r3, [r3, #12]
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800cf74:	697a      	ldr	r2, [r7, #20]
 800cf76:	8992      	ldrh	r2, [r2, #12]
 800cf78:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf7c:	fb02 f201 	mul.w	r2, r2, r1
 800cf80:	1a9b      	subs	r3, r3, r2
 800cf82:	1ac3      	subs	r3, r0, r3
 800cf84:	637b      	str	r3, [r7, #52]	; 0x34
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800cf86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d901      	bls.n	800cf92 <f_read+0x2b4>
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	637b      	str	r3, [r7, #52]	; 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	f103 0554 	add.w	r5, r3, #84	; 0x54
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	899b      	ldrh	r3, [r3, #12]
 800cfa2:	b29b      	uxth	r3, r3
 800cfa4:	f04f 0400 	mov.w	r4, #0
 800cfa8:	461a      	mov	r2, r3
 800cfaa:	4623      	mov	r3, r4
 800cfac:	f7f3 fd6e 	bl	8000a8c <__aeabi_uldivmod>
 800cfb0:	461c      	mov	r4, r3
 800cfb2:	4613      	mov	r3, r2
 800cfb4:	442b      	add	r3, r5
 800cfb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfb8:	4619      	mov	r1, r3
 800cfba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfbc:	f7fc f8c8 	bl	8009150 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800cfc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfc4:	4413      	add	r3, r2
 800cfc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 800cfce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfd0:	461d      	mov	r5, r3
 800cfd2:	f04f 0600 	mov.w	r6, #0
 800cfd6:	186b      	adds	r3, r5, r1
 800cfd8:	eb46 0402 	adc.w	r4, r6, r2
 800cfdc:	68fa      	ldr	r2, [r7, #12]
 800cfde:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	681a      	ldr	r2, [r3, #0]
 800cfe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfe8:	441a      	add	r2, r3
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	601a      	str	r2, [r3, #0]
 800cfee:	687a      	ldr	r2, [r7, #4]
 800cff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cff2:	1ad3      	subs	r3, r2, r3
 800cff4:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	f47f aeb9 	bne.w	800cd70 <f_read+0x92>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800cffe:	2300      	movs	r3, #0
}
 800d000:	4618      	mov	r0, r3
 800d002:	3744      	adds	r7, #68	; 0x44
 800d004:	46bd      	mov	sp, r7
 800d006:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d008 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d008:	b590      	push	{r4, r7, lr}
 800d00a:	b09b      	sub	sp, #108	; 0x6c
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d016:	4611      	mov	r1, r2
 800d018:	4618      	mov	r0, r3
 800d01a:	f7ff fb29 	bl	800c670 <validate>
 800d01e:	4603      	mov	r3, r0
 800d020:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d024:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d028:	2b00      	cmp	r3, #0
 800d02a:	f040 8109 	bne.w	800d240 <f_sync+0x238>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d038:	2b00      	cmp	r3, #0
 800d03a:	f000 8101 	beq.w	800d240 <f_sync+0x238>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d044:	b25b      	sxtb	r3, r3
 800d046:	2b00      	cmp	r3, #0
 800d048:	da17      	bge.n	800d07a <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d04a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d04c:	7858      	ldrb	r0, [r3, #1]
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d058:	2301      	movs	r3, #1
 800d05a:	f7fb fe75 	bl	8008d48 <disk_write>
 800d05e:	4603      	mov	r3, r0
 800d060:	2b00      	cmp	r3, #0
 800d062:	d001      	beq.n	800d068 <f_sync+0x60>
 800d064:	2301      	movs	r3, #1
 800d066:	e0ed      	b.n	800d244 <f_sync+0x23c>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d06e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d072:	b2da      	uxtb	r2, r3
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d07a:	f7f8 fe0d 	bl	8005c98 <get_fattime>
 800d07e:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800d080:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d082:	781b      	ldrb	r3, [r3, #0]
 800d084:	2b04      	cmp	r3, #4
 800d086:	f040 8090 	bne.w	800d1aa <f_sync+0x1a2>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	4618      	mov	r0, r3
 800d08e:	f7fc febd 	bl	8009e0c <fill_first_frag>
 800d092:	4603      	mov	r3, r0
 800d094:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800d098:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d10a      	bne.n	800d0b6 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0a6:	f04f 32ff 	mov.w	r2, #4294967295
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	f7fc fedd 	bl	8009e6a <fill_last_frag>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 800d0b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	f040 80c0 	bne.w	800d240 <f_sync+0x238>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800d0c0:	687a      	ldr	r2, [r7, #4]
 800d0c2:	f107 0308 	add.w	r3, r7, #8
 800d0c6:	4611      	mov	r1, r2
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f7fd fea5 	bl	800ae18 <load_obj_dir>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 800d0d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	f040 80b1 	bne.w	800d240 <f_sync+0x238>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800d0de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0e0:	695b      	ldr	r3, [r3, #20]
 800d0e2:	3304      	adds	r3, #4
 800d0e4:	781a      	ldrb	r2, [r3, #0]
 800d0e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0e8:	695b      	ldr	r3, [r3, #20]
 800d0ea:	3304      	adds	r3, #4
 800d0ec:	f042 0220 	orr.w	r2, r2, #32
 800d0f0:	b2d2      	uxtb	r2, r2
 800d0f2:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	79da      	ldrb	r2, [r3, #7]
 800d0f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0fa:	695b      	ldr	r3, [r3, #20]
 800d0fc:	3321      	adds	r3, #33	; 0x21
 800d0fe:	f042 0201 	orr.w	r2, r2, #1
 800d102:	b2d2      	uxtb	r2, r2
 800d104:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800d106:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d108:	695b      	ldr	r3, [r3, #20]
 800d10a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	689b      	ldr	r3, [r3, #8]
 800d112:	4619      	mov	r1, r3
 800d114:	4610      	mov	r0, r2
 800d116:	f7fb ff68 	bl	8008fea <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800d11a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d11c:	695b      	ldr	r3, [r3, #20]
 800d11e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800d128:	461a      	mov	r2, r3
 800d12a:	4623      	mov	r3, r4
 800d12c:	4608      	mov	r0, r1
 800d12e:	f7fb ff88 	bl	8009042 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800d132:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d134:	695b      	ldr	r3, [r3, #20]
 800d136:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800d140:	461a      	mov	r2, r3
 800d142:	4623      	mov	r3, r4
 800d144:	4608      	mov	r0, r1
 800d146:	f7fb ff7c 	bl	8009042 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800d14a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d14c:	695b      	ldr	r3, [r3, #20]
 800d14e:	330c      	adds	r3, #12
 800d150:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d152:	4618      	mov	r0, r3
 800d154:	f7fb ff49 	bl	8008fea <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800d158:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d15a:	695b      	ldr	r3, [r3, #20]
 800d15c:	3315      	adds	r3, #21
 800d15e:	2200      	movs	r2, #0
 800d160:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800d162:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d164:	695b      	ldr	r3, [r3, #20]
 800d166:	3310      	adds	r3, #16
 800d168:	2100      	movs	r1, #0
 800d16a:	4618      	mov	r0, r3
 800d16c:	f7fb ff3d 	bl	8008fea <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800d170:	f107 0308 	add.w	r3, r7, #8
 800d174:	4618      	mov	r0, r3
 800d176:	f7fd fe8c 	bl	800ae92 <store_xdir>
 800d17a:	4603      	mov	r3, r0
 800d17c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800d180:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d184:	2b00      	cmp	r3, #0
 800d186:	d15b      	bne.n	800d240 <f_sync+0x238>
							res = sync_fs(fs);
 800d188:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d18a:	4618      	mov	r0, r3
 800d18c:	f7fc fa3c 	bl	8009608 <sync_fs>
 800d190:	4603      	mov	r3, r0
 800d192:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d19c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d1a0:	b2da      	uxtb	r2, r3
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800d1a8:	e04a      	b.n	800d240 <f_sync+0x238>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d1aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d1b0:	4619      	mov	r1, r3
 800d1b2:	4610      	mov	r0, r2
 800d1b4:	f7fc f9fa 	bl	80095ac <move_window>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800d1be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d13c      	bne.n	800d240 <f_sync+0x238>
					dir = fp->dir_ptr;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1ca:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d1cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1ce:	330b      	adds	r3, #11
 800d1d0:	781a      	ldrb	r2, [r3, #0]
 800d1d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1d4:	330b      	adds	r3, #11
 800d1d6:	f042 0220 	orr.w	r2, r2, #32
 800d1da:	b2d2      	uxtb	r2, r2
 800d1dc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6818      	ldr	r0, [r3, #0]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	689b      	ldr	r3, [r3, #8]
 800d1e6:	461a      	mov	r2, r3
 800d1e8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d1ea:	f7fd fa60 	bl	800a6ae <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d1ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1f0:	f103 021c 	add.w	r2, r3, #28
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800d1fa:	4619      	mov	r1, r3
 800d1fc:	4610      	mov	r0, r2
 800d1fe:	f7fb fef4 	bl	8008fea <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d202:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d204:	3316      	adds	r3, #22
 800d206:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d208:	4618      	mov	r0, r3
 800d20a:	f7fb feee 	bl	8008fea <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d20e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d210:	3312      	adds	r3, #18
 800d212:	2100      	movs	r1, #0
 800d214:	4618      	mov	r0, r3
 800d216:	f7fb fecd 	bl	8008fb4 <st_word>
					fs->wflag = 1;
 800d21a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d21c:	2201      	movs	r2, #1
 800d21e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d220:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d222:	4618      	mov	r0, r3
 800d224:	f7fc f9f0 	bl	8009608 <sync_fs>
 800d228:	4603      	mov	r3, r0
 800d22a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d238:	b2da      	uxtb	r2, r3
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d240:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d244:	4618      	mov	r0, r3
 800d246:	376c      	adds	r7, #108	; 0x6c
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd90      	pop	{r4, r7, pc}

0800d24c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b084      	sub	sp, #16
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f7ff fed7 	bl	800d008 <f_sync>
 800d25a:	4603      	mov	r3, r0
 800d25c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d25e:	7bfb      	ldrb	r3, [r7, #15]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d118      	bne.n	800d296 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f107 0208 	add.w	r2, r7, #8
 800d26a:	4611      	mov	r1, r2
 800d26c:	4618      	mov	r0, r3
 800d26e:	f7ff f9ff 	bl	800c670 <validate>
 800d272:	4603      	mov	r3, r0
 800d274:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d276:	7bfb      	ldrb	r3, [r7, #15]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d10c      	bne.n	800d296 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d280:	4618      	mov	r0, r3
 800d282:	f7fc f8ef 	bl	8009464 <dec_lock>
 800d286:	4603      	mov	r3, r0
 800d288:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d28a:	7bfb      	ldrb	r3, [r7, #15]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d102      	bne.n	800d296 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2200      	movs	r2, #0
 800d294:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d296:	7bfb      	ldrb	r3, [r7, #15]
}
 800d298:	4618      	mov	r0, r3
 800d29a:	3710      	adds	r7, #16
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}

0800d2a0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800d2a0:	b590      	push	{r4, r7, lr}
 800d2a2:	b087      	sub	sp, #28
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d101      	bne.n	800d2b4 <f_opendir+0x14>
 800d2b0:	2309      	movs	r3, #9
 800d2b2:	e099      	b.n	800d3e8 <f_opendir+0x148>

	/* Get logical drive */
	obj = &dp->obj;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800d2b8:	f107 010c 	add.w	r1, r7, #12
 800d2bc:	463b      	mov	r3, r7
 800d2be:	2200      	movs	r2, #0
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f7fe fe43 	bl	800bf4c <find_volume>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d2ca:	7dfb      	ldrb	r3, [r7, #23]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	f040 8084 	bne.w	800d3da <f_opendir+0x13a>
		obj->fs = fs;
 800d2d2:	68fa      	ldr	r2, [r7, #12]
 800d2d4:	693b      	ldr	r3, [r7, #16]
 800d2d6:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	4619      	mov	r1, r3
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f7fe fcdf 	bl	800bca0 <follow_path>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800d2e6:	7dfb      	ldrb	r3, [r7, #23]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d171      	bne.n	800d3d0 <f_opendir+0x130>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800d2f2:	b25b      	sxtb	r3, r3
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	db46      	blt.n	800d386 <f_opendir+0xe6>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	799b      	ldrb	r3, [r3, #6]
 800d2fc:	f003 0310 	and.w	r3, r3, #16
 800d300:	2b00      	cmp	r3, #0
 800d302:	d03e      	beq.n	800d382 <f_opendir+0xe2>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	781b      	ldrb	r3, [r3, #0]
 800d308:	2b04      	cmp	r3, #4
 800d30a:	d12f      	bne.n	800d36c <f_opendir+0xcc>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	689a      	ldr	r2, [r3, #8]
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	621a      	str	r2, [r3, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800d314:	693b      	ldr	r3, [r7, #16]
 800d316:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800d31a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d31e:	693a      	ldr	r2, [r7, #16]
 800d320:	79d2      	ldrb	r2, [r2, #7]
 800d322:	431a      	orrs	r2, r3
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	625a      	str	r2, [r3, #36]	; 0x24
						obj->c_ofs = dp->blk_ofs;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	629a      	str	r2, [r3, #40]	; 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	695b      	ldr	r3, [r3, #20]
 800d334:	3334      	adds	r3, #52	; 0x34
 800d336:	4618      	mov	r0, r3
 800d338:	f7fb fd5c 	bl	8008df4 <ld_dword>
 800d33c:	4602      	mov	r2, r0
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	609a      	str	r2, [r3, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	695b      	ldr	r3, [r3, #20]
 800d346:	3338      	adds	r3, #56	; 0x38
 800d348:	4618      	mov	r0, r3
 800d34a:	f7fb fd76 	bl	8008e3a <ld_qword>
 800d34e:	4603      	mov	r3, r0
 800d350:	460c      	mov	r4, r1
 800d352:	693a      	ldr	r2, [r7, #16]
 800d354:	e9c2 3404 	strd	r3, r4, [r2, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	695b      	ldr	r3, [r3, #20]
 800d35c:	3321      	adds	r3, #33	; 0x21
 800d35e:	781b      	ldrb	r3, [r3, #0]
 800d360:	f003 0302 	and.w	r3, r3, #2
 800d364:	b2da      	uxtb	r2, r3
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	71da      	strb	r2, [r3, #7]
 800d36a:	e00c      	b.n	800d386 <f_opendir+0xe6>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800d36c:	68fa      	ldr	r2, [r7, #12]
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d372:	4619      	mov	r1, r3
 800d374:	4610      	mov	r0, r2
 800d376:	f7fd f97b 	bl	800a670 <ld_clust>
 800d37a:	4602      	mov	r2, r0
 800d37c:	693b      	ldr	r3, [r7, #16]
 800d37e:	609a      	str	r2, [r3, #8]
 800d380:	e001      	b.n	800d386 <f_opendir+0xe6>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800d382:	2305      	movs	r3, #5
 800d384:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800d386:	7dfb      	ldrb	r3, [r7, #23]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d121      	bne.n	800d3d0 <f_opendir+0x130>
				obj->id = fs->id;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	88da      	ldrh	r2, [r3, #6]
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800d394:	2100      	movs	r1, #0
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f7fc ff94 	bl	800a2c4 <dir_sdi>
 800d39c:	4603      	mov	r3, r0
 800d39e:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800d3a0:	7dfb      	ldrb	r3, [r7, #23]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d114      	bne.n	800d3d0 <f_opendir+0x130>
					if (obj->sclust) {
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	689b      	ldr	r3, [r3, #8]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d00d      	beq.n	800d3ca <f_opendir+0x12a>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800d3ae:	2100      	movs	r1, #0
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f7fb ffc9 	bl	8009348 <inc_lock>
 800d3b6:	4602      	mov	r2, r0
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	62da      	str	r2, [r3, #44]	; 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800d3bc:	693b      	ldr	r3, [r7, #16]
 800d3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d105      	bne.n	800d3d0 <f_opendir+0x130>
 800d3c4:	2312      	movs	r3, #18
 800d3c6:	75fb      	strb	r3, [r7, #23]
 800d3c8:	e002      	b.n	800d3d0 <f_opendir+0x130>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	62da      	str	r2, [r3, #44]	; 0x2c
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800d3d0:	7dfb      	ldrb	r3, [r7, #23]
 800d3d2:	2b04      	cmp	r3, #4
 800d3d4:	d101      	bne.n	800d3da <f_opendir+0x13a>
 800d3d6:	2305      	movs	r3, #5
 800d3d8:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800d3da:	7dfb      	ldrb	r3, [r7, #23]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d002      	beq.n	800d3e6 <f_opendir+0x146>
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d3e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	371c      	adds	r7, #28
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd90      	pop	{r4, r7, pc}

0800d3f0 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b084      	sub	sp, #16
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f107 0208 	add.w	r2, r7, #8
 800d3fe:	4611      	mov	r1, r2
 800d400:	4618      	mov	r0, r3
 800d402:	f7ff f935 	bl	800c670 <validate>
 800d406:	4603      	mov	r3, r0
 800d408:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d40a:	7bfb      	ldrb	r3, [r7, #15]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d110      	bne.n	800d432 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d414:	2b00      	cmp	r3, #0
 800d416:	d006      	beq.n	800d426 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d41c:	4618      	mov	r0, r3
 800d41e:	f7fc f821 	bl	8009464 <dec_lock>
 800d422:	4603      	mov	r3, r0
 800d424:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800d426:	7bfb      	ldrb	r3, [r7, #15]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d102      	bne.n	800d432 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2200      	movs	r2, #0
 800d430:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800d432:	7bfb      	ldrb	r3, [r7, #15]
}
 800d434:	4618      	mov	r0, r3
 800d436:	3710      	adds	r7, #16
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b084      	sub	sp, #16
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f107 0208 	add.w	r2, r7, #8
 800d44c:	4611      	mov	r1, r2
 800d44e:	4618      	mov	r0, r3
 800d450:	f7ff f90e 	bl	800c670 <validate>
 800d454:	4603      	mov	r3, r0
 800d456:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d458:	7bfb      	ldrb	r3, [r7, #15]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d126      	bne.n	800d4ac <f_readdir+0x70>
		if (!fno) {
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d106      	bne.n	800d472 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800d464:	2100      	movs	r1, #0
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f7fc ff2c 	bl	800a2c4 <dir_sdi>
 800d46c:	4603      	mov	r3, r0
 800d46e:	73fb      	strb	r3, [r7, #15]
 800d470:	e01c      	b.n	800d4ac <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800d472:	2100      	movs	r1, #0
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f7fd fdce 	bl	800b016 <dir_read>
 800d47a:	4603      	mov	r3, r0
 800d47c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800d47e:	7bfb      	ldrb	r3, [r7, #15]
 800d480:	2b04      	cmp	r3, #4
 800d482:	d101      	bne.n	800d488 <f_readdir+0x4c>
 800d484:	2300      	movs	r3, #0
 800d486:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800d488:	7bfb      	ldrb	r3, [r7, #15]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d10e      	bne.n	800d4ac <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800d48e:	6839      	ldr	r1, [r7, #0]
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f7fe f961 	bl	800b758 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800d496:	2100      	movs	r1, #0
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f7fc ffa7 	bl	800a3ec <dir_next>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800d4a2:	7bfb      	ldrb	r3, [r7, #15]
 800d4a4:	2b04      	cmp	r3, #4
 800d4a6:	d101      	bne.n	800d4ac <f_readdir+0x70>
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800d4ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3710      	adds	r7, #16
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}

0800d4b6 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d4b6:	b580      	push	{r7, lr}
 800d4b8:	b098      	sub	sp, #96	; 0x60
 800d4ba:	af00      	add	r7, sp, #0
 800d4bc:	6078      	str	r0, [r7, #4]
 800d4be:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800d4c0:	f107 0108 	add.w	r1, r7, #8
 800d4c4:	1d3b      	adds	r3, r7, #4
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f7fe fd3f 	bl	800bf4c <find_volume>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800d4d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d11f      	bne.n	800d51c <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d4dc:	687a      	ldr	r2, [r7, #4]
 800d4de:	f107 0308 	add.w	r3, r7, #8
 800d4e2:	4611      	mov	r1, r2
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f7fe fbdb 	bl	800bca0 <follow_path>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) {				/* Follow completed */
 800d4f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d111      	bne.n	800d51c <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800d4f8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800d4fc:	b25b      	sxtb	r3, r3
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	da03      	bge.n	800d50a <f_stat+0x54>
				res = FR_INVALID_NAME;
 800d502:	2306      	movs	r3, #6
 800d504:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d508:	e008      	b.n	800d51c <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d005      	beq.n	800d51c <f_stat+0x66>
 800d510:	f107 0308 	add.w	r3, r7, #8
 800d514:	6839      	ldr	r1, [r7, #0]
 800d516:	4618      	mov	r0, r3
 800d518:	f7fe f91e 	bl	800b758 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800d51c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d520:	4618      	mov	r0, r3
 800d522:	3760      	adds	r7, #96	; 0x60
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}

0800d528 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b09a      	sub	sp, #104	; 0x68
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	60f8      	str	r0, [r7, #12]
 800d530:	60b9      	str	r1, [r7, #8]
 800d532:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800d534:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800d538:	f107 030c 	add.w	r3, r7, #12
 800d53c:	2200      	movs	r2, #0
 800d53e:	4618      	mov	r0, r3
 800d540:	f7fe fd04 	bl	800bf4c <find_volume>
 800d544:	4603      	mov	r3, r0
 800d546:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d54a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d54e:	2b00      	cmp	r3, #0
 800d550:	f040 80eb 	bne.w	800d72a <f_getfree+0x202>
		*fatfs = fs;				/* Return ptr to the fs object */
 800d554:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800d55a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d55c:	69da      	ldr	r2, [r3, #28]
 800d55e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d560:	6a1b      	ldr	r3, [r3, #32]
 800d562:	3b02      	subs	r3, #2
 800d564:	429a      	cmp	r2, r3
 800d566:	d804      	bhi.n	800d572 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800d568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d56a:	69da      	ldr	r2, [r3, #28]
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	601a      	str	r2, [r3, #0]
 800d570:	e0db      	b.n	800d72a <f_getfree+0x202>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800d572:	2300      	movs	r3, #0
 800d574:	663b      	str	r3, [r7, #96]	; 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800d576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d578:	781b      	ldrb	r3, [r3, #0]
 800d57a:	2b01      	cmp	r3, #1
 800d57c:	d128      	bne.n	800d5d0 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800d57e:	2302      	movs	r3, #2
 800d580:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d584:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 800d586:	f107 0310 	add.w	r3, r7, #16
 800d58a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d58c:	4618      	mov	r0, r3
 800d58e:	f7fc f8cb 	bl	8009728 <get_fat>
 800d592:	6478      	str	r0, [r7, #68]	; 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800d594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d59a:	d103      	bne.n	800d5a4 <f_getfree+0x7c>
 800d59c:	2301      	movs	r3, #1
 800d59e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d5a2:	e0b5      	b.n	800d710 <f_getfree+0x1e8>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800d5a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5a6:	2b01      	cmp	r3, #1
 800d5a8:	d103      	bne.n	800d5b2 <f_getfree+0x8a>
 800d5aa:	2302      	movs	r3, #2
 800d5ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d5b0:	e0ae      	b.n	800d710 <f_getfree+0x1e8>
					if (stat == 0) nfree++;
 800d5b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d102      	bne.n	800d5be <f_getfree+0x96>
 800d5b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	663b      	str	r3, [r7, #96]	; 0x60
				} while (++clst < fs->n_fatent);
 800d5be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5c0:	3301      	adds	r3, #1
 800d5c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d5c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5c6:	6a1b      	ldr	r3, [r3, #32]
 800d5c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d3db      	bcc.n	800d586 <f_getfree+0x5e>
 800d5ce:	e09f      	b.n	800d710 <f_getfree+0x1e8>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 800d5d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5d2:	781b      	ldrb	r3, [r3, #0]
 800d5d4:	2b04      	cmp	r3, #4
 800d5d6:	d14b      	bne.n	800d670 <f_getfree+0x148>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 800d5d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5da:	6a1b      	ldr	r3, [r3, #32]
 800d5dc:	3b02      	subs	r3, #2
 800d5de:	65fb      	str	r3, [r7, #92]	; 0x5c
					sect = fs->database;
 800d5e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5e4:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	657b      	str	r3, [r7, #84]	; 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800d5ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d10d      	bne.n	800d60c <f_getfree+0xe4>
 800d5f0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d5f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d5f4:	1c5a      	adds	r2, r3, #1
 800d5f6:	65ba      	str	r2, [r7, #88]	; 0x58
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	f7fb ffd7 	bl	80095ac <move_window>
 800d5fe:	4603      	mov	r3, r0
 800d600:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d604:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d17e      	bne.n	800d70a <f_getfree+0x1e2>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800d60c:	2308      	movs	r3, #8
 800d60e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d610:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d614:	4413      	add	r3, r2
 800d616:	333c      	adds	r3, #60	; 0x3c
 800d618:	781b      	ldrb	r3, [r3, #0]
 800d61a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d61e:	e013      	b.n	800d648 <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 800d620:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d624:	f003 0301 	and.w	r3, r3, #1
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d102      	bne.n	800d632 <f_getfree+0x10a>
 800d62c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d62e:	3301      	adds	r3, #1
 800d630:	663b      	str	r3, [r7, #96]	; 0x60
							bm >>= 1;
 800d632:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d636:	085b      	lsrs	r3, r3, #1
 800d638:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800d63c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d63e:	3b01      	subs	r3, #1
 800d640:	64bb      	str	r3, [r7, #72]	; 0x48
 800d642:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d644:	3b01      	subs	r3, #1
 800d646:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d002      	beq.n	800d654 <f_getfree+0x12c>
 800d64e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d650:	2b00      	cmp	r3, #0
 800d652:	d1e5      	bne.n	800d620 <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 800d654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d656:	3301      	adds	r3, #1
 800d658:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d65a:	8992      	ldrh	r2, [r2, #12]
 800d65c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d660:	fb02 f201 	mul.w	r2, r2, r1
 800d664:	1a9b      	subs	r3, r3, r2
 800d666:	657b      	str	r3, [r7, #84]	; 0x54
					} while (clst);
 800d668:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d1bd      	bne.n	800d5ea <f_getfree+0xc2>
 800d66e:	e04f      	b.n	800d710 <f_getfree+0x1e8>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800d670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d672:	6a1b      	ldr	r3, [r3, #32]
 800d674:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d67a:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0; p = 0;
 800d67c:	2300      	movs	r3, #0
 800d67e:	657b      	str	r3, [r7, #84]	; 0x54
 800d680:	2300      	movs	r3, #0
 800d682:	653b      	str	r3, [r7, #80]	; 0x50
					do {
						if (i == 0) {
 800d684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d686:	2b00      	cmp	r3, #0
 800d688:	d113      	bne.n	800d6b2 <f_getfree+0x18a>
							res = move_window(fs, sect++);
 800d68a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d68c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d68e:	1c5a      	adds	r2, r3, #1
 800d690:	65ba      	str	r2, [r7, #88]	; 0x58
 800d692:	4619      	mov	r1, r3
 800d694:	f7fb ff8a 	bl	80095ac <move_window>
 800d698:	4603      	mov	r3, r0
 800d69a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							if (res != FR_OK) break;
 800d69e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d133      	bne.n	800d70e <f_getfree+0x1e6>
							p = fs->win;
 800d6a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6a8:	333c      	adds	r3, #60	; 0x3c
 800d6aa:	653b      	str	r3, [r7, #80]	; 0x50
							i = SS(fs);
 800d6ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6ae:	899b      	ldrh	r3, [r3, #12]
 800d6b0:	657b      	str	r3, [r7, #84]	; 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 800d6b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	2b02      	cmp	r3, #2
 800d6b8:	d10f      	bne.n	800d6da <f_getfree+0x1b2>
							if (ld_word(p) == 0) nfree++;
 800d6ba:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d6bc:	f7fb fb82 	bl	8008dc4 <ld_word>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d102      	bne.n	800d6cc <f_getfree+0x1a4>
 800d6c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d6c8:	3301      	adds	r3, #1
 800d6ca:	663b      	str	r3, [r7, #96]	; 0x60
							p += 2; i -= 2;
 800d6cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6ce:	3302      	adds	r3, #2
 800d6d0:	653b      	str	r3, [r7, #80]	; 0x50
 800d6d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6d4:	3b02      	subs	r3, #2
 800d6d6:	657b      	str	r3, [r7, #84]	; 0x54
 800d6d8:	e010      	b.n	800d6fc <f_getfree+0x1d4>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800d6da:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d6dc:	f7fb fb8a 	bl	8008df4 <ld_dword>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d102      	bne.n	800d6f0 <f_getfree+0x1c8>
 800d6ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d6ec:	3301      	adds	r3, #1
 800d6ee:	663b      	str	r3, [r7, #96]	; 0x60
							p += 4; i -= 4;
 800d6f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6f2:	3304      	adds	r3, #4
 800d6f4:	653b      	str	r3, [r7, #80]	; 0x50
 800d6f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6f8:	3b04      	subs	r3, #4
 800d6fa:	657b      	str	r3, [r7, #84]	; 0x54
						}
					} while (--clst);
 800d6fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6fe:	3b01      	subs	r3, #1
 800d700:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d702:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d704:	2b00      	cmp	r3, #0
 800d706:	d1bd      	bne.n	800d684 <f_getfree+0x15c>
 800d708:	e002      	b.n	800d710 <f_getfree+0x1e8>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800d70a:	bf00      	nop
 800d70c:	e000      	b.n	800d710 <f_getfree+0x1e8>
							if (res != FR_OK) break;
 800d70e:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d714:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800d716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d718:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d71a:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800d71c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d71e:	791a      	ldrb	r2, [r3, #4]
 800d720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d722:	f042 0201 	orr.w	r2, r2, #1
 800d726:	b2d2      	uxtb	r2, r2
 800d728:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800d72a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d72e:	4618      	mov	r0, r3
 800d730:	3768      	adds	r7, #104	; 0x68
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}
	...

0800d738 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d738:	b480      	push	{r7}
 800d73a:	b087      	sub	sp, #28
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	60f8      	str	r0, [r7, #12]
 800d740:	60b9      	str	r1, [r7, #8]
 800d742:	4613      	mov	r3, r2
 800d744:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d746:	2301      	movs	r3, #1
 800d748:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d74a:	2300      	movs	r3, #0
 800d74c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d74e:	4b1f      	ldr	r3, [pc, #124]	; (800d7cc <FATFS_LinkDriverEx+0x94>)
 800d750:	7a5b      	ldrb	r3, [r3, #9]
 800d752:	b2db      	uxtb	r3, r3
 800d754:	2b00      	cmp	r3, #0
 800d756:	d131      	bne.n	800d7bc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d758:	4b1c      	ldr	r3, [pc, #112]	; (800d7cc <FATFS_LinkDriverEx+0x94>)
 800d75a:	7a5b      	ldrb	r3, [r3, #9]
 800d75c:	b2db      	uxtb	r3, r3
 800d75e:	461a      	mov	r2, r3
 800d760:	4b1a      	ldr	r3, [pc, #104]	; (800d7cc <FATFS_LinkDriverEx+0x94>)
 800d762:	2100      	movs	r1, #0
 800d764:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d766:	4b19      	ldr	r3, [pc, #100]	; (800d7cc <FATFS_LinkDriverEx+0x94>)
 800d768:	7a5b      	ldrb	r3, [r3, #9]
 800d76a:	b2db      	uxtb	r3, r3
 800d76c:	4a17      	ldr	r2, [pc, #92]	; (800d7cc <FATFS_LinkDriverEx+0x94>)
 800d76e:	009b      	lsls	r3, r3, #2
 800d770:	4413      	add	r3, r2
 800d772:	68fa      	ldr	r2, [r7, #12]
 800d774:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d776:	4b15      	ldr	r3, [pc, #84]	; (800d7cc <FATFS_LinkDriverEx+0x94>)
 800d778:	7a5b      	ldrb	r3, [r3, #9]
 800d77a:	b2db      	uxtb	r3, r3
 800d77c:	461a      	mov	r2, r3
 800d77e:	4b13      	ldr	r3, [pc, #76]	; (800d7cc <FATFS_LinkDriverEx+0x94>)
 800d780:	4413      	add	r3, r2
 800d782:	79fa      	ldrb	r2, [r7, #7]
 800d784:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d786:	4b11      	ldr	r3, [pc, #68]	; (800d7cc <FATFS_LinkDriverEx+0x94>)
 800d788:	7a5b      	ldrb	r3, [r3, #9]
 800d78a:	b2db      	uxtb	r3, r3
 800d78c:	1c5a      	adds	r2, r3, #1
 800d78e:	b2d1      	uxtb	r1, r2
 800d790:	4a0e      	ldr	r2, [pc, #56]	; (800d7cc <FATFS_LinkDriverEx+0x94>)
 800d792:	7251      	strb	r1, [r2, #9]
 800d794:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d796:	7dbb      	ldrb	r3, [r7, #22]
 800d798:	3330      	adds	r3, #48	; 0x30
 800d79a:	b2da      	uxtb	r2, r3
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	223a      	movs	r2, #58	; 0x3a
 800d7a6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	3302      	adds	r3, #2
 800d7ac:	222f      	movs	r2, #47	; 0x2f
 800d7ae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	3303      	adds	r3, #3
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d7bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	371c      	adds	r7, #28
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c8:	4770      	bx	lr
 800d7ca:	bf00      	nop
 800d7cc:	20000544 	.word	0x20000544

0800d7d0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b082      	sub	sp, #8
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
 800d7d8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d7da:	2200      	movs	r2, #0
 800d7dc:	6839      	ldr	r1, [r7, #0]
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f7ff ffaa 	bl	800d738 <FATFS_LinkDriverEx>
 800d7e4:	4603      	mov	r3, r0
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3708      	adds	r7, #8
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}
	...

0800d7f0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b085      	sub	sp, #20
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	6039      	str	r1, [r7, #0]
 800d7fa:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d7fc:	88fb      	ldrh	r3, [r7, #6]
 800d7fe:	2b7f      	cmp	r3, #127	; 0x7f
 800d800:	d802      	bhi.n	800d808 <ff_convert+0x18>
		c = chr;
 800d802:	88fb      	ldrh	r3, [r7, #6]
 800d804:	81fb      	strh	r3, [r7, #14]
 800d806:	e025      	b.n	800d854 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d00b      	beq.n	800d826 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d80e:	88fb      	ldrh	r3, [r7, #6]
 800d810:	2bff      	cmp	r3, #255	; 0xff
 800d812:	d805      	bhi.n	800d820 <ff_convert+0x30>
 800d814:	88fb      	ldrh	r3, [r7, #6]
 800d816:	3b80      	subs	r3, #128	; 0x80
 800d818:	4a12      	ldr	r2, [pc, #72]	; (800d864 <ff_convert+0x74>)
 800d81a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d81e:	e000      	b.n	800d822 <ff_convert+0x32>
 800d820:	2300      	movs	r3, #0
 800d822:	81fb      	strh	r3, [r7, #14]
 800d824:	e016      	b.n	800d854 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d826:	2300      	movs	r3, #0
 800d828:	81fb      	strh	r3, [r7, #14]
 800d82a:	e009      	b.n	800d840 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d82c:	89fb      	ldrh	r3, [r7, #14]
 800d82e:	4a0d      	ldr	r2, [pc, #52]	; (800d864 <ff_convert+0x74>)
 800d830:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d834:	88fa      	ldrh	r2, [r7, #6]
 800d836:	429a      	cmp	r2, r3
 800d838:	d006      	beq.n	800d848 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d83a:	89fb      	ldrh	r3, [r7, #14]
 800d83c:	3301      	adds	r3, #1
 800d83e:	81fb      	strh	r3, [r7, #14]
 800d840:	89fb      	ldrh	r3, [r7, #14]
 800d842:	2b7f      	cmp	r3, #127	; 0x7f
 800d844:	d9f2      	bls.n	800d82c <ff_convert+0x3c>
 800d846:	e000      	b.n	800d84a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d848:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d84a:	89fb      	ldrh	r3, [r7, #14]
 800d84c:	3380      	adds	r3, #128	; 0x80
 800d84e:	b29b      	uxth	r3, r3
 800d850:	b2db      	uxtb	r3, r3
 800d852:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d854:	89fb      	ldrh	r3, [r7, #14]
}
 800d856:	4618      	mov	r0, r3
 800d858:	3714      	adds	r7, #20
 800d85a:	46bd      	mov	sp, r7
 800d85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d860:	4770      	bx	lr
 800d862:	bf00      	nop
 800d864:	0800ee9c 	.word	0x0800ee9c

0800d868 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d868:	b480      	push	{r7}
 800d86a:	b087      	sub	sp, #28
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	4603      	mov	r3, r0
 800d870:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d872:	88fb      	ldrh	r3, [r7, #6]
 800d874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d878:	d201      	bcs.n	800d87e <ff_wtoupper+0x16>
 800d87a:	4b3e      	ldr	r3, [pc, #248]	; (800d974 <ff_wtoupper+0x10c>)
 800d87c:	e000      	b.n	800d880 <ff_wtoupper+0x18>
 800d87e:	4b3e      	ldr	r3, [pc, #248]	; (800d978 <ff_wtoupper+0x110>)
 800d880:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	1c9a      	adds	r2, r3, #2
 800d886:	617a      	str	r2, [r7, #20]
 800d888:	881b      	ldrh	r3, [r3, #0]
 800d88a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d88c:	8a7b      	ldrh	r3, [r7, #18]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d068      	beq.n	800d964 <ff_wtoupper+0xfc>
 800d892:	88fa      	ldrh	r2, [r7, #6]
 800d894:	8a7b      	ldrh	r3, [r7, #18]
 800d896:	429a      	cmp	r2, r3
 800d898:	d364      	bcc.n	800d964 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	1c9a      	adds	r2, r3, #2
 800d89e:	617a      	str	r2, [r7, #20]
 800d8a0:	881b      	ldrh	r3, [r3, #0]
 800d8a2:	823b      	strh	r3, [r7, #16]
 800d8a4:	8a3b      	ldrh	r3, [r7, #16]
 800d8a6:	0a1b      	lsrs	r3, r3, #8
 800d8a8:	81fb      	strh	r3, [r7, #14]
 800d8aa:	8a3b      	ldrh	r3, [r7, #16]
 800d8ac:	b2db      	uxtb	r3, r3
 800d8ae:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d8b0:	88fa      	ldrh	r2, [r7, #6]
 800d8b2:	8a79      	ldrh	r1, [r7, #18]
 800d8b4:	8a3b      	ldrh	r3, [r7, #16]
 800d8b6:	440b      	add	r3, r1
 800d8b8:	429a      	cmp	r2, r3
 800d8ba:	da49      	bge.n	800d950 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d8bc:	89fb      	ldrh	r3, [r7, #14]
 800d8be:	2b08      	cmp	r3, #8
 800d8c0:	d84f      	bhi.n	800d962 <ff_wtoupper+0xfa>
 800d8c2:	a201      	add	r2, pc, #4	; (adr r2, 800d8c8 <ff_wtoupper+0x60>)
 800d8c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8c8:	0800d8ed 	.word	0x0800d8ed
 800d8cc:	0800d8ff 	.word	0x0800d8ff
 800d8d0:	0800d915 	.word	0x0800d915
 800d8d4:	0800d91d 	.word	0x0800d91d
 800d8d8:	0800d925 	.word	0x0800d925
 800d8dc:	0800d92d 	.word	0x0800d92d
 800d8e0:	0800d935 	.word	0x0800d935
 800d8e4:	0800d93d 	.word	0x0800d93d
 800d8e8:	0800d945 	.word	0x0800d945
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d8ec:	88fa      	ldrh	r2, [r7, #6]
 800d8ee:	8a7b      	ldrh	r3, [r7, #18]
 800d8f0:	1ad3      	subs	r3, r2, r3
 800d8f2:	005b      	lsls	r3, r3, #1
 800d8f4:	697a      	ldr	r2, [r7, #20]
 800d8f6:	4413      	add	r3, r2
 800d8f8:	881b      	ldrh	r3, [r3, #0]
 800d8fa:	80fb      	strh	r3, [r7, #6]
 800d8fc:	e027      	b.n	800d94e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d8fe:	88fa      	ldrh	r2, [r7, #6]
 800d900:	8a7b      	ldrh	r3, [r7, #18]
 800d902:	1ad3      	subs	r3, r2, r3
 800d904:	b29b      	uxth	r3, r3
 800d906:	f003 0301 	and.w	r3, r3, #1
 800d90a:	b29b      	uxth	r3, r3
 800d90c:	88fa      	ldrh	r2, [r7, #6]
 800d90e:	1ad3      	subs	r3, r2, r3
 800d910:	80fb      	strh	r3, [r7, #6]
 800d912:	e01c      	b.n	800d94e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d914:	88fb      	ldrh	r3, [r7, #6]
 800d916:	3b10      	subs	r3, #16
 800d918:	80fb      	strh	r3, [r7, #6]
 800d91a:	e018      	b.n	800d94e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d91c:	88fb      	ldrh	r3, [r7, #6]
 800d91e:	3b20      	subs	r3, #32
 800d920:	80fb      	strh	r3, [r7, #6]
 800d922:	e014      	b.n	800d94e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d924:	88fb      	ldrh	r3, [r7, #6]
 800d926:	3b30      	subs	r3, #48	; 0x30
 800d928:	80fb      	strh	r3, [r7, #6]
 800d92a:	e010      	b.n	800d94e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d92c:	88fb      	ldrh	r3, [r7, #6]
 800d92e:	3b1a      	subs	r3, #26
 800d930:	80fb      	strh	r3, [r7, #6]
 800d932:	e00c      	b.n	800d94e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d934:	88fb      	ldrh	r3, [r7, #6]
 800d936:	3308      	adds	r3, #8
 800d938:	80fb      	strh	r3, [r7, #6]
 800d93a:	e008      	b.n	800d94e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d93c:	88fb      	ldrh	r3, [r7, #6]
 800d93e:	3b50      	subs	r3, #80	; 0x50
 800d940:	80fb      	strh	r3, [r7, #6]
 800d942:	e004      	b.n	800d94e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d944:	88fb      	ldrh	r3, [r7, #6]
 800d946:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800d94a:	80fb      	strh	r3, [r7, #6]
 800d94c:	bf00      	nop
			}
			break;
 800d94e:	e008      	b.n	800d962 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d950:	89fb      	ldrh	r3, [r7, #14]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d195      	bne.n	800d882 <ff_wtoupper+0x1a>
 800d956:	8a3b      	ldrh	r3, [r7, #16]
 800d958:	005b      	lsls	r3, r3, #1
 800d95a:	697a      	ldr	r2, [r7, #20]
 800d95c:	4413      	add	r3, r2
 800d95e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d960:	e78f      	b.n	800d882 <ff_wtoupper+0x1a>
			break;
 800d962:	bf00      	nop
	}

	return chr;
 800d964:	88fb      	ldrh	r3, [r7, #6]
}
 800d966:	4618      	mov	r0, r3
 800d968:	371c      	adds	r7, #28
 800d96a:	46bd      	mov	sp, r7
 800d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d970:	4770      	bx	lr
 800d972:	bf00      	nop
 800d974:	0800ef9c 	.word	0x0800ef9c
 800d978:	0800f190 	.word	0x0800f190

0800d97c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d980:	2201      	movs	r2, #1
 800d982:	490e      	ldr	r1, [pc, #56]	; (800d9bc <MX_USB_HOST_Init+0x40>)
 800d984:	480e      	ldr	r0, [pc, #56]	; (800d9c0 <MX_USB_HOST_Init+0x44>)
 800d986:	f7f9 fe25 	bl	80075d4 <USBH_Init>
 800d98a:	4603      	mov	r3, r0
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d001      	beq.n	800d994 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d990:	f7f3 ffae 	bl	80018f0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800d994:	490b      	ldr	r1, [pc, #44]	; (800d9c4 <MX_USB_HOST_Init+0x48>)
 800d996:	480a      	ldr	r0, [pc, #40]	; (800d9c0 <MX_USB_HOST_Init+0x44>)
 800d998:	f7f9 feaa 	bl	80076f0 <USBH_RegisterClass>
 800d99c:	4603      	mov	r3, r0
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d001      	beq.n	800d9a6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d9a2:	f7f3 ffa5 	bl	80018f0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d9a6:	4806      	ldr	r0, [pc, #24]	; (800d9c0 <MX_USB_HOST_Init+0x44>)
 800d9a8:	f7f9 ff2e 	bl	8007808 <USBH_Start>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d001      	beq.n	800d9b6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d9b2:	f7f3 ff9d 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d9b6:	bf00      	nop
 800d9b8:	bd80      	pop	{r7, pc}
 800d9ba:	bf00      	nop
 800d9bc:	0800d9dd 	.word	0x0800d9dd
 800d9c0:	200027d0 	.word	0x200027d0
 800d9c4:	2000000c 	.word	0x2000000c

0800d9c8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800d9cc:	4802      	ldr	r0, [pc, #8]	; (800d9d8 <MX_USB_HOST_Process+0x10>)
 800d9ce:	f7f9 ff2b 	bl	8007828 <USBH_Process>
}
 800d9d2:	bf00      	nop
 800d9d4:	bd80      	pop	{r7, pc}
 800d9d6:	bf00      	nop
 800d9d8:	200027d0 	.word	0x200027d0

0800d9dc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b082      	sub	sp, #8
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	460b      	mov	r3, r1
 800d9e6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d9e8:	78fb      	ldrb	r3, [r7, #3]
 800d9ea:	3b01      	subs	r3, #1
 800d9ec:	2b04      	cmp	r3, #4
 800d9ee:	d825      	bhi.n	800da3c <USBH_UserProcess+0x60>
 800d9f0:	a201      	add	r2, pc, #4	; (adr r2, 800d9f8 <USBH_UserProcess+0x1c>)
 800d9f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9f6:	bf00      	nop
 800d9f8:	0800da3d 	.word	0x0800da3d
 800d9fc:	0800da19 	.word	0x0800da19
 800da00:	0800da3d 	.word	0x0800da3d
 800da04:	0800da35 	.word	0x0800da35
 800da08:	0800da0d 	.word	0x0800da0d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800da0c:	4b0e      	ldr	r3, [pc, #56]	; (800da48 <USBH_UserProcess+0x6c>)
 800da0e:	2203      	movs	r2, #3
 800da10:	701a      	strb	r2, [r3, #0]

  Unmount_USB();
 800da12:	f7f3 f9f3 	bl	8000dfc <Unmount_USB>

  break;
 800da16:	e012      	b.n	800da3e <USBH_UserProcess+0x62>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800da18:	4b0b      	ldr	r3, [pc, #44]	; (800da48 <USBH_UserProcess+0x6c>)
 800da1a:	2202      	movs	r2, #2
 800da1c:	701a      	strb	r2, [r3, #0]

  Mount_USB();
 800da1e:	f7f3 f9cb 	bl	8000db8 <Mount_USB>
  Check_USB_Details();
 800da22:	f7f3 fb87 	bl	8001134 <Check_USB_Details>
  Scan_USB("/");
 800da26:	4809      	ldr	r0, [pc, #36]	; (800da4c <USBH_UserProcess+0x70>)
 800da28:	f7f3 fa08 	bl	8000e3c <Scan_USB>
  Read_File("/DATA.txt");
 800da2c:	4808      	ldr	r0, [pc, #32]	; (800da50 <USBH_UserProcess+0x74>)
 800da2e:	f7f3 faa9 	bl	8000f84 <Read_File>

  break;
 800da32:	e004      	b.n	800da3e <USBH_UserProcess+0x62>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800da34:	4b04      	ldr	r3, [pc, #16]	; (800da48 <USBH_UserProcess+0x6c>)
 800da36:	2201      	movs	r2, #1
 800da38:	701a      	strb	r2, [r3, #0]
  break;
 800da3a:	e000      	b.n	800da3e <USBH_UserProcess+0x62>

  default:
  break;
 800da3c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800da3e:	bf00      	nop
 800da40:	3708      	adds	r7, #8
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}
 800da46:	bf00      	nop
 800da48:	20000550 	.word	0x20000550
 800da4c:	0800edd0 	.word	0x0800edd0
 800da50:	0800edd4 	.word	0x0800edd4

0800da54 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b08a      	sub	sp, #40	; 0x28
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800da5c:	f107 0314 	add.w	r3, r7, #20
 800da60:	2200      	movs	r2, #0
 800da62:	601a      	str	r2, [r3, #0]
 800da64:	605a      	str	r2, [r3, #4]
 800da66:	609a      	str	r2, [r3, #8]
 800da68:	60da      	str	r2, [r3, #12]
 800da6a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800da74:	d147      	bne.n	800db06 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800da76:	2300      	movs	r3, #0
 800da78:	613b      	str	r3, [r7, #16]
 800da7a:	4b25      	ldr	r3, [pc, #148]	; (800db10 <HAL_HCD_MspInit+0xbc>)
 800da7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da7e:	4a24      	ldr	r2, [pc, #144]	; (800db10 <HAL_HCD_MspInit+0xbc>)
 800da80:	f043 0301 	orr.w	r3, r3, #1
 800da84:	6313      	str	r3, [r2, #48]	; 0x30
 800da86:	4b22      	ldr	r3, [pc, #136]	; (800db10 <HAL_HCD_MspInit+0xbc>)
 800da88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da8a:	f003 0301 	and.w	r3, r3, #1
 800da8e:	613b      	str	r3, [r7, #16]
 800da90:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800da92:	f44f 7300 	mov.w	r3, #512	; 0x200
 800da96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800da98:	2300      	movs	r3, #0
 800da9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da9c:	2300      	movs	r3, #0
 800da9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800daa0:	f107 0314 	add.w	r3, r7, #20
 800daa4:	4619      	mov	r1, r3
 800daa6:	481b      	ldr	r0, [pc, #108]	; (800db14 <HAL_HCD_MspInit+0xc0>)
 800daa8:	f7f4 f9e4 	bl	8001e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800daac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800dab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dab2:	2302      	movs	r3, #2
 800dab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dab6:	2300      	movs	r3, #0
 800dab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800daba:	2303      	movs	r3, #3
 800dabc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dabe:	230a      	movs	r3, #10
 800dac0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dac2:	f107 0314 	add.w	r3, r7, #20
 800dac6:	4619      	mov	r1, r3
 800dac8:	4812      	ldr	r0, [pc, #72]	; (800db14 <HAL_HCD_MspInit+0xc0>)
 800daca:	f7f4 f9d3 	bl	8001e74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dace:	4b10      	ldr	r3, [pc, #64]	; (800db10 <HAL_HCD_MspInit+0xbc>)
 800dad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dad2:	4a0f      	ldr	r2, [pc, #60]	; (800db10 <HAL_HCD_MspInit+0xbc>)
 800dad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dad8:	6353      	str	r3, [r2, #52]	; 0x34
 800dada:	2300      	movs	r3, #0
 800dadc:	60fb      	str	r3, [r7, #12]
 800dade:	4b0c      	ldr	r3, [pc, #48]	; (800db10 <HAL_HCD_MspInit+0xbc>)
 800dae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dae2:	4a0b      	ldr	r2, [pc, #44]	; (800db10 <HAL_HCD_MspInit+0xbc>)
 800dae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dae8:	6453      	str	r3, [r2, #68]	; 0x44
 800daea:	4b09      	ldr	r3, [pc, #36]	; (800db10 <HAL_HCD_MspInit+0xbc>)
 800daec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800daee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800daf2:	60fb      	str	r3, [r7, #12]
 800daf4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800daf6:	2200      	movs	r2, #0
 800daf8:	2100      	movs	r1, #0
 800dafa:	2043      	movs	r0, #67	; 0x43
 800dafc:	f7f4 f983 	bl	8001e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800db00:	2043      	movs	r0, #67	; 0x43
 800db02:	f7f4 f99c 	bl	8001e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800db06:	bf00      	nop
 800db08:	3728      	adds	r7, #40	; 0x28
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
 800db0e:	bf00      	nop
 800db10:	40023800 	.word	0x40023800
 800db14:	40020000 	.word	0x40020000

0800db18 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b082      	sub	sp, #8
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db26:	4618      	mov	r0, r3
 800db28:	f7fa fa51 	bl	8007fce <USBH_LL_IncTimer>
}
 800db2c:	bf00      	nop
 800db2e:	3708      	adds	r7, #8
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}

0800db34 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b082      	sub	sp, #8
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db42:	4618      	mov	r0, r3
 800db44:	f7fa fa89 	bl	800805a <USBH_LL_Connect>
}
 800db48:	bf00      	nop
 800db4a:	3708      	adds	r7, #8
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b082      	sub	sp, #8
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db5e:	4618      	mov	r0, r3
 800db60:	f7fa fa92 	bl	8008088 <USBH_LL_Disconnect>
}
 800db64:	bf00      	nop
 800db66:	3708      	adds	r7, #8
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}

0800db6c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800db6c:	b480      	push	{r7}
 800db6e:	b083      	sub	sp, #12
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
 800db74:	460b      	mov	r3, r1
 800db76:	70fb      	strb	r3, [r7, #3]
 800db78:	4613      	mov	r3, r2
 800db7a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800db7c:	bf00      	nop
 800db7e:	370c      	adds	r7, #12
 800db80:	46bd      	mov	sp, r7
 800db82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db86:	4770      	bx	lr

0800db88 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b082      	sub	sp, #8
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db96:	4618      	mov	r0, r3
 800db98:	f7fa fa43 	bl	8008022 <USBH_LL_PortEnabled>
} 
 800db9c:	bf00      	nop
 800db9e:	3708      	adds	r7, #8
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b082      	sub	sp, #8
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f7fa fa43 	bl	800803e <USBH_LL_PortDisabled>
} 
 800dbb8:	bf00      	nop
 800dbba:	3708      	adds	r7, #8
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}

0800dbc0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b082      	sub	sp, #8
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800dbce:	2b01      	cmp	r3, #1
 800dbd0:	d12a      	bne.n	800dc28 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800dbd2:	4a18      	ldr	r2, [pc, #96]	; (800dc34 <USBH_LL_Init+0x74>)
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	4a15      	ldr	r2, [pc, #84]	; (800dc34 <USBH_LL_Init+0x74>)
 800dbde:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dbe2:	4b14      	ldr	r3, [pc, #80]	; (800dc34 <USBH_LL_Init+0x74>)
 800dbe4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800dbe8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800dbea:	4b12      	ldr	r3, [pc, #72]	; (800dc34 <USBH_LL_Init+0x74>)
 800dbec:	2208      	movs	r2, #8
 800dbee:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800dbf0:	4b10      	ldr	r3, [pc, #64]	; (800dc34 <USBH_LL_Init+0x74>)
 800dbf2:	2201      	movs	r2, #1
 800dbf4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dbf6:	4b0f      	ldr	r3, [pc, #60]	; (800dc34 <USBH_LL_Init+0x74>)
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800dbfc:	4b0d      	ldr	r3, [pc, #52]	; (800dc34 <USBH_LL_Init+0x74>)
 800dbfe:	2202      	movs	r2, #2
 800dc00:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dc02:	4b0c      	ldr	r3, [pc, #48]	; (800dc34 <USBH_LL_Init+0x74>)
 800dc04:	2200      	movs	r2, #0
 800dc06:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800dc08:	480a      	ldr	r0, [pc, #40]	; (800dc34 <USBH_LL_Init+0x74>)
 800dc0a:	f7f4 fae6 	bl	80021da <HAL_HCD_Init>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d001      	beq.n	800dc18 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800dc14:	f7f3 fe6c 	bl	80018f0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800dc18:	4806      	ldr	r0, [pc, #24]	; (800dc34 <USBH_LL_Init+0x74>)
 800dc1a:	f7f4 fee9 	bl	80029f0 <HAL_HCD_GetCurrentFrame>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	4619      	mov	r1, r3
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f7fa f9c4 	bl	8007fb0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800dc28:	2300      	movs	r3, #0
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3708      	adds	r7, #8
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
 800dc32:	bf00      	nop
 800dc34:	20002ba8 	.word	0x20002ba8

0800dc38 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b084      	sub	sp, #16
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc40:	2300      	movs	r3, #0
 800dc42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dc44:	2300      	movs	r3, #0
 800dc46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7f4 fe56 	bl	8002900 <HAL_HCD_Start>
 800dc54:	4603      	mov	r3, r0
 800dc56:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dc58:	7bfb      	ldrb	r3, [r7, #15]
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f000 f990 	bl	800df80 <USBH_Get_USB_Status>
 800dc60:	4603      	mov	r3, r0
 800dc62:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800dc64:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3710      	adds	r7, #16
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}

0800dc6e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800dc6e:	b580      	push	{r7, lr}
 800dc70:	b084      	sub	sp, #16
 800dc72:	af00      	add	r7, sp, #0
 800dc74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc76:	2300      	movs	r3, #0
 800dc78:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dc84:	4618      	mov	r0, r3
 800dc86:	f7f4 fe5e 	bl	8002946 <HAL_HCD_Stop>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dc8e:	7bfb      	ldrb	r3, [r7, #15]
 800dc90:	4618      	mov	r0, r3
 800dc92:	f000 f975 	bl	800df80 <USBH_Get_USB_Status>
 800dc96:	4603      	mov	r3, r0
 800dc98:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800dc9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3710      	adds	r7, #16
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}

0800dca4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800dcac:	2301      	movs	r3, #1
 800dcae:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f7f4 fea8 	bl	8002a0c <HAL_HCD_GetCurrentSpeed>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	2b01      	cmp	r3, #1
 800dcc0:	d007      	beq.n	800dcd2 <USBH_LL_GetSpeed+0x2e>
 800dcc2:	2b01      	cmp	r3, #1
 800dcc4:	d302      	bcc.n	800dccc <USBH_LL_GetSpeed+0x28>
 800dcc6:	2b02      	cmp	r3, #2
 800dcc8:	d006      	beq.n	800dcd8 <USBH_LL_GetSpeed+0x34>
 800dcca:	e008      	b.n	800dcde <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800dccc:	2300      	movs	r3, #0
 800dcce:	73fb      	strb	r3, [r7, #15]
    break;
 800dcd0:	e008      	b.n	800dce4 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	73fb      	strb	r3, [r7, #15]
    break;
 800dcd6:	e005      	b.n	800dce4 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800dcd8:	2302      	movs	r3, #2
 800dcda:	73fb      	strb	r3, [r7, #15]
    break;
 800dcdc:	e002      	b.n	800dce4 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800dcde:	2301      	movs	r3, #1
 800dce0:	73fb      	strb	r3, [r7, #15]
    break;
 800dce2:	bf00      	nop
  }
  return  speed;
 800dce4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3710      	adds	r7, #16
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}

0800dcee <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800dcee:	b580      	push	{r7, lr}
 800dcf0:	b084      	sub	sp, #16
 800dcf2:	af00      	add	r7, sp, #0
 800dcf4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dd04:	4618      	mov	r0, r3
 800dd06:	f7f4 fe3b 	bl	8002980 <HAL_HCD_ResetPort>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800dd0e:	7bfb      	ldrb	r3, [r7, #15]
 800dd10:	4618      	mov	r0, r3
 800dd12:	f000 f935 	bl	800df80 <USBH_Get_USB_Status>
 800dd16:	4603      	mov	r3, r0
 800dd18:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800dd1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3710      	adds	r7, #16
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}

0800dd24 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b082      	sub	sp, #8
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
 800dd2c:	460b      	mov	r3, r1
 800dd2e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dd36:	78fa      	ldrb	r2, [r7, #3]
 800dd38:	4611      	mov	r1, r2
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f7f4 fe43 	bl	80029c6 <HAL_HCD_HC_GetXferCount>
 800dd40:	4603      	mov	r3, r0
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	3708      	adds	r7, #8
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}

0800dd4a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800dd4a:	b590      	push	{r4, r7, lr}
 800dd4c:	b089      	sub	sp, #36	; 0x24
 800dd4e:	af04      	add	r7, sp, #16
 800dd50:	6078      	str	r0, [r7, #4]
 800dd52:	4608      	mov	r0, r1
 800dd54:	4611      	mov	r1, r2
 800dd56:	461a      	mov	r2, r3
 800dd58:	4603      	mov	r3, r0
 800dd5a:	70fb      	strb	r3, [r7, #3]
 800dd5c:	460b      	mov	r3, r1
 800dd5e:	70bb      	strb	r3, [r7, #2]
 800dd60:	4613      	mov	r3, r2
 800dd62:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd64:	2300      	movs	r3, #0
 800dd66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dd68:	2300      	movs	r3, #0
 800dd6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800dd72:	787c      	ldrb	r4, [r7, #1]
 800dd74:	78ba      	ldrb	r2, [r7, #2]
 800dd76:	78f9      	ldrb	r1, [r7, #3]
 800dd78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dd7a:	9302      	str	r3, [sp, #8]
 800dd7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dd80:	9301      	str	r3, [sp, #4]
 800dd82:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dd86:	9300      	str	r3, [sp, #0]
 800dd88:	4623      	mov	r3, r4
 800dd8a:	f7f4 fa88 	bl	800229e <HAL_HCD_HC_Init>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800dd92:	7bfb      	ldrb	r3, [r7, #15]
 800dd94:	4618      	mov	r0, r3
 800dd96:	f000 f8f3 	bl	800df80 <USBH_Get_USB_Status>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800dd9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800dda0:	4618      	mov	r0, r3
 800dda2:	3714      	adds	r7, #20
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd90      	pop	{r4, r7, pc}

0800dda8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b084      	sub	sp, #16
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
 800ddb0:	460b      	mov	r3, r1
 800ddb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ddc2:	78fa      	ldrb	r2, [r7, #3]
 800ddc4:	4611      	mov	r1, r2
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f7f4 fb01 	bl	80023ce <HAL_HCD_HC_Halt>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ddd0:	7bfb      	ldrb	r3, [r7, #15]
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f000 f8d4 	bl	800df80 <USBH_Get_USB_Status>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800dddc:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	3710      	adds	r7, #16
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd80      	pop	{r7, pc}

0800dde6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800dde6:	b590      	push	{r4, r7, lr}
 800dde8:	b089      	sub	sp, #36	; 0x24
 800ddea:	af04      	add	r7, sp, #16
 800ddec:	6078      	str	r0, [r7, #4]
 800ddee:	4608      	mov	r0, r1
 800ddf0:	4611      	mov	r1, r2
 800ddf2:	461a      	mov	r2, r3
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	70fb      	strb	r3, [r7, #3]
 800ddf8:	460b      	mov	r3, r1
 800ddfa:	70bb      	strb	r3, [r7, #2]
 800ddfc:	4613      	mov	r3, r2
 800ddfe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de00:	2300      	movs	r3, #0
 800de02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800de04:	2300      	movs	r3, #0
 800de06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800de0e:	787c      	ldrb	r4, [r7, #1]
 800de10:	78ba      	ldrb	r2, [r7, #2]
 800de12:	78f9      	ldrb	r1, [r7, #3]
 800de14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800de18:	9303      	str	r3, [sp, #12]
 800de1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800de1c:	9302      	str	r3, [sp, #8]
 800de1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de20:	9301      	str	r3, [sp, #4]
 800de22:	f897 3020 	ldrb.w	r3, [r7, #32]
 800de26:	9300      	str	r3, [sp, #0]
 800de28:	4623      	mov	r3, r4
 800de2a:	f7f4 faf3 	bl	8002414 <HAL_HCD_HC_SubmitRequest>
 800de2e:	4603      	mov	r3, r0
 800de30:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800de32:	7bfb      	ldrb	r3, [r7, #15]
 800de34:	4618      	mov	r0, r3
 800de36:	f000 f8a3 	bl	800df80 <USBH_Get_USB_Status>
 800de3a:	4603      	mov	r3, r0
 800de3c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800de3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800de40:	4618      	mov	r0, r3
 800de42:	3714      	adds	r7, #20
 800de44:	46bd      	mov	sp, r7
 800de46:	bd90      	pop	{r4, r7, pc}

0800de48 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b082      	sub	sp, #8
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	460b      	mov	r3, r1
 800de52:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800de5a:	78fa      	ldrb	r2, [r7, #3]
 800de5c:	4611      	mov	r1, r2
 800de5e:	4618      	mov	r0, r3
 800de60:	f7f4 fd9c 	bl	800299c <HAL_HCD_HC_GetURBState>
 800de64:	4603      	mov	r3, r0
}
 800de66:	4618      	mov	r0, r3
 800de68:	3708      	adds	r7, #8
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}

0800de6e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800de6e:	b580      	push	{r7, lr}
 800de70:	b082      	sub	sp, #8
 800de72:	af00      	add	r7, sp, #0
 800de74:	6078      	str	r0, [r7, #4]
 800de76:	460b      	mov	r3, r1
 800de78:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800de80:	2b01      	cmp	r3, #1
 800de82:	d103      	bne.n	800de8c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800de84:	78fb      	ldrb	r3, [r7, #3]
 800de86:	4618      	mov	r0, r3
 800de88:	f000 f8a6 	bl	800dfd8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800de8c:	20c8      	movs	r0, #200	; 0xc8
 800de8e:	f7f3 febd 	bl	8001c0c <HAL_Delay>
  return USBH_OK;
 800de92:	2300      	movs	r3, #0
}
 800de94:	4618      	mov	r0, r3
 800de96:	3708      	adds	r7, #8
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}

0800de9c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800de9c:	b480      	push	{r7}
 800de9e:	b085      	sub	sp, #20
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
 800dea4:	460b      	mov	r3, r1
 800dea6:	70fb      	strb	r3, [r7, #3]
 800dea8:	4613      	mov	r3, r2
 800deaa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800deb2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800deb4:	78fa      	ldrb	r2, [r7, #3]
 800deb6:	68f9      	ldr	r1, [r7, #12]
 800deb8:	4613      	mov	r3, r2
 800deba:	009b      	lsls	r3, r3, #2
 800debc:	4413      	add	r3, r2
 800debe:	00db      	lsls	r3, r3, #3
 800dec0:	440b      	add	r3, r1
 800dec2:	333b      	adds	r3, #59	; 0x3b
 800dec4:	781b      	ldrb	r3, [r3, #0]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d00a      	beq.n	800dee0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800deca:	78fa      	ldrb	r2, [r7, #3]
 800decc:	68f9      	ldr	r1, [r7, #12]
 800dece:	4613      	mov	r3, r2
 800ded0:	009b      	lsls	r3, r3, #2
 800ded2:	4413      	add	r3, r2
 800ded4:	00db      	lsls	r3, r3, #3
 800ded6:	440b      	add	r3, r1
 800ded8:	3350      	adds	r3, #80	; 0x50
 800deda:	78ba      	ldrb	r2, [r7, #2]
 800dedc:	701a      	strb	r2, [r3, #0]
 800dede:	e009      	b.n	800def4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800dee0:	78fa      	ldrb	r2, [r7, #3]
 800dee2:	68f9      	ldr	r1, [r7, #12]
 800dee4:	4613      	mov	r3, r2
 800dee6:	009b      	lsls	r3, r3, #2
 800dee8:	4413      	add	r3, r2
 800deea:	00db      	lsls	r3, r3, #3
 800deec:	440b      	add	r3, r1
 800deee:	3351      	adds	r3, #81	; 0x51
 800def0:	78ba      	ldrb	r2, [r7, #2]
 800def2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800def4:	2300      	movs	r3, #0
}
 800def6:	4618      	mov	r0, r3
 800def8:	3714      	adds	r7, #20
 800defa:	46bd      	mov	sp, r7
 800defc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df00:	4770      	bx	lr

0800df02 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800df02:	b480      	push	{r7}
 800df04:	b085      	sub	sp, #20
 800df06:	af00      	add	r7, sp, #0
 800df08:	6078      	str	r0, [r7, #4]
 800df0a:	460b      	mov	r3, r1
 800df0c:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800df0e:	2300      	movs	r3, #0
 800df10:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800df18:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800df1a:	78fa      	ldrb	r2, [r7, #3]
 800df1c:	68b9      	ldr	r1, [r7, #8]
 800df1e:	4613      	mov	r3, r2
 800df20:	009b      	lsls	r3, r3, #2
 800df22:	4413      	add	r3, r2
 800df24:	00db      	lsls	r3, r3, #3
 800df26:	440b      	add	r3, r1
 800df28:	333b      	adds	r3, #59	; 0x3b
 800df2a:	781b      	ldrb	r3, [r3, #0]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d00a      	beq.n	800df46 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800df30:	78fa      	ldrb	r2, [r7, #3]
 800df32:	68b9      	ldr	r1, [r7, #8]
 800df34:	4613      	mov	r3, r2
 800df36:	009b      	lsls	r3, r3, #2
 800df38:	4413      	add	r3, r2
 800df3a:	00db      	lsls	r3, r3, #3
 800df3c:	440b      	add	r3, r1
 800df3e:	3350      	adds	r3, #80	; 0x50
 800df40:	781b      	ldrb	r3, [r3, #0]
 800df42:	73fb      	strb	r3, [r7, #15]
 800df44:	e009      	b.n	800df5a <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800df46:	78fa      	ldrb	r2, [r7, #3]
 800df48:	68b9      	ldr	r1, [r7, #8]
 800df4a:	4613      	mov	r3, r2
 800df4c:	009b      	lsls	r3, r3, #2
 800df4e:	4413      	add	r3, r2
 800df50:	00db      	lsls	r3, r3, #3
 800df52:	440b      	add	r3, r1
 800df54:	3351      	adds	r3, #81	; 0x51
 800df56:	781b      	ldrb	r3, [r3, #0]
 800df58:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800df5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800df5c:	4618      	mov	r0, r3
 800df5e:	3714      	adds	r7, #20
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr

0800df68 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b082      	sub	sp, #8
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f7f3 fe4b 	bl	8001c0c <HAL_Delay>
}
 800df76:	bf00      	nop
 800df78:	3708      	adds	r7, #8
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}
	...

0800df80 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800df80:	b480      	push	{r7}
 800df82:	b085      	sub	sp, #20
 800df84:	af00      	add	r7, sp, #0
 800df86:	4603      	mov	r3, r0
 800df88:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800df8a:	2300      	movs	r3, #0
 800df8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800df8e:	79fb      	ldrb	r3, [r7, #7]
 800df90:	2b03      	cmp	r3, #3
 800df92:	d817      	bhi.n	800dfc4 <USBH_Get_USB_Status+0x44>
 800df94:	a201      	add	r2, pc, #4	; (adr r2, 800df9c <USBH_Get_USB_Status+0x1c>)
 800df96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df9a:	bf00      	nop
 800df9c:	0800dfad 	.word	0x0800dfad
 800dfa0:	0800dfb3 	.word	0x0800dfb3
 800dfa4:	0800dfb9 	.word	0x0800dfb9
 800dfa8:	0800dfbf 	.word	0x0800dfbf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800dfac:	2300      	movs	r3, #0
 800dfae:	73fb      	strb	r3, [r7, #15]
    break;
 800dfb0:	e00b      	b.n	800dfca <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800dfb2:	2302      	movs	r3, #2
 800dfb4:	73fb      	strb	r3, [r7, #15]
    break;
 800dfb6:	e008      	b.n	800dfca <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800dfb8:	2301      	movs	r3, #1
 800dfba:	73fb      	strb	r3, [r7, #15]
    break;
 800dfbc:	e005      	b.n	800dfca <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800dfbe:	2302      	movs	r3, #2
 800dfc0:	73fb      	strb	r3, [r7, #15]
    break;
 800dfc2:	e002      	b.n	800dfca <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800dfc4:	2302      	movs	r3, #2
 800dfc6:	73fb      	strb	r3, [r7, #15]
    break;
 800dfc8:	bf00      	nop
  }
  return usb_status;
 800dfca:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfcc:	4618      	mov	r0, r3
 800dfce:	3714      	adds	r7, #20
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd6:	4770      	bx	lr

0800dfd8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b084      	sub	sp, #16
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	4603      	mov	r3, r0
 800dfe0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800dfe2:	79fb      	ldrb	r3, [r7, #7]
 800dfe4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800dfe6:	79fb      	ldrb	r3, [r7, #7]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d102      	bne.n	800dff2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800dfec:	2301      	movs	r3, #1
 800dfee:	73fb      	strb	r3, [r7, #15]
 800dff0:	e001      	b.n	800dff6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800dff2:	2300      	movs	r3, #0
 800dff4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800dff6:	7bfb      	ldrb	r3, [r7, #15]
 800dff8:	461a      	mov	r2, r3
 800dffa:	2101      	movs	r1, #1
 800dffc:	4803      	ldr	r0, [pc, #12]	; (800e00c <MX_DriverVbusFS+0x34>)
 800dffe:	f7f4 f8d3 	bl	80021a8 <HAL_GPIO_WritePin>
}
 800e002:	bf00      	nop
 800e004:	3710      	adds	r7, #16
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}
 800e00a:	bf00      	nop
 800e00c:	40020800 	.word	0x40020800

0800e010 <__errno>:
 800e010:	4b01      	ldr	r3, [pc, #4]	; (800e018 <__errno+0x8>)
 800e012:	6818      	ldr	r0, [r3, #0]
 800e014:	4770      	bx	lr
 800e016:	bf00      	nop
 800e018:	2000002c 	.word	0x2000002c

0800e01c <__libc_init_array>:
 800e01c:	b570      	push	{r4, r5, r6, lr}
 800e01e:	4e0d      	ldr	r6, [pc, #52]	; (800e054 <__libc_init_array+0x38>)
 800e020:	4c0d      	ldr	r4, [pc, #52]	; (800e058 <__libc_init_array+0x3c>)
 800e022:	1ba4      	subs	r4, r4, r6
 800e024:	10a4      	asrs	r4, r4, #2
 800e026:	2500      	movs	r5, #0
 800e028:	42a5      	cmp	r5, r4
 800e02a:	d109      	bne.n	800e040 <__libc_init_array+0x24>
 800e02c:	4e0b      	ldr	r6, [pc, #44]	; (800e05c <__libc_init_array+0x40>)
 800e02e:	4c0c      	ldr	r4, [pc, #48]	; (800e060 <__libc_init_array+0x44>)
 800e030:	f000 fc40 	bl	800e8b4 <_init>
 800e034:	1ba4      	subs	r4, r4, r6
 800e036:	10a4      	asrs	r4, r4, #2
 800e038:	2500      	movs	r5, #0
 800e03a:	42a5      	cmp	r5, r4
 800e03c:	d105      	bne.n	800e04a <__libc_init_array+0x2e>
 800e03e:	bd70      	pop	{r4, r5, r6, pc}
 800e040:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e044:	4798      	blx	r3
 800e046:	3501      	adds	r5, #1
 800e048:	e7ee      	b.n	800e028 <__libc_init_array+0xc>
 800e04a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e04e:	4798      	blx	r3
 800e050:	3501      	adds	r5, #1
 800e052:	e7f2      	b.n	800e03a <__libc_init_array+0x1e>
 800e054:	0800f288 	.word	0x0800f288
 800e058:	0800f288 	.word	0x0800f288
 800e05c:	0800f288 	.word	0x0800f288
 800e060:	0800f28c 	.word	0x0800f28c

0800e064 <malloc>:
 800e064:	4b02      	ldr	r3, [pc, #8]	; (800e070 <malloc+0xc>)
 800e066:	4601      	mov	r1, r0
 800e068:	6818      	ldr	r0, [r3, #0]
 800e06a:	f000 b86d 	b.w	800e148 <_malloc_r>
 800e06e:	bf00      	nop
 800e070:	2000002c 	.word	0x2000002c

0800e074 <free>:
 800e074:	4b02      	ldr	r3, [pc, #8]	; (800e080 <free+0xc>)
 800e076:	4601      	mov	r1, r0
 800e078:	6818      	ldr	r0, [r3, #0]
 800e07a:	f000 b817 	b.w	800e0ac <_free_r>
 800e07e:	bf00      	nop
 800e080:	2000002c 	.word	0x2000002c

0800e084 <memcpy>:
 800e084:	b510      	push	{r4, lr}
 800e086:	1e43      	subs	r3, r0, #1
 800e088:	440a      	add	r2, r1
 800e08a:	4291      	cmp	r1, r2
 800e08c:	d100      	bne.n	800e090 <memcpy+0xc>
 800e08e:	bd10      	pop	{r4, pc}
 800e090:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e094:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e098:	e7f7      	b.n	800e08a <memcpy+0x6>

0800e09a <memset>:
 800e09a:	4402      	add	r2, r0
 800e09c:	4603      	mov	r3, r0
 800e09e:	4293      	cmp	r3, r2
 800e0a0:	d100      	bne.n	800e0a4 <memset+0xa>
 800e0a2:	4770      	bx	lr
 800e0a4:	f803 1b01 	strb.w	r1, [r3], #1
 800e0a8:	e7f9      	b.n	800e09e <memset+0x4>
	...

0800e0ac <_free_r>:
 800e0ac:	b538      	push	{r3, r4, r5, lr}
 800e0ae:	4605      	mov	r5, r0
 800e0b0:	2900      	cmp	r1, #0
 800e0b2:	d045      	beq.n	800e140 <_free_r+0x94>
 800e0b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0b8:	1f0c      	subs	r4, r1, #4
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	bfb8      	it	lt
 800e0be:	18e4      	addlt	r4, r4, r3
 800e0c0:	f000 f8d4 	bl	800e26c <__malloc_lock>
 800e0c4:	4a1f      	ldr	r2, [pc, #124]	; (800e144 <_free_r+0x98>)
 800e0c6:	6813      	ldr	r3, [r2, #0]
 800e0c8:	4610      	mov	r0, r2
 800e0ca:	b933      	cbnz	r3, 800e0da <_free_r+0x2e>
 800e0cc:	6063      	str	r3, [r4, #4]
 800e0ce:	6014      	str	r4, [r2, #0]
 800e0d0:	4628      	mov	r0, r5
 800e0d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0d6:	f000 b8ca 	b.w	800e26e <__malloc_unlock>
 800e0da:	42a3      	cmp	r3, r4
 800e0dc:	d90c      	bls.n	800e0f8 <_free_r+0x4c>
 800e0de:	6821      	ldr	r1, [r4, #0]
 800e0e0:	1862      	adds	r2, r4, r1
 800e0e2:	4293      	cmp	r3, r2
 800e0e4:	bf04      	itt	eq
 800e0e6:	681a      	ldreq	r2, [r3, #0]
 800e0e8:	685b      	ldreq	r3, [r3, #4]
 800e0ea:	6063      	str	r3, [r4, #4]
 800e0ec:	bf04      	itt	eq
 800e0ee:	1852      	addeq	r2, r2, r1
 800e0f0:	6022      	streq	r2, [r4, #0]
 800e0f2:	6004      	str	r4, [r0, #0]
 800e0f4:	e7ec      	b.n	800e0d0 <_free_r+0x24>
 800e0f6:	4613      	mov	r3, r2
 800e0f8:	685a      	ldr	r2, [r3, #4]
 800e0fa:	b10a      	cbz	r2, 800e100 <_free_r+0x54>
 800e0fc:	42a2      	cmp	r2, r4
 800e0fe:	d9fa      	bls.n	800e0f6 <_free_r+0x4a>
 800e100:	6819      	ldr	r1, [r3, #0]
 800e102:	1858      	adds	r0, r3, r1
 800e104:	42a0      	cmp	r0, r4
 800e106:	d10b      	bne.n	800e120 <_free_r+0x74>
 800e108:	6820      	ldr	r0, [r4, #0]
 800e10a:	4401      	add	r1, r0
 800e10c:	1858      	adds	r0, r3, r1
 800e10e:	4282      	cmp	r2, r0
 800e110:	6019      	str	r1, [r3, #0]
 800e112:	d1dd      	bne.n	800e0d0 <_free_r+0x24>
 800e114:	6810      	ldr	r0, [r2, #0]
 800e116:	6852      	ldr	r2, [r2, #4]
 800e118:	605a      	str	r2, [r3, #4]
 800e11a:	4401      	add	r1, r0
 800e11c:	6019      	str	r1, [r3, #0]
 800e11e:	e7d7      	b.n	800e0d0 <_free_r+0x24>
 800e120:	d902      	bls.n	800e128 <_free_r+0x7c>
 800e122:	230c      	movs	r3, #12
 800e124:	602b      	str	r3, [r5, #0]
 800e126:	e7d3      	b.n	800e0d0 <_free_r+0x24>
 800e128:	6820      	ldr	r0, [r4, #0]
 800e12a:	1821      	adds	r1, r4, r0
 800e12c:	428a      	cmp	r2, r1
 800e12e:	bf04      	itt	eq
 800e130:	6811      	ldreq	r1, [r2, #0]
 800e132:	6852      	ldreq	r2, [r2, #4]
 800e134:	6062      	str	r2, [r4, #4]
 800e136:	bf04      	itt	eq
 800e138:	1809      	addeq	r1, r1, r0
 800e13a:	6021      	streq	r1, [r4, #0]
 800e13c:	605c      	str	r4, [r3, #4]
 800e13e:	e7c7      	b.n	800e0d0 <_free_r+0x24>
 800e140:	bd38      	pop	{r3, r4, r5, pc}
 800e142:	bf00      	nop
 800e144:	20000554 	.word	0x20000554

0800e148 <_malloc_r>:
 800e148:	b570      	push	{r4, r5, r6, lr}
 800e14a:	1ccd      	adds	r5, r1, #3
 800e14c:	f025 0503 	bic.w	r5, r5, #3
 800e150:	3508      	adds	r5, #8
 800e152:	2d0c      	cmp	r5, #12
 800e154:	bf38      	it	cc
 800e156:	250c      	movcc	r5, #12
 800e158:	2d00      	cmp	r5, #0
 800e15a:	4606      	mov	r6, r0
 800e15c:	db01      	blt.n	800e162 <_malloc_r+0x1a>
 800e15e:	42a9      	cmp	r1, r5
 800e160:	d903      	bls.n	800e16a <_malloc_r+0x22>
 800e162:	230c      	movs	r3, #12
 800e164:	6033      	str	r3, [r6, #0]
 800e166:	2000      	movs	r0, #0
 800e168:	bd70      	pop	{r4, r5, r6, pc}
 800e16a:	f000 f87f 	bl	800e26c <__malloc_lock>
 800e16e:	4a21      	ldr	r2, [pc, #132]	; (800e1f4 <_malloc_r+0xac>)
 800e170:	6814      	ldr	r4, [r2, #0]
 800e172:	4621      	mov	r1, r4
 800e174:	b991      	cbnz	r1, 800e19c <_malloc_r+0x54>
 800e176:	4c20      	ldr	r4, [pc, #128]	; (800e1f8 <_malloc_r+0xb0>)
 800e178:	6823      	ldr	r3, [r4, #0]
 800e17a:	b91b      	cbnz	r3, 800e184 <_malloc_r+0x3c>
 800e17c:	4630      	mov	r0, r6
 800e17e:	f000 f83d 	bl	800e1fc <_sbrk_r>
 800e182:	6020      	str	r0, [r4, #0]
 800e184:	4629      	mov	r1, r5
 800e186:	4630      	mov	r0, r6
 800e188:	f000 f838 	bl	800e1fc <_sbrk_r>
 800e18c:	1c43      	adds	r3, r0, #1
 800e18e:	d124      	bne.n	800e1da <_malloc_r+0x92>
 800e190:	230c      	movs	r3, #12
 800e192:	6033      	str	r3, [r6, #0]
 800e194:	4630      	mov	r0, r6
 800e196:	f000 f86a 	bl	800e26e <__malloc_unlock>
 800e19a:	e7e4      	b.n	800e166 <_malloc_r+0x1e>
 800e19c:	680b      	ldr	r3, [r1, #0]
 800e19e:	1b5b      	subs	r3, r3, r5
 800e1a0:	d418      	bmi.n	800e1d4 <_malloc_r+0x8c>
 800e1a2:	2b0b      	cmp	r3, #11
 800e1a4:	d90f      	bls.n	800e1c6 <_malloc_r+0x7e>
 800e1a6:	600b      	str	r3, [r1, #0]
 800e1a8:	50cd      	str	r5, [r1, r3]
 800e1aa:	18cc      	adds	r4, r1, r3
 800e1ac:	4630      	mov	r0, r6
 800e1ae:	f000 f85e 	bl	800e26e <__malloc_unlock>
 800e1b2:	f104 000b 	add.w	r0, r4, #11
 800e1b6:	1d23      	adds	r3, r4, #4
 800e1b8:	f020 0007 	bic.w	r0, r0, #7
 800e1bc:	1ac3      	subs	r3, r0, r3
 800e1be:	d0d3      	beq.n	800e168 <_malloc_r+0x20>
 800e1c0:	425a      	negs	r2, r3
 800e1c2:	50e2      	str	r2, [r4, r3]
 800e1c4:	e7d0      	b.n	800e168 <_malloc_r+0x20>
 800e1c6:	428c      	cmp	r4, r1
 800e1c8:	684b      	ldr	r3, [r1, #4]
 800e1ca:	bf16      	itet	ne
 800e1cc:	6063      	strne	r3, [r4, #4]
 800e1ce:	6013      	streq	r3, [r2, #0]
 800e1d0:	460c      	movne	r4, r1
 800e1d2:	e7eb      	b.n	800e1ac <_malloc_r+0x64>
 800e1d4:	460c      	mov	r4, r1
 800e1d6:	6849      	ldr	r1, [r1, #4]
 800e1d8:	e7cc      	b.n	800e174 <_malloc_r+0x2c>
 800e1da:	1cc4      	adds	r4, r0, #3
 800e1dc:	f024 0403 	bic.w	r4, r4, #3
 800e1e0:	42a0      	cmp	r0, r4
 800e1e2:	d005      	beq.n	800e1f0 <_malloc_r+0xa8>
 800e1e4:	1a21      	subs	r1, r4, r0
 800e1e6:	4630      	mov	r0, r6
 800e1e8:	f000 f808 	bl	800e1fc <_sbrk_r>
 800e1ec:	3001      	adds	r0, #1
 800e1ee:	d0cf      	beq.n	800e190 <_malloc_r+0x48>
 800e1f0:	6025      	str	r5, [r4, #0]
 800e1f2:	e7db      	b.n	800e1ac <_malloc_r+0x64>
 800e1f4:	20000554 	.word	0x20000554
 800e1f8:	20000558 	.word	0x20000558

0800e1fc <_sbrk_r>:
 800e1fc:	b538      	push	{r3, r4, r5, lr}
 800e1fe:	4c06      	ldr	r4, [pc, #24]	; (800e218 <_sbrk_r+0x1c>)
 800e200:	2300      	movs	r3, #0
 800e202:	4605      	mov	r5, r0
 800e204:	4608      	mov	r0, r1
 800e206:	6023      	str	r3, [r4, #0]
 800e208:	f7f3 fc22 	bl	8001a50 <_sbrk>
 800e20c:	1c43      	adds	r3, r0, #1
 800e20e:	d102      	bne.n	800e216 <_sbrk_r+0x1a>
 800e210:	6823      	ldr	r3, [r4, #0]
 800e212:	b103      	cbz	r3, 800e216 <_sbrk_r+0x1a>
 800e214:	602b      	str	r3, [r5, #0]
 800e216:	bd38      	pop	{r3, r4, r5, pc}
 800e218:	20002e6c 	.word	0x20002e6c

0800e21c <siprintf>:
 800e21c:	b40e      	push	{r1, r2, r3}
 800e21e:	b500      	push	{lr}
 800e220:	b09c      	sub	sp, #112	; 0x70
 800e222:	ab1d      	add	r3, sp, #116	; 0x74
 800e224:	9002      	str	r0, [sp, #8]
 800e226:	9006      	str	r0, [sp, #24]
 800e228:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e22c:	4809      	ldr	r0, [pc, #36]	; (800e254 <siprintf+0x38>)
 800e22e:	9107      	str	r1, [sp, #28]
 800e230:	9104      	str	r1, [sp, #16]
 800e232:	4909      	ldr	r1, [pc, #36]	; (800e258 <siprintf+0x3c>)
 800e234:	f853 2b04 	ldr.w	r2, [r3], #4
 800e238:	9105      	str	r1, [sp, #20]
 800e23a:	6800      	ldr	r0, [r0, #0]
 800e23c:	9301      	str	r3, [sp, #4]
 800e23e:	a902      	add	r1, sp, #8
 800e240:	f000 f870 	bl	800e324 <_svfiprintf_r>
 800e244:	9b02      	ldr	r3, [sp, #8]
 800e246:	2200      	movs	r2, #0
 800e248:	701a      	strb	r2, [r3, #0]
 800e24a:	b01c      	add	sp, #112	; 0x70
 800e24c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e250:	b003      	add	sp, #12
 800e252:	4770      	bx	lr
 800e254:	2000002c 	.word	0x2000002c
 800e258:	ffff0208 	.word	0xffff0208

0800e25c <strcpy>:
 800e25c:	4603      	mov	r3, r0
 800e25e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e262:	f803 2b01 	strb.w	r2, [r3], #1
 800e266:	2a00      	cmp	r2, #0
 800e268:	d1f9      	bne.n	800e25e <strcpy+0x2>
 800e26a:	4770      	bx	lr

0800e26c <__malloc_lock>:
 800e26c:	4770      	bx	lr

0800e26e <__malloc_unlock>:
 800e26e:	4770      	bx	lr

0800e270 <__ssputs_r>:
 800e270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e274:	688e      	ldr	r6, [r1, #8]
 800e276:	429e      	cmp	r6, r3
 800e278:	4682      	mov	sl, r0
 800e27a:	460c      	mov	r4, r1
 800e27c:	4690      	mov	r8, r2
 800e27e:	4699      	mov	r9, r3
 800e280:	d837      	bhi.n	800e2f2 <__ssputs_r+0x82>
 800e282:	898a      	ldrh	r2, [r1, #12]
 800e284:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e288:	d031      	beq.n	800e2ee <__ssputs_r+0x7e>
 800e28a:	6825      	ldr	r5, [r4, #0]
 800e28c:	6909      	ldr	r1, [r1, #16]
 800e28e:	1a6f      	subs	r7, r5, r1
 800e290:	6965      	ldr	r5, [r4, #20]
 800e292:	2302      	movs	r3, #2
 800e294:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e298:	fb95 f5f3 	sdiv	r5, r5, r3
 800e29c:	f109 0301 	add.w	r3, r9, #1
 800e2a0:	443b      	add	r3, r7
 800e2a2:	429d      	cmp	r5, r3
 800e2a4:	bf38      	it	cc
 800e2a6:	461d      	movcc	r5, r3
 800e2a8:	0553      	lsls	r3, r2, #21
 800e2aa:	d530      	bpl.n	800e30e <__ssputs_r+0x9e>
 800e2ac:	4629      	mov	r1, r5
 800e2ae:	f7ff ff4b 	bl	800e148 <_malloc_r>
 800e2b2:	4606      	mov	r6, r0
 800e2b4:	b950      	cbnz	r0, 800e2cc <__ssputs_r+0x5c>
 800e2b6:	230c      	movs	r3, #12
 800e2b8:	f8ca 3000 	str.w	r3, [sl]
 800e2bc:	89a3      	ldrh	r3, [r4, #12]
 800e2be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2c2:	81a3      	strh	r3, [r4, #12]
 800e2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2cc:	463a      	mov	r2, r7
 800e2ce:	6921      	ldr	r1, [r4, #16]
 800e2d0:	f7ff fed8 	bl	800e084 <memcpy>
 800e2d4:	89a3      	ldrh	r3, [r4, #12]
 800e2d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e2da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2de:	81a3      	strh	r3, [r4, #12]
 800e2e0:	6126      	str	r6, [r4, #16]
 800e2e2:	6165      	str	r5, [r4, #20]
 800e2e4:	443e      	add	r6, r7
 800e2e6:	1bed      	subs	r5, r5, r7
 800e2e8:	6026      	str	r6, [r4, #0]
 800e2ea:	60a5      	str	r5, [r4, #8]
 800e2ec:	464e      	mov	r6, r9
 800e2ee:	454e      	cmp	r6, r9
 800e2f0:	d900      	bls.n	800e2f4 <__ssputs_r+0x84>
 800e2f2:	464e      	mov	r6, r9
 800e2f4:	4632      	mov	r2, r6
 800e2f6:	4641      	mov	r1, r8
 800e2f8:	6820      	ldr	r0, [r4, #0]
 800e2fa:	f000 fa93 	bl	800e824 <memmove>
 800e2fe:	68a3      	ldr	r3, [r4, #8]
 800e300:	1b9b      	subs	r3, r3, r6
 800e302:	60a3      	str	r3, [r4, #8]
 800e304:	6823      	ldr	r3, [r4, #0]
 800e306:	441e      	add	r6, r3
 800e308:	6026      	str	r6, [r4, #0]
 800e30a:	2000      	movs	r0, #0
 800e30c:	e7dc      	b.n	800e2c8 <__ssputs_r+0x58>
 800e30e:	462a      	mov	r2, r5
 800e310:	f000 faa1 	bl	800e856 <_realloc_r>
 800e314:	4606      	mov	r6, r0
 800e316:	2800      	cmp	r0, #0
 800e318:	d1e2      	bne.n	800e2e0 <__ssputs_r+0x70>
 800e31a:	6921      	ldr	r1, [r4, #16]
 800e31c:	4650      	mov	r0, sl
 800e31e:	f7ff fec5 	bl	800e0ac <_free_r>
 800e322:	e7c8      	b.n	800e2b6 <__ssputs_r+0x46>

0800e324 <_svfiprintf_r>:
 800e324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e328:	461d      	mov	r5, r3
 800e32a:	898b      	ldrh	r3, [r1, #12]
 800e32c:	061f      	lsls	r7, r3, #24
 800e32e:	b09d      	sub	sp, #116	; 0x74
 800e330:	4680      	mov	r8, r0
 800e332:	460c      	mov	r4, r1
 800e334:	4616      	mov	r6, r2
 800e336:	d50f      	bpl.n	800e358 <_svfiprintf_r+0x34>
 800e338:	690b      	ldr	r3, [r1, #16]
 800e33a:	b96b      	cbnz	r3, 800e358 <_svfiprintf_r+0x34>
 800e33c:	2140      	movs	r1, #64	; 0x40
 800e33e:	f7ff ff03 	bl	800e148 <_malloc_r>
 800e342:	6020      	str	r0, [r4, #0]
 800e344:	6120      	str	r0, [r4, #16]
 800e346:	b928      	cbnz	r0, 800e354 <_svfiprintf_r+0x30>
 800e348:	230c      	movs	r3, #12
 800e34a:	f8c8 3000 	str.w	r3, [r8]
 800e34e:	f04f 30ff 	mov.w	r0, #4294967295
 800e352:	e0c8      	b.n	800e4e6 <_svfiprintf_r+0x1c2>
 800e354:	2340      	movs	r3, #64	; 0x40
 800e356:	6163      	str	r3, [r4, #20]
 800e358:	2300      	movs	r3, #0
 800e35a:	9309      	str	r3, [sp, #36]	; 0x24
 800e35c:	2320      	movs	r3, #32
 800e35e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e362:	2330      	movs	r3, #48	; 0x30
 800e364:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e368:	9503      	str	r5, [sp, #12]
 800e36a:	f04f 0b01 	mov.w	fp, #1
 800e36e:	4637      	mov	r7, r6
 800e370:	463d      	mov	r5, r7
 800e372:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e376:	b10b      	cbz	r3, 800e37c <_svfiprintf_r+0x58>
 800e378:	2b25      	cmp	r3, #37	; 0x25
 800e37a:	d13e      	bne.n	800e3fa <_svfiprintf_r+0xd6>
 800e37c:	ebb7 0a06 	subs.w	sl, r7, r6
 800e380:	d00b      	beq.n	800e39a <_svfiprintf_r+0x76>
 800e382:	4653      	mov	r3, sl
 800e384:	4632      	mov	r2, r6
 800e386:	4621      	mov	r1, r4
 800e388:	4640      	mov	r0, r8
 800e38a:	f7ff ff71 	bl	800e270 <__ssputs_r>
 800e38e:	3001      	adds	r0, #1
 800e390:	f000 80a4 	beq.w	800e4dc <_svfiprintf_r+0x1b8>
 800e394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e396:	4453      	add	r3, sl
 800e398:	9309      	str	r3, [sp, #36]	; 0x24
 800e39a:	783b      	ldrb	r3, [r7, #0]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	f000 809d 	beq.w	800e4dc <_svfiprintf_r+0x1b8>
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	f04f 32ff 	mov.w	r2, #4294967295
 800e3a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e3ac:	9304      	str	r3, [sp, #16]
 800e3ae:	9307      	str	r3, [sp, #28]
 800e3b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e3b4:	931a      	str	r3, [sp, #104]	; 0x68
 800e3b6:	462f      	mov	r7, r5
 800e3b8:	2205      	movs	r2, #5
 800e3ba:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e3be:	4850      	ldr	r0, [pc, #320]	; (800e500 <_svfiprintf_r+0x1dc>)
 800e3c0:	f7f1 ff26 	bl	8000210 <memchr>
 800e3c4:	9b04      	ldr	r3, [sp, #16]
 800e3c6:	b9d0      	cbnz	r0, 800e3fe <_svfiprintf_r+0xda>
 800e3c8:	06d9      	lsls	r1, r3, #27
 800e3ca:	bf44      	itt	mi
 800e3cc:	2220      	movmi	r2, #32
 800e3ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e3d2:	071a      	lsls	r2, r3, #28
 800e3d4:	bf44      	itt	mi
 800e3d6:	222b      	movmi	r2, #43	; 0x2b
 800e3d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e3dc:	782a      	ldrb	r2, [r5, #0]
 800e3de:	2a2a      	cmp	r2, #42	; 0x2a
 800e3e0:	d015      	beq.n	800e40e <_svfiprintf_r+0xea>
 800e3e2:	9a07      	ldr	r2, [sp, #28]
 800e3e4:	462f      	mov	r7, r5
 800e3e6:	2000      	movs	r0, #0
 800e3e8:	250a      	movs	r5, #10
 800e3ea:	4639      	mov	r1, r7
 800e3ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3f0:	3b30      	subs	r3, #48	; 0x30
 800e3f2:	2b09      	cmp	r3, #9
 800e3f4:	d94d      	bls.n	800e492 <_svfiprintf_r+0x16e>
 800e3f6:	b1b8      	cbz	r0, 800e428 <_svfiprintf_r+0x104>
 800e3f8:	e00f      	b.n	800e41a <_svfiprintf_r+0xf6>
 800e3fa:	462f      	mov	r7, r5
 800e3fc:	e7b8      	b.n	800e370 <_svfiprintf_r+0x4c>
 800e3fe:	4a40      	ldr	r2, [pc, #256]	; (800e500 <_svfiprintf_r+0x1dc>)
 800e400:	1a80      	subs	r0, r0, r2
 800e402:	fa0b f000 	lsl.w	r0, fp, r0
 800e406:	4318      	orrs	r0, r3
 800e408:	9004      	str	r0, [sp, #16]
 800e40a:	463d      	mov	r5, r7
 800e40c:	e7d3      	b.n	800e3b6 <_svfiprintf_r+0x92>
 800e40e:	9a03      	ldr	r2, [sp, #12]
 800e410:	1d11      	adds	r1, r2, #4
 800e412:	6812      	ldr	r2, [r2, #0]
 800e414:	9103      	str	r1, [sp, #12]
 800e416:	2a00      	cmp	r2, #0
 800e418:	db01      	blt.n	800e41e <_svfiprintf_r+0xfa>
 800e41a:	9207      	str	r2, [sp, #28]
 800e41c:	e004      	b.n	800e428 <_svfiprintf_r+0x104>
 800e41e:	4252      	negs	r2, r2
 800e420:	f043 0302 	orr.w	r3, r3, #2
 800e424:	9207      	str	r2, [sp, #28]
 800e426:	9304      	str	r3, [sp, #16]
 800e428:	783b      	ldrb	r3, [r7, #0]
 800e42a:	2b2e      	cmp	r3, #46	; 0x2e
 800e42c:	d10c      	bne.n	800e448 <_svfiprintf_r+0x124>
 800e42e:	787b      	ldrb	r3, [r7, #1]
 800e430:	2b2a      	cmp	r3, #42	; 0x2a
 800e432:	d133      	bne.n	800e49c <_svfiprintf_r+0x178>
 800e434:	9b03      	ldr	r3, [sp, #12]
 800e436:	1d1a      	adds	r2, r3, #4
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	9203      	str	r2, [sp, #12]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	bfb8      	it	lt
 800e440:	f04f 33ff 	movlt.w	r3, #4294967295
 800e444:	3702      	adds	r7, #2
 800e446:	9305      	str	r3, [sp, #20]
 800e448:	4d2e      	ldr	r5, [pc, #184]	; (800e504 <_svfiprintf_r+0x1e0>)
 800e44a:	7839      	ldrb	r1, [r7, #0]
 800e44c:	2203      	movs	r2, #3
 800e44e:	4628      	mov	r0, r5
 800e450:	f7f1 fede 	bl	8000210 <memchr>
 800e454:	b138      	cbz	r0, 800e466 <_svfiprintf_r+0x142>
 800e456:	2340      	movs	r3, #64	; 0x40
 800e458:	1b40      	subs	r0, r0, r5
 800e45a:	fa03 f000 	lsl.w	r0, r3, r0
 800e45e:	9b04      	ldr	r3, [sp, #16]
 800e460:	4303      	orrs	r3, r0
 800e462:	3701      	adds	r7, #1
 800e464:	9304      	str	r3, [sp, #16]
 800e466:	7839      	ldrb	r1, [r7, #0]
 800e468:	4827      	ldr	r0, [pc, #156]	; (800e508 <_svfiprintf_r+0x1e4>)
 800e46a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e46e:	2206      	movs	r2, #6
 800e470:	1c7e      	adds	r6, r7, #1
 800e472:	f7f1 fecd 	bl	8000210 <memchr>
 800e476:	2800      	cmp	r0, #0
 800e478:	d038      	beq.n	800e4ec <_svfiprintf_r+0x1c8>
 800e47a:	4b24      	ldr	r3, [pc, #144]	; (800e50c <_svfiprintf_r+0x1e8>)
 800e47c:	bb13      	cbnz	r3, 800e4c4 <_svfiprintf_r+0x1a0>
 800e47e:	9b03      	ldr	r3, [sp, #12]
 800e480:	3307      	adds	r3, #7
 800e482:	f023 0307 	bic.w	r3, r3, #7
 800e486:	3308      	adds	r3, #8
 800e488:	9303      	str	r3, [sp, #12]
 800e48a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e48c:	444b      	add	r3, r9
 800e48e:	9309      	str	r3, [sp, #36]	; 0x24
 800e490:	e76d      	b.n	800e36e <_svfiprintf_r+0x4a>
 800e492:	fb05 3202 	mla	r2, r5, r2, r3
 800e496:	2001      	movs	r0, #1
 800e498:	460f      	mov	r7, r1
 800e49a:	e7a6      	b.n	800e3ea <_svfiprintf_r+0xc6>
 800e49c:	2300      	movs	r3, #0
 800e49e:	3701      	adds	r7, #1
 800e4a0:	9305      	str	r3, [sp, #20]
 800e4a2:	4619      	mov	r1, r3
 800e4a4:	250a      	movs	r5, #10
 800e4a6:	4638      	mov	r0, r7
 800e4a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4ac:	3a30      	subs	r2, #48	; 0x30
 800e4ae:	2a09      	cmp	r2, #9
 800e4b0:	d903      	bls.n	800e4ba <_svfiprintf_r+0x196>
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d0c8      	beq.n	800e448 <_svfiprintf_r+0x124>
 800e4b6:	9105      	str	r1, [sp, #20]
 800e4b8:	e7c6      	b.n	800e448 <_svfiprintf_r+0x124>
 800e4ba:	fb05 2101 	mla	r1, r5, r1, r2
 800e4be:	2301      	movs	r3, #1
 800e4c0:	4607      	mov	r7, r0
 800e4c2:	e7f0      	b.n	800e4a6 <_svfiprintf_r+0x182>
 800e4c4:	ab03      	add	r3, sp, #12
 800e4c6:	9300      	str	r3, [sp, #0]
 800e4c8:	4622      	mov	r2, r4
 800e4ca:	4b11      	ldr	r3, [pc, #68]	; (800e510 <_svfiprintf_r+0x1ec>)
 800e4cc:	a904      	add	r1, sp, #16
 800e4ce:	4640      	mov	r0, r8
 800e4d0:	f3af 8000 	nop.w
 800e4d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e4d8:	4681      	mov	r9, r0
 800e4da:	d1d6      	bne.n	800e48a <_svfiprintf_r+0x166>
 800e4dc:	89a3      	ldrh	r3, [r4, #12]
 800e4de:	065b      	lsls	r3, r3, #25
 800e4e0:	f53f af35 	bmi.w	800e34e <_svfiprintf_r+0x2a>
 800e4e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e4e6:	b01d      	add	sp, #116	; 0x74
 800e4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4ec:	ab03      	add	r3, sp, #12
 800e4ee:	9300      	str	r3, [sp, #0]
 800e4f0:	4622      	mov	r2, r4
 800e4f2:	4b07      	ldr	r3, [pc, #28]	; (800e510 <_svfiprintf_r+0x1ec>)
 800e4f4:	a904      	add	r1, sp, #16
 800e4f6:	4640      	mov	r0, r8
 800e4f8:	f000 f882 	bl	800e600 <_printf_i>
 800e4fc:	e7ea      	b.n	800e4d4 <_svfiprintf_r+0x1b0>
 800e4fe:	bf00      	nop
 800e500:	0800f24c 	.word	0x0800f24c
 800e504:	0800f252 	.word	0x0800f252
 800e508:	0800f256 	.word	0x0800f256
 800e50c:	00000000 	.word	0x00000000
 800e510:	0800e271 	.word	0x0800e271

0800e514 <_printf_common>:
 800e514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e518:	4691      	mov	r9, r2
 800e51a:	461f      	mov	r7, r3
 800e51c:	688a      	ldr	r2, [r1, #8]
 800e51e:	690b      	ldr	r3, [r1, #16]
 800e520:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e524:	4293      	cmp	r3, r2
 800e526:	bfb8      	it	lt
 800e528:	4613      	movlt	r3, r2
 800e52a:	f8c9 3000 	str.w	r3, [r9]
 800e52e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e532:	4606      	mov	r6, r0
 800e534:	460c      	mov	r4, r1
 800e536:	b112      	cbz	r2, 800e53e <_printf_common+0x2a>
 800e538:	3301      	adds	r3, #1
 800e53a:	f8c9 3000 	str.w	r3, [r9]
 800e53e:	6823      	ldr	r3, [r4, #0]
 800e540:	0699      	lsls	r1, r3, #26
 800e542:	bf42      	ittt	mi
 800e544:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e548:	3302      	addmi	r3, #2
 800e54a:	f8c9 3000 	strmi.w	r3, [r9]
 800e54e:	6825      	ldr	r5, [r4, #0]
 800e550:	f015 0506 	ands.w	r5, r5, #6
 800e554:	d107      	bne.n	800e566 <_printf_common+0x52>
 800e556:	f104 0a19 	add.w	sl, r4, #25
 800e55a:	68e3      	ldr	r3, [r4, #12]
 800e55c:	f8d9 2000 	ldr.w	r2, [r9]
 800e560:	1a9b      	subs	r3, r3, r2
 800e562:	42ab      	cmp	r3, r5
 800e564:	dc28      	bgt.n	800e5b8 <_printf_common+0xa4>
 800e566:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e56a:	6822      	ldr	r2, [r4, #0]
 800e56c:	3300      	adds	r3, #0
 800e56e:	bf18      	it	ne
 800e570:	2301      	movne	r3, #1
 800e572:	0692      	lsls	r2, r2, #26
 800e574:	d42d      	bmi.n	800e5d2 <_printf_common+0xbe>
 800e576:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e57a:	4639      	mov	r1, r7
 800e57c:	4630      	mov	r0, r6
 800e57e:	47c0      	blx	r8
 800e580:	3001      	adds	r0, #1
 800e582:	d020      	beq.n	800e5c6 <_printf_common+0xb2>
 800e584:	6823      	ldr	r3, [r4, #0]
 800e586:	68e5      	ldr	r5, [r4, #12]
 800e588:	f8d9 2000 	ldr.w	r2, [r9]
 800e58c:	f003 0306 	and.w	r3, r3, #6
 800e590:	2b04      	cmp	r3, #4
 800e592:	bf08      	it	eq
 800e594:	1aad      	subeq	r5, r5, r2
 800e596:	68a3      	ldr	r3, [r4, #8]
 800e598:	6922      	ldr	r2, [r4, #16]
 800e59a:	bf0c      	ite	eq
 800e59c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e5a0:	2500      	movne	r5, #0
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	bfc4      	itt	gt
 800e5a6:	1a9b      	subgt	r3, r3, r2
 800e5a8:	18ed      	addgt	r5, r5, r3
 800e5aa:	f04f 0900 	mov.w	r9, #0
 800e5ae:	341a      	adds	r4, #26
 800e5b0:	454d      	cmp	r5, r9
 800e5b2:	d11a      	bne.n	800e5ea <_printf_common+0xd6>
 800e5b4:	2000      	movs	r0, #0
 800e5b6:	e008      	b.n	800e5ca <_printf_common+0xb6>
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	4652      	mov	r2, sl
 800e5bc:	4639      	mov	r1, r7
 800e5be:	4630      	mov	r0, r6
 800e5c0:	47c0      	blx	r8
 800e5c2:	3001      	adds	r0, #1
 800e5c4:	d103      	bne.n	800e5ce <_printf_common+0xba>
 800e5c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e5ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5ce:	3501      	adds	r5, #1
 800e5d0:	e7c3      	b.n	800e55a <_printf_common+0x46>
 800e5d2:	18e1      	adds	r1, r4, r3
 800e5d4:	1c5a      	adds	r2, r3, #1
 800e5d6:	2030      	movs	r0, #48	; 0x30
 800e5d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e5dc:	4422      	add	r2, r4
 800e5de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e5e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e5e6:	3302      	adds	r3, #2
 800e5e8:	e7c5      	b.n	800e576 <_printf_common+0x62>
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	4622      	mov	r2, r4
 800e5ee:	4639      	mov	r1, r7
 800e5f0:	4630      	mov	r0, r6
 800e5f2:	47c0      	blx	r8
 800e5f4:	3001      	adds	r0, #1
 800e5f6:	d0e6      	beq.n	800e5c6 <_printf_common+0xb2>
 800e5f8:	f109 0901 	add.w	r9, r9, #1
 800e5fc:	e7d8      	b.n	800e5b0 <_printf_common+0x9c>
	...

0800e600 <_printf_i>:
 800e600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e604:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e608:	460c      	mov	r4, r1
 800e60a:	7e09      	ldrb	r1, [r1, #24]
 800e60c:	b085      	sub	sp, #20
 800e60e:	296e      	cmp	r1, #110	; 0x6e
 800e610:	4617      	mov	r7, r2
 800e612:	4606      	mov	r6, r0
 800e614:	4698      	mov	r8, r3
 800e616:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e618:	f000 80b3 	beq.w	800e782 <_printf_i+0x182>
 800e61c:	d822      	bhi.n	800e664 <_printf_i+0x64>
 800e61e:	2963      	cmp	r1, #99	; 0x63
 800e620:	d036      	beq.n	800e690 <_printf_i+0x90>
 800e622:	d80a      	bhi.n	800e63a <_printf_i+0x3a>
 800e624:	2900      	cmp	r1, #0
 800e626:	f000 80b9 	beq.w	800e79c <_printf_i+0x19c>
 800e62a:	2958      	cmp	r1, #88	; 0x58
 800e62c:	f000 8083 	beq.w	800e736 <_printf_i+0x136>
 800e630:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e634:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e638:	e032      	b.n	800e6a0 <_printf_i+0xa0>
 800e63a:	2964      	cmp	r1, #100	; 0x64
 800e63c:	d001      	beq.n	800e642 <_printf_i+0x42>
 800e63e:	2969      	cmp	r1, #105	; 0x69
 800e640:	d1f6      	bne.n	800e630 <_printf_i+0x30>
 800e642:	6820      	ldr	r0, [r4, #0]
 800e644:	6813      	ldr	r3, [r2, #0]
 800e646:	0605      	lsls	r5, r0, #24
 800e648:	f103 0104 	add.w	r1, r3, #4
 800e64c:	d52a      	bpl.n	800e6a4 <_printf_i+0xa4>
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	6011      	str	r1, [r2, #0]
 800e652:	2b00      	cmp	r3, #0
 800e654:	da03      	bge.n	800e65e <_printf_i+0x5e>
 800e656:	222d      	movs	r2, #45	; 0x2d
 800e658:	425b      	negs	r3, r3
 800e65a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e65e:	486f      	ldr	r0, [pc, #444]	; (800e81c <_printf_i+0x21c>)
 800e660:	220a      	movs	r2, #10
 800e662:	e039      	b.n	800e6d8 <_printf_i+0xd8>
 800e664:	2973      	cmp	r1, #115	; 0x73
 800e666:	f000 809d 	beq.w	800e7a4 <_printf_i+0x1a4>
 800e66a:	d808      	bhi.n	800e67e <_printf_i+0x7e>
 800e66c:	296f      	cmp	r1, #111	; 0x6f
 800e66e:	d020      	beq.n	800e6b2 <_printf_i+0xb2>
 800e670:	2970      	cmp	r1, #112	; 0x70
 800e672:	d1dd      	bne.n	800e630 <_printf_i+0x30>
 800e674:	6823      	ldr	r3, [r4, #0]
 800e676:	f043 0320 	orr.w	r3, r3, #32
 800e67a:	6023      	str	r3, [r4, #0]
 800e67c:	e003      	b.n	800e686 <_printf_i+0x86>
 800e67e:	2975      	cmp	r1, #117	; 0x75
 800e680:	d017      	beq.n	800e6b2 <_printf_i+0xb2>
 800e682:	2978      	cmp	r1, #120	; 0x78
 800e684:	d1d4      	bne.n	800e630 <_printf_i+0x30>
 800e686:	2378      	movs	r3, #120	; 0x78
 800e688:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e68c:	4864      	ldr	r0, [pc, #400]	; (800e820 <_printf_i+0x220>)
 800e68e:	e055      	b.n	800e73c <_printf_i+0x13c>
 800e690:	6813      	ldr	r3, [r2, #0]
 800e692:	1d19      	adds	r1, r3, #4
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	6011      	str	r1, [r2, #0]
 800e698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e69c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	e08c      	b.n	800e7be <_printf_i+0x1be>
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	6011      	str	r1, [r2, #0]
 800e6a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e6ac:	bf18      	it	ne
 800e6ae:	b21b      	sxthne	r3, r3
 800e6b0:	e7cf      	b.n	800e652 <_printf_i+0x52>
 800e6b2:	6813      	ldr	r3, [r2, #0]
 800e6b4:	6825      	ldr	r5, [r4, #0]
 800e6b6:	1d18      	adds	r0, r3, #4
 800e6b8:	6010      	str	r0, [r2, #0]
 800e6ba:	0628      	lsls	r0, r5, #24
 800e6bc:	d501      	bpl.n	800e6c2 <_printf_i+0xc2>
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	e002      	b.n	800e6c8 <_printf_i+0xc8>
 800e6c2:	0668      	lsls	r0, r5, #25
 800e6c4:	d5fb      	bpl.n	800e6be <_printf_i+0xbe>
 800e6c6:	881b      	ldrh	r3, [r3, #0]
 800e6c8:	4854      	ldr	r0, [pc, #336]	; (800e81c <_printf_i+0x21c>)
 800e6ca:	296f      	cmp	r1, #111	; 0x6f
 800e6cc:	bf14      	ite	ne
 800e6ce:	220a      	movne	r2, #10
 800e6d0:	2208      	moveq	r2, #8
 800e6d2:	2100      	movs	r1, #0
 800e6d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e6d8:	6865      	ldr	r5, [r4, #4]
 800e6da:	60a5      	str	r5, [r4, #8]
 800e6dc:	2d00      	cmp	r5, #0
 800e6de:	f2c0 8095 	blt.w	800e80c <_printf_i+0x20c>
 800e6e2:	6821      	ldr	r1, [r4, #0]
 800e6e4:	f021 0104 	bic.w	r1, r1, #4
 800e6e8:	6021      	str	r1, [r4, #0]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d13d      	bne.n	800e76a <_printf_i+0x16a>
 800e6ee:	2d00      	cmp	r5, #0
 800e6f0:	f040 808e 	bne.w	800e810 <_printf_i+0x210>
 800e6f4:	4665      	mov	r5, ip
 800e6f6:	2a08      	cmp	r2, #8
 800e6f8:	d10b      	bne.n	800e712 <_printf_i+0x112>
 800e6fa:	6823      	ldr	r3, [r4, #0]
 800e6fc:	07db      	lsls	r3, r3, #31
 800e6fe:	d508      	bpl.n	800e712 <_printf_i+0x112>
 800e700:	6923      	ldr	r3, [r4, #16]
 800e702:	6862      	ldr	r2, [r4, #4]
 800e704:	429a      	cmp	r2, r3
 800e706:	bfde      	ittt	le
 800e708:	2330      	movle	r3, #48	; 0x30
 800e70a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e70e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e712:	ebac 0305 	sub.w	r3, ip, r5
 800e716:	6123      	str	r3, [r4, #16]
 800e718:	f8cd 8000 	str.w	r8, [sp]
 800e71c:	463b      	mov	r3, r7
 800e71e:	aa03      	add	r2, sp, #12
 800e720:	4621      	mov	r1, r4
 800e722:	4630      	mov	r0, r6
 800e724:	f7ff fef6 	bl	800e514 <_printf_common>
 800e728:	3001      	adds	r0, #1
 800e72a:	d14d      	bne.n	800e7c8 <_printf_i+0x1c8>
 800e72c:	f04f 30ff 	mov.w	r0, #4294967295
 800e730:	b005      	add	sp, #20
 800e732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e736:	4839      	ldr	r0, [pc, #228]	; (800e81c <_printf_i+0x21c>)
 800e738:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e73c:	6813      	ldr	r3, [r2, #0]
 800e73e:	6821      	ldr	r1, [r4, #0]
 800e740:	1d1d      	adds	r5, r3, #4
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	6015      	str	r5, [r2, #0]
 800e746:	060a      	lsls	r2, r1, #24
 800e748:	d50b      	bpl.n	800e762 <_printf_i+0x162>
 800e74a:	07ca      	lsls	r2, r1, #31
 800e74c:	bf44      	itt	mi
 800e74e:	f041 0120 	orrmi.w	r1, r1, #32
 800e752:	6021      	strmi	r1, [r4, #0]
 800e754:	b91b      	cbnz	r3, 800e75e <_printf_i+0x15e>
 800e756:	6822      	ldr	r2, [r4, #0]
 800e758:	f022 0220 	bic.w	r2, r2, #32
 800e75c:	6022      	str	r2, [r4, #0]
 800e75e:	2210      	movs	r2, #16
 800e760:	e7b7      	b.n	800e6d2 <_printf_i+0xd2>
 800e762:	064d      	lsls	r5, r1, #25
 800e764:	bf48      	it	mi
 800e766:	b29b      	uxthmi	r3, r3
 800e768:	e7ef      	b.n	800e74a <_printf_i+0x14a>
 800e76a:	4665      	mov	r5, ip
 800e76c:	fbb3 f1f2 	udiv	r1, r3, r2
 800e770:	fb02 3311 	mls	r3, r2, r1, r3
 800e774:	5cc3      	ldrb	r3, [r0, r3]
 800e776:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e77a:	460b      	mov	r3, r1
 800e77c:	2900      	cmp	r1, #0
 800e77e:	d1f5      	bne.n	800e76c <_printf_i+0x16c>
 800e780:	e7b9      	b.n	800e6f6 <_printf_i+0xf6>
 800e782:	6813      	ldr	r3, [r2, #0]
 800e784:	6825      	ldr	r5, [r4, #0]
 800e786:	6961      	ldr	r1, [r4, #20]
 800e788:	1d18      	adds	r0, r3, #4
 800e78a:	6010      	str	r0, [r2, #0]
 800e78c:	0628      	lsls	r0, r5, #24
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	d501      	bpl.n	800e796 <_printf_i+0x196>
 800e792:	6019      	str	r1, [r3, #0]
 800e794:	e002      	b.n	800e79c <_printf_i+0x19c>
 800e796:	066a      	lsls	r2, r5, #25
 800e798:	d5fb      	bpl.n	800e792 <_printf_i+0x192>
 800e79a:	8019      	strh	r1, [r3, #0]
 800e79c:	2300      	movs	r3, #0
 800e79e:	6123      	str	r3, [r4, #16]
 800e7a0:	4665      	mov	r5, ip
 800e7a2:	e7b9      	b.n	800e718 <_printf_i+0x118>
 800e7a4:	6813      	ldr	r3, [r2, #0]
 800e7a6:	1d19      	adds	r1, r3, #4
 800e7a8:	6011      	str	r1, [r2, #0]
 800e7aa:	681d      	ldr	r5, [r3, #0]
 800e7ac:	6862      	ldr	r2, [r4, #4]
 800e7ae:	2100      	movs	r1, #0
 800e7b0:	4628      	mov	r0, r5
 800e7b2:	f7f1 fd2d 	bl	8000210 <memchr>
 800e7b6:	b108      	cbz	r0, 800e7bc <_printf_i+0x1bc>
 800e7b8:	1b40      	subs	r0, r0, r5
 800e7ba:	6060      	str	r0, [r4, #4]
 800e7bc:	6863      	ldr	r3, [r4, #4]
 800e7be:	6123      	str	r3, [r4, #16]
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7c6:	e7a7      	b.n	800e718 <_printf_i+0x118>
 800e7c8:	6923      	ldr	r3, [r4, #16]
 800e7ca:	462a      	mov	r2, r5
 800e7cc:	4639      	mov	r1, r7
 800e7ce:	4630      	mov	r0, r6
 800e7d0:	47c0      	blx	r8
 800e7d2:	3001      	adds	r0, #1
 800e7d4:	d0aa      	beq.n	800e72c <_printf_i+0x12c>
 800e7d6:	6823      	ldr	r3, [r4, #0]
 800e7d8:	079b      	lsls	r3, r3, #30
 800e7da:	d413      	bmi.n	800e804 <_printf_i+0x204>
 800e7dc:	68e0      	ldr	r0, [r4, #12]
 800e7de:	9b03      	ldr	r3, [sp, #12]
 800e7e0:	4298      	cmp	r0, r3
 800e7e2:	bfb8      	it	lt
 800e7e4:	4618      	movlt	r0, r3
 800e7e6:	e7a3      	b.n	800e730 <_printf_i+0x130>
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	464a      	mov	r2, r9
 800e7ec:	4639      	mov	r1, r7
 800e7ee:	4630      	mov	r0, r6
 800e7f0:	47c0      	blx	r8
 800e7f2:	3001      	adds	r0, #1
 800e7f4:	d09a      	beq.n	800e72c <_printf_i+0x12c>
 800e7f6:	3501      	adds	r5, #1
 800e7f8:	68e3      	ldr	r3, [r4, #12]
 800e7fa:	9a03      	ldr	r2, [sp, #12]
 800e7fc:	1a9b      	subs	r3, r3, r2
 800e7fe:	42ab      	cmp	r3, r5
 800e800:	dcf2      	bgt.n	800e7e8 <_printf_i+0x1e8>
 800e802:	e7eb      	b.n	800e7dc <_printf_i+0x1dc>
 800e804:	2500      	movs	r5, #0
 800e806:	f104 0919 	add.w	r9, r4, #25
 800e80a:	e7f5      	b.n	800e7f8 <_printf_i+0x1f8>
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d1ac      	bne.n	800e76a <_printf_i+0x16a>
 800e810:	7803      	ldrb	r3, [r0, #0]
 800e812:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e816:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e81a:	e76c      	b.n	800e6f6 <_printf_i+0xf6>
 800e81c:	0800f25d 	.word	0x0800f25d
 800e820:	0800f26e 	.word	0x0800f26e

0800e824 <memmove>:
 800e824:	4288      	cmp	r0, r1
 800e826:	b510      	push	{r4, lr}
 800e828:	eb01 0302 	add.w	r3, r1, r2
 800e82c:	d807      	bhi.n	800e83e <memmove+0x1a>
 800e82e:	1e42      	subs	r2, r0, #1
 800e830:	4299      	cmp	r1, r3
 800e832:	d00a      	beq.n	800e84a <memmove+0x26>
 800e834:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e838:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e83c:	e7f8      	b.n	800e830 <memmove+0xc>
 800e83e:	4283      	cmp	r3, r0
 800e840:	d9f5      	bls.n	800e82e <memmove+0xa>
 800e842:	1881      	adds	r1, r0, r2
 800e844:	1ad2      	subs	r2, r2, r3
 800e846:	42d3      	cmn	r3, r2
 800e848:	d100      	bne.n	800e84c <memmove+0x28>
 800e84a:	bd10      	pop	{r4, pc}
 800e84c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e850:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e854:	e7f7      	b.n	800e846 <memmove+0x22>

0800e856 <_realloc_r>:
 800e856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e858:	4607      	mov	r7, r0
 800e85a:	4614      	mov	r4, r2
 800e85c:	460e      	mov	r6, r1
 800e85e:	b921      	cbnz	r1, 800e86a <_realloc_r+0x14>
 800e860:	4611      	mov	r1, r2
 800e862:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e866:	f7ff bc6f 	b.w	800e148 <_malloc_r>
 800e86a:	b922      	cbnz	r2, 800e876 <_realloc_r+0x20>
 800e86c:	f7ff fc1e 	bl	800e0ac <_free_r>
 800e870:	4625      	mov	r5, r4
 800e872:	4628      	mov	r0, r5
 800e874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e876:	f000 f814 	bl	800e8a2 <_malloc_usable_size_r>
 800e87a:	42a0      	cmp	r0, r4
 800e87c:	d20f      	bcs.n	800e89e <_realloc_r+0x48>
 800e87e:	4621      	mov	r1, r4
 800e880:	4638      	mov	r0, r7
 800e882:	f7ff fc61 	bl	800e148 <_malloc_r>
 800e886:	4605      	mov	r5, r0
 800e888:	2800      	cmp	r0, #0
 800e88a:	d0f2      	beq.n	800e872 <_realloc_r+0x1c>
 800e88c:	4631      	mov	r1, r6
 800e88e:	4622      	mov	r2, r4
 800e890:	f7ff fbf8 	bl	800e084 <memcpy>
 800e894:	4631      	mov	r1, r6
 800e896:	4638      	mov	r0, r7
 800e898:	f7ff fc08 	bl	800e0ac <_free_r>
 800e89c:	e7e9      	b.n	800e872 <_realloc_r+0x1c>
 800e89e:	4635      	mov	r5, r6
 800e8a0:	e7e7      	b.n	800e872 <_realloc_r+0x1c>

0800e8a2 <_malloc_usable_size_r>:
 800e8a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8a6:	1f18      	subs	r0, r3, #4
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	bfbc      	itt	lt
 800e8ac:	580b      	ldrlt	r3, [r1, r0]
 800e8ae:	18c0      	addlt	r0, r0, r3
 800e8b0:	4770      	bx	lr
	...

0800e8b4 <_init>:
 800e8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8b6:	bf00      	nop
 800e8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8ba:	bc08      	pop	{r3}
 800e8bc:	469e      	mov	lr, r3
 800e8be:	4770      	bx	lr

0800e8c0 <_fini>:
 800e8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8c2:	bf00      	nop
 800e8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8c6:	bc08      	pop	{r3}
 800e8c8:	469e      	mov	lr, r3
 800e8ca:	4770      	bx	lr
